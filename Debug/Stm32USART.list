
Stm32USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08009cc0  08009cc0  00019cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1fc  0800a1fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1fc  0800a1fc  0001a1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a204  0800a204  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a204  0800a204  0001a204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a208  0800a208  0001a208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a20c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dcc  200001e0  0800a3ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004fac  0800a3ec  00024fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f7ca  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cbc  00000000  00000000  0003f9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00043698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  00044c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c9  00000000  00000000  00046050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bef  00000000  00000000  0005f919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d0a7  00000000  00000000  00077508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001145af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd8  00000000  00000000  00114604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0011b2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0011b318  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ca8 	.word	0x08009ca8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009ca8 	.word	0x08009ca8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <adcSetSampleTime>:
 *      Author: Pang
 */

#include "Adc.h"

void adcSetSampleTime(AdcReg *adc, int chnNum, AdcSampleTime time) {
 8000eb0:	b490      	push	{r4, r7}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	71fb      	strb	r3, [r7, #7]
	adc->SMPR[!(chnNum/10)] &= ~(0x7 << ((chnNum % 10) * 3));
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	3309      	adds	r3, #9
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	bf94      	ite	ls
 8000ec6:	2301      	movls	r3, #1
 8000ec8:	2300      	movhi	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	3302      	adds	r3, #2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	6858      	ldr	r0, [r3, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <adcSetSampleTime+0xcc>)
 8000eda:	fb83 2301 	smull	r2, r3, r3, r1
 8000ede:	109a      	asrs	r2, r3, #2
 8000ee0:	17cb      	asrs	r3, r1, #31
 8000ee2:	1ad2      	subs	r2, r2, r3
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	1aca      	subs	r2, r1, r3
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	3309      	adds	r3, #9
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	bf94      	ite	ls
 8000f06:	2301      	movls	r3, #1
 8000f08:	2300      	movhi	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4002      	ands	r2, r0
 8000f0e:	68f9      	ldr	r1, [r7, #12]
 8000f10:	3302      	adds	r3, #2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	605a      	str	r2, [r3, #4]
	adc->SMPR[!(chnNum/10)] |= time << ((chnNum % 10) * 3);
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3309      	adds	r3, #9
 8000f1c:	2b12      	cmp	r3, #18
 8000f1e:	bf94      	ite	ls
 8000f20:	2301      	movls	r3, #1
 8000f22:	2300      	movhi	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	6858      	ldr	r0, [r3, #4]
 8000f30:	79fc      	ldrb	r4, [r7, #7]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <adcSetSampleTime+0xcc>)
 8000f36:	fb83 2301 	smull	r2, r3, r3, r1
 8000f3a:	109a      	asrs	r2, r3, #2
 8000f3c:	17cb      	asrs	r3, r1, #31
 8000f3e:	1ad2      	subs	r2, r2, r3
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	1aca      	subs	r2, r1, r3
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	fa04 f303 	lsl.w	r3, r4, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	3309      	adds	r3, #9
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	bf94      	ite	ls
 8000f5e:	2301      	movls	r3, #1
 8000f60:	2300      	movhi	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4302      	orrs	r2, r0
 8000f66:	68f9      	ldr	r1, [r7, #12]
 8000f68:	3302      	adds	r3, #2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	605a      	str	r2, [r3, #4]
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc90      	pop	{r4, r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	66666667 	.word	0x66666667

08000f80 <configureADC>:

void configureADC(AdcReg *adc, AdcConfig cfg) {
 8000f80:	b490      	push	{r4, r7}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	e9c7 2300 	strd	r2, r3, [r7]
	adc->CR1 &= ~(cfg & 0xFFFFFFFF);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	401a      	ands	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	605a      	str	r2, [r3, #4]
	adc->CR1 |= cfg & 0xFFFFFFFF;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	605a      	str	r2, [r3, #4]
	adc->CR2 &= ~(cfg >> 32);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	689c      	ldr	r4, [r3, #8]
 8000faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4613      	mov	r3, r2
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	ea04 0203 	and.w	r2, r4, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	609a      	str	r2, [r3, #8]
	adc->CR2 |= cfg >> 32;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	689c      	ldr	r4, [r3, #8]
 8000fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4613      	mov	r3, r2
 8000fdc:	ea44 0203 	orr.w	r2, r4, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	609a      	str	r2, [r3, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc90      	pop	{r4, r7}
 8000fec:	4770      	bx	lr
	...

08000ff0 <adcSetChannelSequence>:

void adcSetChannelSequence(AdcReg *adc, int *channels, int seqLen) {
 8000ff0:	b4b0      	push	{r4, r5, r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < seqLen; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e051      	b.n	80010a6 <adcSetChannelSequence+0xb6>
		adc->SQR[2 - (i / 6)] &= ~(0x1F << ((i % 6) * 5));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <adcSetChannelSequence+0xcc>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	17db      	asrs	r3, r3, #31
 800100c:	1a98      	subs	r0, r3, r2
 800100e:	1c83      	adds	r3, r0, #2
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	330a      	adds	r3, #10
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	685c      	ldr	r4, [r3, #4]
 800101a:	6979      	ldr	r1, [r7, #20]
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <adcSetChannelSequence+0xcc>)
 800101e:	fb83 3201 	smull	r3, r2, r3, r1
 8001022:	17cb      	asrs	r3, r1, #31
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	1aca      	subs	r2, r1, r3
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	221f      	movs	r2, #31
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	1c83      	adds	r3, r0, #2
 8001042:	4022      	ands	r2, r4
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	330a      	adds	r3, #10
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	605a      	str	r2, [r3, #4]
		adc->SQR[2 - (i / 6)] |= channels[i] << ((i % 6) * 5);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <adcSetChannelSequence+0xcc>)
 8001052:	fb82 1203 	smull	r1, r2, r2, r3
 8001056:	17db      	asrs	r3, r3, #31
 8001058:	1a98      	subs	r0, r3, r2
 800105a:	1c83      	adds	r3, r0, #2
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	330a      	adds	r3, #10
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	685c      	ldr	r4, [r3, #4]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	4413      	add	r3, r2
 800106e:	681d      	ldr	r5, [r3, #0]
 8001070:	6979      	ldr	r1, [r7, #20]
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <adcSetChannelSequence+0xcc>)
 8001074:	fb83 3201 	smull	r3, r2, r3, r1
 8001078:	17cb      	asrs	r3, r1, #31
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	1aca      	subs	r2, r1, r3
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	fa05 f303 	lsl.w	r3, r5, r3
 8001090:	461a      	mov	r2, r3
 8001092:	1c83      	adds	r3, r0, #2
 8001094:	4322      	orrs	r2, r4
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	330a      	adds	r3, #10
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	605a      	str	r2, [r3, #4]
	for(int i = 0; i < seqLen; i++) {
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dba9      	blt.n	8001002 <adcSetChannelSequence+0x12>
	}
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bcb0      	pop	{r4, r5, r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2aaaaaab 	.word	0x2aaaaaab

080010c0 <adcCommonConfigure>:

void adcCommonConfigure(AdcCommonConfig cfg) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	ADC_COMM->CCR &= cfg;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <adcCommonConfigure+0x2c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <adcCommonConfigure+0x2c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4013      	ands	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
	ADC_COMM->CCR |= cfg;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <adcCommonConfigure+0x2c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4904      	ldr	r1, [pc, #16]	; (80010ec <adcCommonConfigure+0x2c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40012300 	.word	0x40012300

080010f0 <adcConfigureRegularChannel>:

void adcConfigureRegularChannel(AdcReg *adc, AdcRegularChn cfg) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	adc->CR2 &= ~(0x7F << 24);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	609a      	str	r2, [r3, #8]
	adc->CR2 |= cfg;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	609a      	str	r2, [r3, #8]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <gpioConfigurePin>:
 *      Author: Pang
 */

#include "Gpio.h"

void gpioConfigurePin(GpioReg *port, int pin, GpioConfig configuration) {
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
	//configure GPIO mode
	port->MODER &= GPIO_MODE_MASK(pin);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	0052      	lsls	r2, r2, #1
 8001132:	2103      	movs	r1, #3
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	43d2      	mvns	r2, r2
 800113a:	401a      	ands	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	601a      	str	r2, [r3, #0]
	port->MODER |= (configuration & 0xF) << (2 * pin);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 010f 	and.w	r1, r3, #15
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	431a      	orrs	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	601a      	str	r2, [r3, #0]
	//configure GPIO AFRs when AF mode is selected
	if(pin <= PIN7) {
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2b07      	cmp	r3, #7
 800115c:	dc18      	bgt.n	8001190 <gpioConfigurePin+0x72>
		port->AFR[0] &= GPIO_AFR_MASK(pin);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	210f      	movs	r1, #15
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	43d2      	mvns	r2, r2
 800116e:	401a      	ands	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= ((configuration & 0xF0000) >> 16) << (4 * pin);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a1a      	ldr	r2, [r3, #32]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	0c1b      	lsrs	r3, r3, #16
 800117c:	f003 010f 	and.w	r1, r3, #15
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	431a      	orrs	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	621a      	str	r2, [r3, #32]
 800118e:	e018      	b.n	80011c2 <gpioConfigurePin+0xa4>
	}else {
		port->AFR[1] &= GPIO_AFR_MASK(pin);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	210f      	movs	r1, #15
 800119a:	fa01 f202 	lsl.w	r2, r1, r2
 800119e:	43d2      	mvns	r2, r2
 80011a0:	401a      	ands	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= ((configuration & 0xF0000) >> 16) << (4 * (pin - 8));
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	0c1b      	lsrs	r3, r3, #16
 80011ae:	f003 010f 	and.w	r1, r3, #15
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3b08      	subs	r3, #8
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	431a      	orrs	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	//configure GPIO output driver type
	port->OTYPER &= GPIO_DRVR_MASK(pin);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2101      	movs	r1, #1
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	43d2      	mvns	r2, r2
 80011d0:	401a      	ands	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	port->OTYPER |= ((configuration & 0xF0) >> 4) << pin;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 010f 	and.w	r1, r3, #15
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	431a      	orrs	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	605a      	str	r2, [r3, #4]
	//configure GPIO speed
	port->OSPEEDR &= GPIO_SPEED_MASK(pin);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	0052      	lsls	r2, r2, #1
 80011f6:	2103      	movs	r1, #3
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	43d2      	mvns	r2, r2
 80011fe:	401a      	ands	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	609a      	str	r2, [r3, #8]
	port->OSPEEDR |= ((configuration & 0xF00) >> 8) << (2 * pin);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	f003 010f 	and.w	r1, r3, #15
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	431a      	orrs	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	609a      	str	r2, [r3, #8]
	//configure GPIO pull type
	port->PUPDR &= GPIO_PULL_MASK(pin);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	0052      	lsls	r2, r2, #1
 8001226:	2103      	movs	r1, #3
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	43d2      	mvns	r2, r2
 800122e:	401a      	ands	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	60da      	str	r2, [r3, #12]
	port->PUPDR |= ((configuration & 0xF000) >> 12) << (2 * pin);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	0b1b      	lsrs	r3, r3, #12
 800123c:	f003 010f 	and.w	r1, r3, #15
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	431a      	orrs	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	60da      	str	r2, [r3, #12]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <gpioWritePin>:

void gpioWritePin(GpioReg *gpio, int pin, int state) {
 800125a:	b480      	push	{r7}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
	if(state)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d007      	beq.n	800127c <gpioWritePin+0x22>
		gpio->BSRR = 1 << pin;
 800126c:	2201      	movs	r2, #1
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	461a      	mov	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	619a      	str	r2, [r3, #24]
	else
		gpio->BSRR = 1 << (16 + pin);
}
 800127a:	e007      	b.n	800128c <gpioWritePin+0x32>
		gpio->BSRR = 1 << (16 + pin);
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3310      	adds	r3, #16
 8001280:	2201      	movs	r2, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	619a      	str	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_rccUnresetAndEnableDevice>:
 *      Author: Pang
 */

#include "Rcc.h"

void _rccUnresetAndEnableDevice(RccDevice rccDev, int reset) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	if(reset)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d016      	beq.n	80012d6 <_rccUnresetAndEnableDevice+0x3e>
		*((_IO_ uint32_t *)(RCC_BASE_ADDRESS + (rccDev >> 16))) |= (1 << (rccDev & 0xFFFF));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012b0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	0c1b      	lsrs	r3, r3, #16
 80012c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012ca:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80012ce:	4619      	mov	r1, r3
 80012d0:	ea42 0300 	orr.w	r3, r2, r0
 80012d4:	600b      	str	r3, [r1, #0]
	*((_IO_ uint32_t *)(RCC_BASE_ADDRESS + (rccDev >> 16))) &= ~(1 << (rccDev & 0xFFFF));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0c1b      	lsrs	r3, r3, #16
 80012da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012de:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	0c1b      	lsrs	r3, r3, #16
 80012f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012fa:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80012fe:	4619      	mov	r1, r3
 8001300:	ea02 0300 	and.w	r3, r2, r0
 8001304:	600b      	str	r3, [r1, #0]
	*((_IO_ uint32_t *)(RCC_BASE_ADDRESS + ((rccDev >> 16) + 0x20))) &= ~(1 << (rccDev & 0xFFFF));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0c1a      	lsrs	r2, r3, #16
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_rccUnresetAndEnableDevice+0xc8>)
 800130c:	4413      	add	r3, r2
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	b29b      	uxth	r3, r3
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0c19      	lsrs	r1, r3, #16
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <_rccUnresetAndEnableDevice+0xc8>)
 8001324:	440b      	add	r3, r1
 8001326:	4619      	mov	r1, r3
 8001328:	ea02 0300 	and.w	r3, r2, r0
 800132c:	600b      	str	r3, [r1, #0]
	*((_IO_ uint32_t *)(RCC_BASE_ADDRESS + ((rccDev >> 16) + 0x20))) |= (1 << (rccDev & 0xFFFF));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0c1a      	lsrs	r2, r3, #16
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <_rccUnresetAndEnableDevice+0xc8>)
 8001334:	4413      	add	r3, r2
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	b29b      	uxth	r3, r3
 800133c:	2101      	movs	r1, #1
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	4618      	mov	r0, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	0c19      	lsrs	r1, r3, #16
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <_rccUnresetAndEnableDevice+0xc8>)
 800134a:	440b      	add	r3, r1
 800134c:	4619      	mov	r1, r3
 800134e:	ea42 0300 	orr.w	r3, r2, r0
 8001352:	600b      	str	r3, [r1, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40023820 	.word	0x40023820

08001364 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db04      	blt.n	800137c <_isatty+0x18>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b02      	cmp	r3, #2
 8001376:	dc01      	bgt.n	800137c <_isatty+0x18>
    return 1;
 8001378:	2301      	movs	r3, #1
 800137a:	e005      	b.n	8001388 <_isatty+0x24>

  errno = EBADF;
 800137c:	f005 fc5e 	bl	8006c3c <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	2209      	movs	r2, #9
 8001384:	601a      	str	r2, [r3, #0]
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_write>:

int _write(int fd, char* ptr, int len) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	usartSendString(usart2, ptr, len);
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <_write+0x20>)
 80013a2:	f000 f93c 	bl	800161e <usartSendString>
	return len;
 80013a6:	687b      	ldr	r3, [r7, #4]
      return EIO;
  }
  errno = EBADF;
  return -1;
  */
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40004400 	.word	0x40004400

080013b4 <_close>:

int _close(int fd) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db04      	blt.n	80013cc <_close+0x18>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	dc01      	bgt.n	80013cc <_close+0x18>
    return 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e006      	b.n	80013da <_close+0x26>

  errno = EBADF;
 80013cc:	f005 fc36 	bl	8006c3c <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2209      	movs	r2, #9
 80013d4:	601a      	str	r2, [r3, #0]
  return -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80013ee:	f005 fc25 	bl	8006c3c <__errno>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2209      	movs	r2, #9
 80013f6:	601a      	str	r2, [r3, #0]
  return -1;
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_read>:

int _read(int fd, char* ptr, int len) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d110      	bne.n	8001438 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <_read+0x4c>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	2201      	movs	r2, #1
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	f001 ff39 	bl	8003298 <HAL_UART_Receive>
 8001426:	4603      	mov	r3, r0
 8001428:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <_read+0x30>
      return 1;
 8001430:	2301      	movs	r3, #1
 8001432:	e008      	b.n	8001446 <_read+0x42>
    else
      return EIO;
 8001434:	2305      	movs	r3, #5
 8001436:	e006      	b.n	8001446 <_read+0x42>
  }
  errno = EBADF;
 8001438:	f005 fc00 	bl	8006c3c <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	2209      	movs	r2, #9
 8001440:	601a      	str	r2, [r3, #0]
  return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20004be8 	.word	0x20004be8

08001454 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db08      	blt.n	8001476 <_fstat+0x22>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	dc05      	bgt.n	8001476 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001470:	605a      	str	r2, [r3, #4]
    return 0;
 8001472:	2300      	movs	r3, #0
 8001474:	e005      	b.n	8001482 <_fstat+0x2e>
  }

  errno = EBADF;
 8001476:	f005 fbe1 	bl	8006c3c <__errno>
 800147a:	4603      	mov	r3, r0
 800147c:	2209      	movs	r2, #9
 800147e:	601a      	str	r2, [r3, #0]
  return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <getUsartPeripheralBusFreq>:

#include "Usart.h"
#include "stm32f4xx_hal.h"
#include <math.h>

uint32_t getUsartPeripheralBusFreq(UsartReg *usart) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	if(usart == usart2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <getUsartPeripheralBusFreq+0x28>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d103      	bne.n	80014a4 <getUsartPeripheralBusFreq+0x18>
		return HAL_RCC_GetPCLK1Freq();
 800149c:	f001 fc22 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 80014a0:	4603      	mov	r3, r0
 80014a2:	e002      	b.n	80014aa <getUsartPeripheralBusFreq+0x1e>
	else
		return HAL_RCC_GetPCLK2Freq();
 80014a4:	f001 fc32 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004400 	.word	0x40004400

080014b8 <usartSetBaudRate>:

void usartSetBaudRate(UsartReg *usart, int baudrate) {
 80014b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
	uint32_t apbFreq = getUsartPeripheralBusFreq(usart);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ffe1 	bl	800148c <getUsartPeripheralBusFreq>
 80014ca:	6278      	str	r0, [r7, #36]	; 0x24
	int over8 = (usart->CR1 & 0x8000) >> 15;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0bdb      	lsrs	r3, r3, #15
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	623b      	str	r3, [r7, #32]
	float usart_div = apbFreq/(float)(8*(2-over8)*baudrate);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	f1c3 0302 	rsb	r3, r3, #2
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fc:	edc7 7a07 	vstr	s15, [r7, #28]
	double decimal, fractional;
	fractional = modf(usart_div, &decimal);
 8001500:	69f8      	ldr	r0, [r7, #28]
 8001502:	f7ff f829 	bl	8000558 <__aeabi_f2d>
 8001506:	4604      	mov	r4, r0
 8001508:	460d      	mov	r5, r1
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4618      	mov	r0, r3
 8001510:	ec45 4b10 	vmov	d0, r4, r5
 8001514:	f006 fa88 	bl	8007a28 <modf>
 8001518:	ed87 0b04 	vstr	d0, [r7, #16]
	usart->BRR = ((int)(decimal) << 4 | (int)(fractional*8*(2-over8)));
 800151c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb20 	bl	8000b68 <__aeabi_d2iz>
 8001528:	4603      	mov	r3, r0
 800152a:	011c      	lsls	r4, r3, #4
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <usartSetBaudRate+0xc4>)
 8001532:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001536:	f7ff f867 	bl	8000608 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4690      	mov	r8, r2
 8001540:	4699      	mov	r9, r3
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	f1c3 0302 	rsb	r3, r3, #2
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fff3 	bl	8000534 <__aeabi_i2d>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4640      	mov	r0, r8
 8001554:	4649      	mov	r1, r9
 8001556:	f7ff f857 	bl	8000608 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fb01 	bl	8000b68 <__aeabi_d2iz>
 8001566:	4603      	mov	r3, r0
 8001568:	4323      	orrs	r3, r4
 800156a:	461a      	mov	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]
}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800157a:	bf00      	nop
 800157c:	40200000 	.word	0x40200000

08001580 <usartConfigure>:

void usartConfigure(UsartReg *usart, UsartConfig configuration) {
 8001580:	b490      	push	{r4, r7}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	e9c7 2300 	strd	r2, r3, [r7]
	usart->CR1 |= configuration & 0xBFFF;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001596:	400b      	ands	r3, r1
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	60da      	str	r2, [r3, #12]
	usart->CR2 |= (configuration & 0x7F7F0000) >> 16;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	691c      	ldr	r4, [r3, #16]
 80015a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	0c02      	lsrs	r2, r0, #16
 80015b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80015b4:	0c0b      	lsrs	r3, r1, #16
 80015b6:	f647 737f 	movw	r3, #32639	; 0x7f7f
 80015ba:	4013      	ands	r3, r2
 80015bc:	ea44 0203 	orr.w	r2, r4, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	611a      	str	r2, [r3, #16]
	usart->CR3 |= (configuration & 0xFFF00000000) >> 32;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	695c      	ldr	r4, [r3, #20]
 80015c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	000a      	movs	r2, r1
 80015d6:	2300      	movs	r3, #0
 80015d8:	4613      	mov	r3, r2
 80015da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015de:	ea44 0203 	orr.w	r2, r4, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	615a      	str	r2, [r3, #20]
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc90      	pop	{r4, r7}
 80015ee:	4770      	bx	lr

080015f0 <usartSendChar>:

void usartSendChar(UsartReg *usart, uint8_t c) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]

	usart->DR = c;
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]
	while(!(usart->SR & USART_TXE));
 8001602:	bf00      	nop
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f9      	beq.n	8001604 <usartSendChar+0x14>
	//while(!(usart->SR & USART_TC));
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <usartSendString>:

int usartSendString(UsartReg *usart, char *str, int len) {
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e00a      	b.n	8001646 <usartSendString+0x28>
		usartSendChar(usart, str[i]);
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff ffd8 	bl	80015f0 <usartSendChar>
	for(int i = 0; i < len; i++)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	dbf0      	blt.n	8001630 <usartSendString+0x12>
	return len;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165c:	f000 fdfe 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001660:	f000 f87a 	bl	8001758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  gpioConfig();
 8001664:	f000 f8fc 	bl	8001860 <gpioConfig>
  usartConfig();
 8001668:	f000 f93e 	bl	80018e8 <usartConfig>
  adcConfig();
 800166c:	f000 f9a8 	bl	80019c0 <adcConfig>
  MX_GPIO_Init();
 8001670:	f000 f8dc 	bl	800182c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Create message buffers
  msgForSlave = xMessageBufferCreate(MAX_BUFFER_SIZE);
 8001674:	2201      	movs	r2, #1
 8001676:	2100      	movs	r1, #0
 8001678:	f44f 7000 	mov.w	r0, #512	; 0x200
 800167c:	f002 fe10 	bl	80042a0 <xStreamBufferGenericCreate>
 8001680:	4603      	mov	r3, r0
 8001682:	4a26      	ldr	r2, [pc, #152]	; (800171c <main+0xc4>)
 8001684:	6013      	str	r3, [r2, #0]
  msgForMaster = xMessageBufferCreate(MAX_BUFFER_SIZE);
 8001686:	2201      	movs	r2, #1
 8001688:	2100      	movs	r1, #0
 800168a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800168e:	f002 fe07 	bl	80042a0 <xStreamBufferGenericCreate>
 8001692:	4603      	mov	r3, r0
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <main+0xc8>)
 8001696:	6013      	str	r3, [r2, #0]
  msgForInterpreter = xMessageBufferCreate(MAX_BUFFER_SIZE);
 8001698:	2201      	movs	r2, #1
 800169a:	2100      	movs	r1, #0
 800169c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016a0:	f002 fdfe 	bl	80042a0 <xStreamBufferGenericCreate>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <main+0xcc>)
 80016a8:	6013      	str	r3, [r2, #0]
  msgFromMaster = xMessageBufferCreate(MAX_BUFFER_SIZE);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2100      	movs	r1, #0
 80016ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016b2:	f002 fdf5 	bl	80042a0 <xStreamBufferGenericCreate>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <main+0xd0>)
 80016ba:	6013      	str	r3, [r2, #0]
  msgFromInterpreter = xMessageBufferCreate(MAX_BUFFER_SIZE);
 80016bc:	2201      	movs	r2, #1
 80016be:	2100      	movs	r1, #0
 80016c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016c4:	f002 fdec 	bl	80042a0 <xStreamBufferGenericCreate>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a18      	ldr	r2, [pc, #96]	; (800172c <main+0xd4>)
 80016cc:	6013      	str	r3, [r2, #0]
  msgAdc = xMessageBufferCreate(MAX_BUFFER_SIZE);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2100      	movs	r1, #0
 80016d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016d6:	f002 fde3 	bl	80042a0 <xStreamBufferGenericCreate>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <main+0xd8>)
 80016de:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016e0:	f001 ff2e 	bl	8003540 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of slave */
  slaveHandle = osThreadNew(StartSlave, NULL, &slave_attributes);
 80016e4:	4a13      	ldr	r2, [pc, #76]	; (8001734 <main+0xdc>)
 80016e6:	2100      	movs	r1, #0
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <main+0xe0>)
 80016ea:	f001 ff73 	bl	80035d4 <osThreadNew>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <main+0xe4>)
 80016f2:	6013      	str	r3, [r2, #0]

  /* creation of master */
  masterHandle = osThreadNew(StartMaster, NULL, &master_attributes);
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <main+0xe8>)
 80016f6:	2100      	movs	r1, #0
 80016f8:	4812      	ldr	r0, [pc, #72]	; (8001744 <main+0xec>)
 80016fa:	f001 ff6b 	bl	80035d4 <osThreadNew>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a11      	ldr	r2, [pc, #68]	; (8001748 <main+0xf0>)
 8001702:	6013      	str	r3, [r2, #0]

  /* creation of commInterpreter */
  commInterpreterHandle = osThreadNew(StartInterpret, NULL, &commInterpreter_attributes);
 8001704:	4a11      	ldr	r2, [pc, #68]	; (800174c <main+0xf4>)
 8001706:	2100      	movs	r1, #0
 8001708:	4811      	ldr	r0, [pc, #68]	; (8001750 <main+0xf8>)
 800170a:	f001 ff63 	bl	80035d4 <osThreadNew>
 800170e:	4603      	mov	r3, r0
 8001710:	4a10      	ldr	r2, [pc, #64]	; (8001754 <main+0xfc>)
 8001712:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001714:	f001 ff38 	bl	8003588 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001718:	e7fe      	b.n	8001718 <main+0xc0>
 800171a:	bf00      	nop
 800171c:	20004efc 	.word	0x20004efc
 8001720:	20004f08 	.word	0x20004f08
 8001724:	20004df4 	.word	0x20004df4
 8001728:	20004f04 	.word	0x20004f04
 800172c:	20004ef8 	.word	0x20004ef8
 8001730:	20004bec 	.word	0x20004bec
 8001734:	08009d90 	.word	0x08009d90
 8001738:	08001bfd 	.word	0x08001bfd
 800173c:	20004f0c 	.word	0x20004f0c
 8001740:	08009db4 	.word	0x08009db4
 8001744:	08001d3d 	.word	0x08001d3d
 8001748:	20004cf0 	.word	0x20004cf0
 800174c:	08009dd8 	.word	0x08009dd8
 8001750:	08001e71 	.word	0x08001e71
 8001754:	20004f00 	.word	0x20004f00

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b094      	sub	sp, #80	; 0x50
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2230      	movs	r2, #48	; 0x30
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fb99 	bl	8006e9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <SystemClock_Config+0xcc>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a27      	ldr	r2, [pc, #156]	; (8001824 <SystemClock_Config+0xcc>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <SystemClock_Config+0xcc>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <SystemClock_Config+0xd0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a21      	ldr	r2, [pc, #132]	; (8001828 <SystemClock_Config+0xd0>)
 80017a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <SystemClock_Config+0xd0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b4:	2302      	movs	r3, #2
 80017b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017bc:	2310      	movs	r3, #16
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c0:	2302      	movs	r3, #2
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017c8:	2308      	movs	r3, #8
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017cc:	2364      	movs	r3, #100	; 0x64
 80017ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017d4:	2304      	movs	r3, #4
 80017d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 0320 	add.w	r3, r7, #32
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fe61 	bl	80024a4 <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017e8:	f000 fc1a 	bl	8002020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ec:	230f      	movs	r3, #15
 80017ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2103      	movs	r1, #3
 800180a:	4618      	mov	r0, r3
 800180c:	f001 f8c2 	bl	8002994 <HAL_RCC_ClockConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001816:	f000 fc03 	bl	8002020 <Error_Handler>
  }
}
 800181a:	bf00      	nop
 800181c:	3750      	adds	r7, #80	; 0x50
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000

0800182c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_GPIO_Init+0x30>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <MX_GPIO_Init+0x30>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_GPIO_Init+0x30>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <gpioConfig>:

/* USER CODE BEGIN 4 */
void gpioConfig() {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	rccUnresetAndEnableDevice(RCC_GPIOA);
 8001864:	2101      	movs	r1, #1
 8001866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800186a:	f7ff fd15 	bl	8001298 <_rccUnresetAndEnableDevice>
	rccUnresetAndEnableDevice(RCC_GPIOC);
 800186e:	2101      	movs	r1, #1
 8001870:	4816      	ldr	r0, [pc, #88]	; (80018cc <gpioConfig+0x6c>)
 8001872:	f7ff fd11 	bl	8001298 <_rccUnresetAndEnableDevice>

	//USART 2 --> Tx : PA2 ; Rx : PA3
	gpioConfigurePin(gpioA, PIN2, GPIO_ALT_FUNC | GPIO_HIGH_SPEED | AF_7 | GPIO_PUSH_PULL);
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <gpioConfig+0x70>)
 8001878:	2102      	movs	r1, #2
 800187a:	4816      	ldr	r0, [pc, #88]	; (80018d4 <gpioConfig+0x74>)
 800187c:	f7ff fc4f 	bl	800111e <gpioConfigurePin>
	gpioConfigurePin(gpioA, PIN3, GPIO_ALT_FUNC | AF_7);
 8001880:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <gpioConfig+0x78>)
 8001882:	2103      	movs	r1, #3
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <gpioConfig+0x74>)
 8001886:	f7ff fc4a 	bl	800111e <gpioConfigurePin>

	//USART 6 --> Tx : PC6 ; Rx : PC7
	gpioConfigurePin(gpioC, PIN6, GPIO_ALT_FUNC | GPIO_HIGH_SPEED | AF_8 | GPIO_PUSH_PULL);
 800188a:	4a14      	ldr	r2, [pc, #80]	; (80018dc <gpioConfig+0x7c>)
 800188c:	2106      	movs	r1, #6
 800188e:	4814      	ldr	r0, [pc, #80]	; (80018e0 <gpioConfig+0x80>)
 8001890:	f7ff fc45 	bl	800111e <gpioConfigurePin>
	gpioConfigurePin(gpioC, PIN7, GPIO_ALT_FUNC | AF_8);
 8001894:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <gpioConfig+0x84>)
 8001896:	2107      	movs	r1, #7
 8001898:	4811      	ldr	r0, [pc, #68]	; (80018e0 <gpioConfig+0x80>)
 800189a:	f7ff fc40 	bl	800111e <gpioConfigurePin>

	//USART 1 --> Tx : PA9 ; Rx : PA10
	gpioConfigurePin(gpioA, PIN9, GPIO_ALT_FUNC | GPIO_HIGH_SPEED | AF_7 | GPIO_PUSH_PULL);
 800189e:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <gpioConfig+0x70>)
 80018a0:	2109      	movs	r1, #9
 80018a2:	480c      	ldr	r0, [pc, #48]	; (80018d4 <gpioConfig+0x74>)
 80018a4:	f7ff fc3b 	bl	800111e <gpioConfigurePin>
	gpioConfigurePin(gpioA, PIN10, GPIO_ALT_FUNC | AF_7);
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <gpioConfig+0x78>)
 80018aa:	210a      	movs	r1, #10
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <gpioConfig+0x74>)
 80018ae:	f7ff fc36 	bl	800111e <gpioConfigurePin>

	//ADC Analog input AIN0 --> PA0
	gpioConfigurePin(gpioA, PIN0, GPIO_ANALOG_IN);
 80018b2:	2203      	movs	r2, #3
 80018b4:	2100      	movs	r1, #0
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <gpioConfig+0x74>)
 80018b8:	f7ff fc31 	bl	800111e <gpioConfigurePin>

	//LED Pin --> PC10
	gpioConfigurePin(gpioC, PIN10, GPIO_MED_SPEED | GPIO_PUSH_PULL | GPIO_OUTPUT);
 80018bc:	f240 1201 	movw	r2, #257	; 0x101
 80018c0:	210a      	movs	r1, #10
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <gpioConfig+0x80>)
 80018c4:	f7ff fc2b 	bl	800111e <gpioConfigurePin>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	00100002 	.word	0x00100002
 80018d0:	00070302 	.word	0x00070302
 80018d4:	40020000 	.word	0x40020000
 80018d8:	00070002 	.word	0x00070002
 80018dc:	00080302 	.word	0x00080302
 80018e0:	40020800 	.word	0x40020800
 80018e4:	00080002 	.word	0x00080002

080018e8 <usartConfig>:

void usartConfig() {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	rccUnresetAndEnableDevice(RCC_USART1);
 80018ec:	2101      	movs	r1, #1
 80018ee:	482d      	ldr	r0, [pc, #180]	; (80019a4 <usartConfig+0xbc>)
 80018f0:	f7ff fcd2 	bl	8001298 <_rccUnresetAndEnableDevice>
	rccUnresetAndEnableDevice(RCC_USART2);
 80018f4:	2101      	movs	r1, #1
 80018f6:	482c      	ldr	r0, [pc, #176]	; (80019a8 <usartConfig+0xc0>)
 80018f8:	f7ff fcce 	bl	8001298 <_rccUnresetAndEnableDevice>
	rccUnresetAndEnableDevice(RCC_USART6);
 80018fc:	2101      	movs	r1, #1
 80018fe:	482b      	ldr	r0, [pc, #172]	; (80019ac <usartConfig+0xc4>)
 8001900:	f7ff fcca 	bl	8001298 <_rccUnresetAndEnableDevice>

	nvicEnableIrq(USART1_IRQ);
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <usartConfig+0xc8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <usartConfig+0xc8>)
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	6053      	str	r3, [r2, #4]
	nvicSetIrqPriority(USART1_IRQ, 6);
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <usartConfig+0xc8>)
 8001912:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8001916:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <usartConfig+0xc8>)
 8001918:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800191c:	f8c2 3324 	str.w	r3, [r2, #804]	; 0x324
	nvicEnableIrq(USART2_IRQ);
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <usartConfig+0xc8>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <usartConfig+0xc8>)
 8001926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192a:	6053      	str	r3, [r2, #4]
	nvicSetIrqPriority(USART2_IRQ, 6);
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <usartConfig+0xc8>)
 800192e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <usartConfig+0xc8>)
 8001934:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8001938:	f8c2 3324 	str.w	r3, [r2, #804]	; 0x324
	nvicEnableIrq(USART6_IRQ);
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <usartConfig+0xc8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <usartConfig+0xc8>)
 8001942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001946:	6093      	str	r3, [r2, #8]
	nvicSetIrqPriority(USART6_IRQ, 6);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <usartConfig+0xc8>)
 800194a:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <usartConfig+0xc8>)
 8001950:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001954:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344

	usartSetBaudRate(usart1, 115200);
 8001958:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800195c:	4815      	ldr	r0, [pc, #84]	; (80019b4 <usartConfig+0xcc>)
 800195e:	f7ff fdab 	bl	80014b8 <usartSetBaudRate>
	usartConfigure(usart1, USART_TX_EN | USART_RX_EN | USART_9_DATA_BIT | USART_STOPB_1 | USART_ODD_PARITY | USART_RXNE_IE | USART_EN);
 8001962:	f243 622c 	movw	r2, #13868	; 0x362c
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <usartConfig+0xcc>)
 800196c:	f7ff fe08 	bl	8001580 <usartConfigure>
	usartSetBaudRate(usart2, 115200);
 8001970:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001974:	4810      	ldr	r0, [pc, #64]	; (80019b8 <usartConfig+0xd0>)
 8001976:	f7ff fd9f 	bl	80014b8 <usartSetBaudRate>
	usartConfigure(usart2, USART_TX_EN | USART_RX_EN | USART_9_DATA_BIT | USART_STOPB_1 | USART_ODD_PARITY | USART_RXNE_IE | USART_EN);
 800197a:	f243 622c 	movw	r2, #13868	; 0x362c
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <usartConfig+0xd0>)
 8001984:	f7ff fdfc 	bl	8001580 <usartConfigure>
	usartSetBaudRate(usart6, 115200);
 8001988:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800198c:	480b      	ldr	r0, [pc, #44]	; (80019bc <usartConfig+0xd4>)
 800198e:	f7ff fd93 	bl	80014b8 <usartSetBaudRate>
	usartConfigure(usart6, USART_TX_EN | USART_RX_EN | USART_9_DATA_BIT | USART_STOPB_1 | USART_ODD_PARITY | USART_RXNE_IE | USART_EN);
 8001992:	f243 622c 	movw	r2, #13868	; 0x362c
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <usartConfig+0xd4>)
 800199c:	f7ff fdf0 	bl	8001580 <usartConfigure>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	00240004 	.word	0x00240004
 80019a8:	00200011 	.word	0x00200011
 80019ac:	00240005 	.word	0x00240005
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40004400 	.word	0x40004400
 80019bc:	40011400 	.word	0x40011400

080019c0 <adcConfig>:

void adcConfig() {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
	int channels[1] = {0};
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
	rccUnresetAndEnableDevice(RCC_ADC1);
 80019ca:	2101      	movs	r1, #1
 80019cc:	4814      	ldr	r0, [pc, #80]	; (8001a20 <adcConfig+0x60>)
 80019ce:	f7ff fc63 	bl	8001298 <_rccUnresetAndEnableDevice>
	adcSetSampleTime(adc1, 0, SAMPLE_3_CYCLES);			//channel 0, sampling time of 3 cycles
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	4813      	ldr	r0, [pc, #76]	; (8001a24 <adcConfig+0x64>)
 80019d8:	f7ff fa6a 	bl	8000eb0 <adcSetSampleTime>
	adcCommonConfigure(ADC_PSC_2);						//ADC clock is half of PCLK2
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fb6f 	bl	80010c0 <adcCommonConfigure>
	adcSetChannelSequence(adc1, channels, 1);			//Scan one channel, channel 0
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2201      	movs	r2, #1
 80019e6:	4619      	mov	r1, r3
 80019e8:	480e      	ldr	r0, [pc, #56]	; (8001a24 <adcConfig+0x64>)
 80019ea:	f7ff fb01 	bl	8000ff0 <adcSetChannelSequence>
	nvicEnableIrq(ADC1_IRQ);							//Enable ADC interrupt
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <adcConfig+0x68>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <adcConfig+0x68>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
	nvicSetIrqPriority(ADC1_IRQ, 6);
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <adcConfig+0x68>)
 80019fc:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8001a00:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <adcConfig+0x68>)
 8001a02:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8001a06:	f8c2 3310 	str.w	r3, [r2, #784]	; 0x310
	configureADC(adc1, ADC_SINGLE_MODE | ADC_RIGHT_ALIGN | ADC_RESOLUTION_12 | ADC_EOC_INT_EN | ADC_EN);
 8001a0a:	f04f 0220 	mov.w	r2, #32
 8001a0e:	f04f 0301 	mov.w	r3, #1
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <adcConfig+0x64>)
 8001a14:	f7ff fab4 	bl	8000f80 <configureADC>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	00240008 	.word	0x00240008
 8001a24:	40012000 	.word	0x40012000
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <ADC_IRQHandler>:

void ADC_IRQHandler(void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
	int adcResult;
	if(adc1->SR & ADC_END_OF_CONVERSION) {
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <ADC_IRQHandler+0x3c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00f      	beq.n	8001a5e <ADC_IRQHandler+0x32>
		adc1->SR &= ~ADC_END_OF_CONVERSION;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <ADC_IRQHandler+0x3c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <ADC_IRQHandler+0x3c>)
 8001a44:	f023 0302 	bic.w	r3, r3, #2
 8001a48:	6013      	str	r3, [r2, #0]
		adcResult = adc1->DR;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <ADC_IRQHandler+0x3c>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	607b      	str	r3, [r7, #4]
		xMessageBufferSendFromISR(msgAdc, &adcResult, sizeof(int), &xHigherPriorityTaskWoken);
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <ADC_IRQHandler+0x40>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	1d39      	adds	r1, r7, #4
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <ADC_IRQHandler+0x44>)
 8001a58:	2204      	movs	r2, #4
 8001a5a:	f002 fd64 	bl	8004526 <xStreamBufferSendFromISR>
	}
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40012000 	.word	0x40012000
 8001a6c:	20004bec 	.word	0x20004bec
 8001a70:	200001fc 	.word	0x200001fc

08001a74 <USART6_IRQHandler>:

//master
void USART6_IRQHandler(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
	static int i = 0;
	uint8_t temp;
	if(usart6->SR & USART_RXNE) {
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <USART6_IRQHandler+0x5c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01f      	beq.n	8001ac6 <USART6_IRQHandler+0x52>
		temp = usart6->DR;
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <USART6_IRQHandler+0x5c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	71fb      	strb	r3, [r7, #7]
		slaveResponse[i++] = temp;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <USART6_IRQHandler+0x60>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	4910      	ldr	r1, [pc, #64]	; (8001ad4 <USART6_IRQHandler+0x60>)
 8001a94:	600a      	str	r2, [r1, #0]
 8001a96:	4910      	ldr	r1, [pc, #64]	; (8001ad8 <USART6_IRQHandler+0x64>)
 8001a98:	79fa      	ldrb	r2, [r7, #7]
 8001a9a:	54ca      	strb	r2, [r1, r3]
		usart6->SR &= ~USART_RXNE;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <USART6_IRQHandler+0x5c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <USART6_IRQHandler+0x5c>)
 8001aa2:	f023 0320 	bic.w	r3, r3, #32
 8001aa6:	6013      	str	r3, [r2, #0]
		if(i == COMMANDBYTES) {
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <USART6_IRQHandler+0x60>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d10a      	bne.n	8001ac6 <USART6_IRQHandler+0x52>
			i = 0;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <USART6_IRQHandler+0x60>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
			xMessageBufferSendFromISR(msgForMaster, slaveResponse, sizeof(slaveResponse), &xHigherPriorityTaskWoken);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <USART6_IRQHandler+0x68>)
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <USART6_IRQHandler+0x6c>)
 8001abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac0:	4905      	ldr	r1, [pc, #20]	; (8001ad8 <USART6_IRQHandler+0x64>)
 8001ac2:	f002 fd30 	bl	8004526 <xStreamBufferSendFromISR>
		}
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40011400 	.word	0x40011400
 8001ad4:	20000200 	.word	0x20000200
 8001ad8:	20004cf4 	.word	0x20004cf4
 8001adc:	20004f08 	.word	0x20004f08
 8001ae0:	200001fc 	.word	0x200001fc

08001ae4 <USART1_IRQHandler>:

//slave
void USART1_IRQHandler(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
	static int i = 0;
	uint8_t temp;
	if(usart1->SR & USART_RXNE) {
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <USART1_IRQHandler+0x5c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d01f      	beq.n	8001b36 <USART1_IRQHandler+0x52>
		temp = usart1->DR;
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <USART1_IRQHandler+0x5c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	71fb      	strb	r3, [r7, #7]
		masterCommand[i++] = temp;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <USART1_IRQHandler+0x60>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	4910      	ldr	r1, [pc, #64]	; (8001b44 <USART1_IRQHandler+0x60>)
 8001b04:	600a      	str	r2, [r1, #0]
 8001b06:	4910      	ldr	r1, [pc, #64]	; (8001b48 <USART1_IRQHandler+0x64>)
 8001b08:	79fa      	ldrb	r2, [r7, #7]
 8001b0a:	54ca      	strb	r2, [r1, r3]
		usart1->SR &= ~USART_RXNE;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <USART1_IRQHandler+0x5c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <USART1_IRQHandler+0x5c>)
 8001b12:	f023 0320 	bic.w	r3, r3, #32
 8001b16:	6013      	str	r3, [r2, #0]
		if(i == COMMANDBYTES) {
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <USART1_IRQHandler+0x60>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d10a      	bne.n	8001b36 <USART1_IRQHandler+0x52>
			i = 0;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <USART1_IRQHandler+0x60>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
			xMessageBufferSendFromISR(msgForSlave, masterCommand, sizeof(hostCommand), &xHigherPriorityTaskWoken);
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <USART1_IRQHandler+0x68>)
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <USART1_IRQHandler+0x6c>)
 8001b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b30:	4905      	ldr	r1, [pc, #20]	; (8001b48 <USART1_IRQHandler+0x64>)
 8001b32:	f002 fcf8 	bl	8004526 <xStreamBufferSendFromISR>
		}
	}
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40011000 	.word	0x40011000
 8001b44:	20000204 	.word	0x20000204
 8001b48:	20004bf0 	.word	0x20004bf0
 8001b4c:	20004efc 	.word	0x20004efc
 8001b50:	200001fc 	.word	0x200001fc

08001b54 <USART2_IRQHandler>:

//command interpreter
void USART2_IRQHandler(void) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
	static int i = 0;
	uint8_t temp;
	if(usart2->SR & USART_RXNE) {
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <USART2_IRQHandler+0x5c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d01f      	beq.n	8001ba6 <USART2_IRQHandler+0x52>
		temp = usart2->DR;
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <USART2_IRQHandler+0x5c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	71fb      	strb	r3, [r7, #7]
		usart2->SR &= ~USART_RXNE;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <USART2_IRQHandler+0x5c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <USART2_IRQHandler+0x5c>)
 8001b72:	f023 0320 	bic.w	r3, r3, #32
 8001b76:	6013      	str	r3, [r2, #0]
		if(temp != '\r')
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	2b0d      	cmp	r3, #13
 8001b7c:	d008      	beq.n	8001b90 <USART2_IRQHandler+0x3c>
			hostCommand[i++] = temp;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <USART2_IRQHandler+0x60>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	490b      	ldr	r1, [pc, #44]	; (8001bb4 <USART2_IRQHandler+0x60>)
 8001b86:	600a      	str	r2, [r1, #0]
 8001b88:	490b      	ldr	r1, [pc, #44]	; (8001bb8 <USART2_IRQHandler+0x64>)
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	54ca      	strb	r2, [r1, r3]
		else {
			i = 0;
			xMessageBufferSendFromISR(msgForInterpreter, hostCommand, sizeof(hostCommand), &xHigherPriorityTaskWoken);
		}
	}
}
 8001b8e:	e00a      	b.n	8001ba6 <USART2_IRQHandler+0x52>
			i = 0;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <USART2_IRQHandler+0x60>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
			xMessageBufferSendFromISR(msgForInterpreter, hostCommand, sizeof(hostCommand), &xHigherPriorityTaskWoken);
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <USART2_IRQHandler+0x68>)
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <USART2_IRQHandler+0x6c>)
 8001b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba0:	4905      	ldr	r1, [pc, #20]	; (8001bb8 <USART2_IRQHandler+0x64>)
 8001ba2:	f002 fcc0 	bl	8004526 <xStreamBufferSendFromISR>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40004400 	.word	0x40004400
 8001bb4:	20000208 	.word	0x20000208
 8001bb8:	20004df8 	.word	0x20004df8
 8001bbc:	20004df4 	.word	0x20004df4
 8001bc0:	200001fc 	.word	0x200001fc

08001bc4 <clearBuffer>:

void clearBuffer(char *buffer, size_t size) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < size; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e007      	b.n	8001be4 <clearBuffer+0x20>
		buffer[i] = '\0';
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3301      	adds	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8f3      	bhi.n	8001bd4 <clearBuffer+0x10>
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <StartSlave>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSlave */
void StartSlave(void *argument)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	6018      	str	r0, [r3, #0]
   * 'S' = Start ADC Conversion
   * 'R' = ADC result ready to be read (for master)
   * 'L' = LED operation ('1' to turn on LED, '0' to turn off)
   * 'A' = Acknowledge (to notify master that slave has finished the requested LED operation)
   */
  char buffer[256] = {'\0'};
 8001c08:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	3304      	adds	r3, #4
 8001c12:	22fc      	movs	r2, #252	; 0xfc
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f005 f941 	bl	8006e9e <memset>
  char data[256] = {'\0'};
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	3304      	adds	r3, #4
 8001c26:	22fc      	movs	r2, #252	; 0xfc
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 f937 	bl	8006e9e <memset>
  int command, dataLen, adcResult;
  /* Infinite loop */
  for(;;)
  {
	  xMessageBufferReceive(msgForSlave, buffer, sizeof(buffer), portMAX_DELAY);
 8001c30:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <StartSlave+0x120>)
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c40:	f002 fd1f 	bl	8004682 <xStreamBufferReceive>
	  command = buffer[0];
 8001c44:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	  dataLen = buffer[1];
 8001c4e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	  for(int i = 0; i < dataLen; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001c5e:	e011      	b.n	8001c84 <StartSlave+0x88>
		  data[i] = buffer[i + 2];
 8001c60:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c64:	3302      	adds	r3, #2
 8001c66:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001c6a:	5cd1      	ldrb	r1, [r2, r3]
 8001c6c:	f107 020c 	add.w	r2, r7, #12
 8001c70:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c74:	4413      	add	r3, r2
 8001c76:	460a      	mov	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < dataLen; i++)
 8001c7a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001c84:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001c88:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbe7      	blt.n	8001c60 <StartSlave+0x64>
	  clearBuffer(masterCommand, sizeof(masterCommand));	//clear global buffer after finish fetching the command
 8001c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c94:	4822      	ldr	r0, [pc, #136]	; (8001d20 <StartSlave+0x124>)
 8001c96:	f7ff ff95 	bl	8001bc4 <clearBuffer>
	  if(command == 'S') {									//'S' = 0x53 indicating master request to start ADC conversion
 8001c9a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c9e:	2b53      	cmp	r3, #83	; 0x53
 8001ca0:	d11a      	bne.n	8001cd8 <StartSlave+0xdc>
		  adcConfigureRegularChannel(adc1, ADC_REG_CHN_START);
 8001ca2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ca6:	481f      	ldr	r0, [pc, #124]	; (8001d24 <StartSlave+0x128>)
 8001ca8:	f7ff fa22 	bl	80010f0 <adcConfigureRegularChannel>
		  xMessageBufferReceive(msgAdc, &adcResult, sizeof(int), portMAX_DELAY);
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <StartSlave+0x12c>)
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	f107 0108 	add.w	r1, r7, #8
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb8:	2204      	movs	r2, #4
 8001cba:	f002 fce2 	bl	8004682 <xStreamBufferReceive>
		  sprintf(buffer, "R%c%c", adcResult >> 8, adcResult & 0xFF);
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	121a      	asrs	r2, r3, #8
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8001cd2:	4916      	ldr	r1, [pc, #88]	; (8001d2c <StartSlave+0x130>)
 8001cd4:	f005 ff02 	bl	8007adc <siprintf>
	  }
	  if(command == 'L') {
 8001cd8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001cdc:	2b4c      	cmp	r3, #76	; 0x4c
 8001cde:	d115      	bne.n	8001d0c <StartSlave+0x110>
		  if(data[0] == '1')
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b31      	cmp	r3, #49	; 0x31
 8001ce8:	d105      	bne.n	8001cf6 <StartSlave+0xfa>
			  gpioWritePin(gpioC, PIN10, 1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	210a      	movs	r1, #10
 8001cee:	4810      	ldr	r0, [pc, #64]	; (8001d30 <StartSlave+0x134>)
 8001cf0:	f7ff fab3 	bl	800125a <gpioWritePin>
 8001cf4:	e004      	b.n	8001d00 <StartSlave+0x104>
		  else
			  gpioWritePin(gpioC, PIN10, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	210a      	movs	r1, #10
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <StartSlave+0x134>)
 8001cfc:	f7ff faad 	bl	800125a <gpioWritePin>
		  sprintf(buffer, "A");
 8001d00:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001d04:	490b      	ldr	r1, [pc, #44]	; (8001d34 <StartSlave+0x138>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fee8 	bl	8007adc <siprintf>
	  }
	  usartSendString(usart1, buffer, COMMANDBYTES);
 8001d0c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001d10:	2203      	movs	r2, #3
 8001d12:	4619      	mov	r1, r3
 8001d14:	4808      	ldr	r0, [pc, #32]	; (8001d38 <StartSlave+0x13c>)
 8001d16:	f7ff fc82 	bl	800161e <usartSendString>
	  xMessageBufferReceive(msgForSlave, buffer, sizeof(buffer), portMAX_DELAY);
 8001d1a:	e789      	b.n	8001c30 <StartSlave+0x34>
 8001d1c:	20004efc 	.word	0x20004efc
 8001d20:	20004bf0 	.word	0x20004bf0
 8001d24:	40012000 	.word	0x40012000
 8001d28:	20004bec 	.word	0x20004bec
 8001d2c:	08009ce0 	.word	0x08009ce0
 8001d30:	40020800 	.word	0x40020800
 8001d34:	08009ce8 	.word	0x08009ce8
 8001d38:	40011000 	.word	0x40011000

08001d3c <StartMaster>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMaster */
void StartMaster(void *argument)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartMaster */
  int buffer;
  int j = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  char result[256] = {'\0'};
 8001d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	3304      	adds	r3, #4
 8001d58:	22fc      	movs	r2, #252	; 0xfc
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f005 f89e 	bl	8006e9e <memset>
  char bufferInString[256] = {'\0'};
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	22fc      	movs	r2, #252	; 0xfc
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f005 f894 	bl	8006e9e <memset>
  int resultInBinary = 0;
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  xMessageBufferReceive(msgFromInterpreter, &buffer, sizeof(int), portMAX_DELAY);
 8001d7e:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <StartMaster+0x120>)
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	f002 fc79 	bl	8004682 <xStreamBufferReceive>
	  for(int i = COMMANDBYTES - 1; i >= 0; i--)
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001d96:	e014      	b.n	8001dc2 <StartMaster+0x86>
		  bufferInString[j++] = (((buffer >> (i * 8)) & 0xFF));		//convert to string to send through usart
 8001d98:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001d9c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	fa42 f103 	asr.w	r1, r2, r3
 8001da6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001db0:	b2c9      	uxtb	r1, r1
 8001db2:	f107 0210 	add.w	r2, r7, #16
 8001db6:	54d1      	strb	r1, [r2, r3]
	  for(int i = COMMANDBYTES - 1; i >= 0; i--)
 8001db8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001dc2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	dae6      	bge.n	8001d98 <StartMaster+0x5c>
	  j = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	  usartSendString(usart6, bufferInString, COMMANDBYTES);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4821      	ldr	r0, [pc, #132]	; (8001e60 <StartMaster+0x124>)
 8001dda:	f7ff fc20 	bl	800161e <usartSendString>
	  clearBuffer((char *)bufferInString, sizeof(bufferInString));
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff feec 	bl	8001bc4 <clearBuffer>
	  xMessageBufferReceive(msgForMaster, result, sizeof(result), portMAX_DELAY);
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <StartMaster+0x128>)
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dfc:	f002 fc41 	bl	8004682 <xStreamBufferReceive>
	  resultInBinary = 0;
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < COMMANDBYTES; i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001e0e:	e012      	b.n	8001e36 <StartMaster+0xfa>
		  resultInBinary = (resultInBinary << 8) | result[i];		//convert to binary to send through message buffer
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001e1c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001e20:	440a      	add	r2, r1
 8001e22:	7812      	ldrb	r2, [r2, #0]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < COMMANDBYTES; i++)
 8001e2c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001e30:	3301      	adds	r3, #1
 8001e32:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001e36:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	dde8      	ble.n	8001e10 <StartMaster+0xd4>
	  clearBuffer((char *)slaveResponse, sizeof(slaveResponse));
 8001e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e42:	4809      	ldr	r0, [pc, #36]	; (8001e68 <StartMaster+0x12c>)
 8001e44:	f7ff febe 	bl	8001bc4 <clearBuffer>
	  xMessageBufferSend(msgFromMaster, &resultInBinary, sizeof(int), 0);
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <StartMaster+0x130>)
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	f107 010c 	add.w	r1, r7, #12
 8001e50:	2300      	movs	r3, #0
 8001e52:	2204      	movs	r2, #4
 8001e54:	f002 fab2 	bl	80043bc <xStreamBufferSend>
	  xMessageBufferReceive(msgFromInterpreter, &buffer, sizeof(int), portMAX_DELAY);
 8001e58:	e791      	b.n	8001d7e <StartMaster+0x42>
 8001e5a:	bf00      	nop
 8001e5c:	20004ef8 	.word	0x20004ef8
 8001e60:	40011400 	.word	0x40011400
 8001e64:	20004f08 	.word	0x20004f08
 8001e68:	20004cf4 	.word	0x20004cf4
 8001e6c:	20004f04 	.word	0x20004f04

08001e70 <StartInterpret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInterpret */
void StartInterpret(void *argument)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0ca      	sub	sp, #296	; 0x128
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartInterpret */
  //Command : 0xAABBcccccc.... (AA is the command, BB is no of bytes of data, cc... is the data)
  char buffer[256] = {'\0'};
 8001e7a:	f107 0318 	add.w	r3, r7, #24
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	3304      	adds	r3, #4
 8001e84:	22fc      	movs	r2, #252	; 0xfc
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 f808 	bl	8006e9e <memset>
  int led_on = 0x4C0131;
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <StartInterpret+0x158>)
 8001e94:	601a      	str	r2, [r3, #0]
  int led_off = 0x4C0130;
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <StartInterpret+0x15c>)
 8001e9c:	601a      	str	r2, [r3, #0]
  int adc_start = 0x530000;
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	f44f 02a6 	mov.w	r2, #5439488	; 0x530000
 8001ea6:	601a      	str	r2, [r3, #0]
  int result, adc_result, response;
  double voltage;
  /* Infinite loop */
  for(;;)
  {
	  xMessageBufferReceive(msgForInterpreter, buffer, sizeof(buffer), portMAX_DELAY);
 8001ea8:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <StartInterpret+0x160>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	f107 0118 	add.w	r1, r7, #24
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb8:	f002 fbe3 	bl	8004682 <xStreamBufferReceive>
	  if(!strcasecmp(buffer, "TURN ON LED"))
 8001ebc:	f107 0318 	add.w	r3, r7, #24
 8001ec0:	4944      	ldr	r1, [pc, #272]	; (8001fd4 <StartInterpret+0x164>)
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f005 fe6e 	bl	8007ba4 <strcasecmp>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d108      	bne.n	8001ee0 <StartInterpret+0x70>
		  xMessageBufferSend(msgFromInterpreter, &led_on, sizeof(int), 0);
 8001ece:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <StartInterpret+0x168>)
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	f107 0114 	add.w	r1, r7, #20
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2204      	movs	r2, #4
 8001eda:	f002 fa6f 	bl	80043bc <xStreamBufferSend>
 8001ede:	e02c      	b.n	8001f3a <StartInterpret+0xca>
	  else if(!strcasecmp(buffer, "TURN OFF LED"))
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	493d      	ldr	r1, [pc, #244]	; (8001fdc <StartInterpret+0x16c>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f005 fe5c 	bl	8007ba4 <strcasecmp>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <StartInterpret+0x94>
		  xMessageBufferSend(msgFromInterpreter, &led_off, sizeof(int), 0);
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <StartInterpret+0x168>)
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	f107 0110 	add.w	r1, r7, #16
 8001efa:	2300      	movs	r3, #0
 8001efc:	2204      	movs	r2, #4
 8001efe:	f002 fa5d 	bl	80043bc <xStreamBufferSend>
 8001f02:	e01a      	b.n	8001f3a <StartInterpret+0xca>
	  else if(!strcasecmp(buffer, "START ADC CONVERSION"))
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4935      	ldr	r1, [pc, #212]	; (8001fe0 <StartInterpret+0x170>)
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 fe4a 	bl	8007ba4 <strcasecmp>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d108      	bne.n	8001f28 <StartInterpret+0xb8>
		  xMessageBufferSend(msgFromInterpreter, &adc_start, sizeof(int), 0);
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <StartInterpret+0x168>)
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	f107 010c 	add.w	r1, r7, #12
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2204      	movs	r2, #4
 8001f22:	f002 fa4b 	bl	80043bc <xStreamBufferSend>
 8001f26:	e008      	b.n	8001f3a <StartInterpret+0xca>
	  else {
		  printf("Invalid instruction!\r\n");
 8001f28:	482e      	ldr	r0, [pc, #184]	; (8001fe4 <StartInterpret+0x174>)
 8001f2a:	f005 fd0b 	bl	8007944 <puts>
		  clearBuffer((char *)hostCommand, sizeof(hostCommand));
 8001f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f32:	482d      	ldr	r0, [pc, #180]	; (8001fe8 <StartInterpret+0x178>)
 8001f34:	f7ff fe46 	bl	8001bc4 <clearBuffer>
		  continue;
 8001f38:	e041      	b.n	8001fbe <StartInterpret+0x14e>
	  }
	  clearBuffer((char *)hostCommand, sizeof(hostCommand));
 8001f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f3e:	482a      	ldr	r0, [pc, #168]	; (8001fe8 <StartInterpret+0x178>)
 8001f40:	f7ff fe40 	bl	8001bc4 <clearBuffer>
	  xMessageBufferReceive(msgFromMaster, &result, sizeof(int), portMAX_DELAY);
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <StartInterpret+0x17c>)
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	f107 0108 	add.w	r1, r7, #8
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f50:	2204      	movs	r2, #4
 8001f52:	f002 fb96 	bl	8004682 <xStreamBufferReceive>
	  response = result >> ((COMMANDBYTES - 1) * 8);
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	141b      	asrs	r3, r3, #16
 8001f5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  if(response == 0x41)
 8001f62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f66:	2b41      	cmp	r3, #65	; 0x41
 8001f68:	d102      	bne.n	8001f70 <StartInterpret+0x100>
		  printf("LED operation succeeded!\r\n");
 8001f6a:	4821      	ldr	r0, [pc, #132]	; (8001ff0 <StartInterpret+0x180>)
 8001f6c:	f005 fcea 	bl	8007944 <puts>
	  if(response == 0x52) {
 8001f70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f74:	2b52      	cmp	r3, #82	; 0x52
 8001f76:	d197      	bne.n	8001ea8 <StartInterpret+0x38>
		  adc_result = result & 0xFFFF;
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		  voltage = (adc_result / 4096.0000) * VREFPLUS;
 8001f84:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001f88:	f7fe fad4 	bl	8000534 <__aeabi_i2d>
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <StartInterpret+0x184>)
 8001f92:	f7fe fc63 	bl	800085c <__aeabi_ddiv>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	a308      	add	r3, pc, #32	; (adr r3, 8001fc0 <StartInterpret+0x150>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fb30 	bl	8000608 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	  	  printf("ADC Value: %d, voltage: %.4lfV\r\n", adc_result, voltage);
 8001fb0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001fb4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001fb8:	480f      	ldr	r0, [pc, #60]	; (8001ff8 <StartInterpret+0x188>)
 8001fba:	f005 fc3d 	bl	8007838 <iprintf>
	  xMessageBufferReceive(msgForInterpreter, buffer, sizeof(buffer), portMAX_DELAY);
 8001fbe:	e773      	b.n	8001ea8 <StartInterpret+0x38>
 8001fc0:	66666666 	.word	0x66666666
 8001fc4:	400a6666 	.word	0x400a6666
 8001fc8:	004c0131 	.word	0x004c0131
 8001fcc:	004c0130 	.word	0x004c0130
 8001fd0:	20004df4 	.word	0x20004df4
 8001fd4:	08009cec 	.word	0x08009cec
 8001fd8:	20004ef8 	.word	0x20004ef8
 8001fdc:	08009cf8 	.word	0x08009cf8
 8001fe0:	08009d08 	.word	0x08009d08
 8001fe4:	08009d20 	.word	0x08009d20
 8001fe8:	20004df8 	.word	0x20004df8
 8001fec:	20004f04 	.word	0x20004f04
 8001ff0:	08009d38 	.word	0x08009d38
 8001ff4:	40b00000 	.word	0x40b00000
 8001ff8:	08009d54 	.word	0x08009d54

08001ffc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800200e:	f000 f947 	bl	80022a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40014000 	.word	0x40014000

08002020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002024:	b672      	cpsid	i
}
 8002026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002028:	e7fe      	b.n	8002028 <Error_Handler+0x8>
	...

0800202c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_MspInit+0x54>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_MspInit+0x54>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_MspInit+0x54>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_MspInit+0x54>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_MspInit+0x54>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_MspInit+0x54>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	210f      	movs	r1, #15
 800206e:	f06f 0001 	mvn.w	r0, #1
 8002072:	f000 f9ed 	bl	8002450 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	; 0x30
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8002094:	2200      	movs	r2, #0
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	2018      	movs	r0, #24
 800209a:	f000 f9d9 	bl	8002450 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800209e:	2018      	movs	r0, #24
 80020a0:	f000 f9f2 	bl	8002488 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_InitTick+0xa4>)
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_InitTick+0xa4>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b2:	6453      	str	r3, [r2, #68]	; 0x44
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_InitTick+0xa4>)
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c0:	f107 0210 	add.w	r2, r7, #16
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fe32 	bl	8002d34 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80020d0:	f000 fe1c 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 80020d4:	4603      	mov	r3, r0
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_InitTick+0xa8>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9b      	lsrs	r3, r3, #18
 80020e4:	3b01      	subs	r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_InitTick+0xac>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <HAL_InitTick+0xb0>)
 80020ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_InitTick+0xac>)
 80020f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020f4:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_InitTick+0xac>)
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_InitTick+0xac>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_InitTick+0xac>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8002108:	4809      	ldr	r0, [pc, #36]	; (8002130 <HAL_InitTick+0xac>)
 800210a:	f000 fe45 	bl	8002d98 <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d104      	bne.n	800211e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8002114:	4806      	ldr	r0, [pc, #24]	; (8002130 <HAL_InitTick+0xac>)
 8002116:	f000 fe99 	bl	8002e4c <HAL_TIM_Base_Start_IT>
 800211a:	4603      	mov	r3, r0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3730      	adds	r7, #48	; 0x30
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	431bde83 	.word	0x431bde83
 8002130:	20004f10 	.word	0x20004f10
 8002134:	40014000 	.word	0x40014000

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800216a:	f000 fed1 	bl	8002f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20004f10 	.word	0x20004f10

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f004 fd48 	bl	8006c3c <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <_sbrk+0x64>)
 80021c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20020000 	.word	0x20020000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	2000020c 	.word	0x2000020c
 80021e0:	20004fb0 	.word	0x20004fb0

080021e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <SystemInit+0x20>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <SystemInit+0x20>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800220e:	490e      	ldr	r1, [pc, #56]	; (8002248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002210:	4a0e      	ldr	r2, [pc, #56]	; (800224c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002222:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002224:	4c0b      	ldr	r4, [pc, #44]	; (8002254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002232:	f7ff ffd7 	bl	80021e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002236:	f004 fdfd 	bl	8006e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7ff fa0d 	bl	8001658 <main>
  bx  lr    
 800223e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800224c:	0800a20c 	.word	0x0800a20c
  ldr r2, =_sbss
 8002250:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002254:	20004fac 	.word	0x20004fac

08002258 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <DMA1_Stream0_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <HAL_Init+0x40>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <HAL_Init+0x40>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_Init+0x40>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f8d8 	bl	800243a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228a:	200f      	movs	r0, #15
 800228c:	f7ff fefa 	bl	8002084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002290:	f7ff fecc 	bl	800202c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x20>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x24>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_IncTick+0x24>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000008 	.word	0x20000008
 80022c4:	20004f58 	.word	0x20004f58

080022c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_GetTick+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20004f58 	.word	0x20004f58

080022e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0b      	blt.n	800236e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <__NVIC_EnableIRQ+0x38>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2001      	movs	r0, #1
 8002366:	fa00 f202 	lsl.w	r2, r0, r2
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000e100 	.word	0xe000e100

08002380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0a      	blt.n	80023aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <__NVIC_SetPriority+0x4c>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a8:	e00a      	b.n	80023c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <__NVIC_SetPriority+0x50>)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	440b      	add	r3, r1
 80023be:	761a      	strb	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
         );
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff4c 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002462:	f7ff ff61 	bl	8002328 <__NVIC_GetPriorityGrouping>
 8002466:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	6978      	ldr	r0, [r7, #20]
 800246e:	f7ff ffb1 	bl	80023d4 <NVIC_EncodePriority>
 8002472:	4602      	mov	r2, r0
 8002474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff80 	bl	8002380 <__NVIC_SetPriority>
}
 8002480:	bf00      	nop
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff54 	bl	8002344 <__NVIC_EnableIRQ>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e264      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d075      	beq.n	80025ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c2:	4ba3      	ldr	r3, [pc, #652]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d00c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4ba0      	ldr	r3, [pc, #640]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d112      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024da:	4b9d      	ldr	r3, [pc, #628]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e6:	d10b      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	4b99      	ldr	r3, [pc, #612]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05b      	beq.n	80025ac <HAL_RCC_OscConfig+0x108>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d157      	bne.n	80025ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e23f      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d106      	bne.n	8002518 <HAL_RCC_OscConfig+0x74>
 800250a:	4b91      	ldr	r3, [pc, #580]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a90      	ldr	r2, [pc, #576]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x98>
 8002522:	4b8b      	ldr	r3, [pc, #556]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a8a      	ldr	r2, [pc, #552]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a87      	ldr	r2, [pc, #540]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 800253c:	4b84      	ldr	r3, [pc, #528]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a83      	ldr	r2, [pc, #524]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a80      	ldr	r2, [pc, #512]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff feb4 	bl	80022c8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff feb0 	bl	80022c8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e204      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b76      	ldr	r3, [pc, #472]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xc0>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fea0 	bl	80022c8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff fe9c 	bl	80022c8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1f0      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b6c      	ldr	r3, [pc, #432]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0xe8>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b62      	ldr	r3, [pc, #392]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b5c      	ldr	r3, [pc, #368]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1c4      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4952      	ldr	r1, [pc, #328]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e03a      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b4f      	ldr	r3, [pc, #316]	; (8002754 <HAL_RCC_OscConfig+0x2b0>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7ff fe55 	bl	80022c8 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002622:	f7ff fe51 	bl	80022c8 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e1a5      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	4b46      	ldr	r3, [pc, #280]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4940      	ldr	r1, [pc, #256]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_RCC_OscConfig+0x2b0>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7ff fe34 	bl	80022c8 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002664:	f7ff fe30 	bl	80022c8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e184      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d030      	beq.n	80026f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002696:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCC_OscConfig+0x2b4>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7ff fe14 	bl	80022c8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a4:	f7ff fe10 	bl	80022c8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e164      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x200>
 80026c2:	e015      	b.n	80026f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_RCC_OscConfig+0x2b4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fdfd 	bl	80022c8 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d2:	f7ff fdf9 	bl	80022c8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e14d      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80a0 	beq.w	800283e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_OscConfig+0x2b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d121      	bne.n	800277e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCC_OscConfig+0x2b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_RCC_OscConfig+0x2b8>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7ff fdbf 	bl	80022c8 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e011      	b.n	8002772 <HAL_RCC_OscConfig+0x2ce>
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	42470000 	.word	0x42470000
 8002758:	42470e80 	.word	0x42470e80
 800275c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f7ff fdb2 	bl	80022c8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e106      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	4b85      	ldr	r3, [pc, #532]	; (8002988 <HAL_RCC_OscConfig+0x4e4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x2f0>
 8002786:	4b81      	ldr	r3, [pc, #516]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	4a80      	ldr	r2, [pc, #512]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
 8002792:	e01c      	b.n	80027ce <HAL_RCC_OscConfig+0x32a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b05      	cmp	r3, #5
 800279a:	d10c      	bne.n	80027b6 <HAL_RCC_OscConfig+0x312>
 800279c:	4b7b      	ldr	r3, [pc, #492]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a7a      	ldr	r2, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80027a2:	f043 0304 	orr.w	r3, r3, #4
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
 80027a8:	4b78      	ldr	r3, [pc, #480]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a77      	ldr	r2, [pc, #476]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	e00b      	b.n	80027ce <HAL_RCC_OscConfig+0x32a>
 80027b6:	4b75      	ldr	r3, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a74      	ldr	r2, [pc, #464]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70
 80027c2:	4b72      	ldr	r3, [pc, #456]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	4a71      	ldr	r2, [pc, #452]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d015      	beq.n	8002802 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7ff fd77 	bl	80022c8 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7ff fd73 	bl	80022c8 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0c5      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ee      	beq.n	80027de <HAL_RCC_OscConfig+0x33a>
 8002800:	e014      	b.n	800282c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7ff fd61 	bl	80022c8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7ff fd5d 	bl	80022c8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	; 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0af      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002820:	4b5a      	ldr	r3, [pc, #360]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ee      	bne.n	800280a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4b56      	ldr	r3, [pc, #344]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a55      	ldr	r2, [pc, #340]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 809b 	beq.w	800297e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b08      	cmp	r3, #8
 8002852:	d05c      	beq.n	800290e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d141      	bne.n	80028e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285c:	4b4c      	ldr	r3, [pc, #304]	; (8002990 <HAL_RCC_OscConfig+0x4ec>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7ff fd31 	bl	80022c8 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7ff fd2d 	bl	80022c8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e081      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287c:	4b43      	ldr	r3, [pc, #268]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	019b      	lsls	r3, r3, #6
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	3b01      	subs	r3, #1
 80028a2:	041b      	lsls	r3, r3, #16
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	061b      	lsls	r3, r3, #24
 80028ac:	4937      	ldr	r1, [pc, #220]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCC_OscConfig+0x4ec>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7ff fd06 	bl	80022c8 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7ff fd02 	bl	80022c8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e056      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x41c>
 80028de:	e04e      	b.n	800297e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e0:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_OscConfig+0x4ec>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7ff fcef 	bl	80022c8 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff fceb 	bl	80022c8 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e03f      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x44a>
 800290c:	e037      	b.n	800297e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e032      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_RCC_OscConfig+0x4e8>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d028      	beq.n	800297a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d121      	bne.n	800297a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d11a      	bne.n	800297a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002950:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002952:	4293      	cmp	r3, r2
 8002954:	d111      	bne.n	800297a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	3b01      	subs	r3, #1
 8002964:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d107      	bne.n	800297a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40007000 	.word	0x40007000
 800298c:	40023800 	.word	0x40023800
 8002990:	42470060 	.word	0x42470060

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0cc      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d90c      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d119      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e067      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4934      	ldr	r1, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a84:	f7ff fc20 	bl	80022c8 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7ff fc1c 	bl	80022c8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e04f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d20c      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	490a      	ldr	r1, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff faa2 	bl	8002084 <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	08009dfc 	.word	0x08009dfc
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b5b0      	push	{r4, r5, r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b66:	2100      	movs	r1, #0
 8002b68:	6079      	str	r1, [r7, #4]
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	60f9      	str	r1, [r7, #12]
 8002b6e:	2100      	movs	r1, #0
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b72:	2100      	movs	r1, #0
 8002b74:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b76:	4952      	ldr	r1, [pc, #328]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b78:	6889      	ldr	r1, [r1, #8]
 8002b7a:	f001 010c 	and.w	r1, r1, #12
 8002b7e:	2908      	cmp	r1, #8
 8002b80:	d00d      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x3e>
 8002b82:	2908      	cmp	r1, #8
 8002b84:	f200 8094 	bhi.w	8002cb0 <HAL_RCC_GetSysClockFreq+0x150>
 8002b88:	2900      	cmp	r1, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x32>
 8002b8c:	2904      	cmp	r1, #4
 8002b8e:	d003      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x38>
 8002b90:	e08e      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b92:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b94:	60bb      	str	r3, [r7, #8]
       break;
 8002b96:	e08e      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b98:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b9a:	60bb      	str	r3, [r7, #8]
      break;
 8002b9c:	e08b      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b9e:	4948      	ldr	r1, [pc, #288]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ba0:	6849      	ldr	r1, [r1, #4]
 8002ba2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002ba6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba8:	4945      	ldr	r1, [pc, #276]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002baa:	6849      	ldr	r1, [r1, #4]
 8002bac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002bb0:	2900      	cmp	r1, #0
 8002bb2:	d024      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb4:	4942      	ldr	r1, [pc, #264]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb6:	6849      	ldr	r1, [r1, #4]
 8002bb8:	0989      	lsrs	r1, r1, #6
 8002bba:	4608      	mov	r0, r1
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002bc4:	f04f 0500 	mov.w	r5, #0
 8002bc8:	ea00 0204 	and.w	r2, r0, r4
 8002bcc:	ea01 0305 	and.w	r3, r1, r5
 8002bd0:	493d      	ldr	r1, [pc, #244]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002bd2:	fb01 f003 	mul.w	r0, r1, r3
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	fb01 f102 	mul.w	r1, r1, r2
 8002bdc:	1844      	adds	r4, r0, r1
 8002bde:	493a      	ldr	r1, [pc, #232]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002be0:	fba2 0101 	umull	r0, r1, r2, r1
 8002be4:	1863      	adds	r3, r4, r1
 8002be6:	4619      	mov	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	f7fd ffe2 	bl	8000bb8 <__aeabi_uldivmod>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e04a      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfe:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	461a      	mov	r2, r3
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	ea02 0400 	and.w	r4, r2, r0
 8002c16:	ea03 0501 	and.w	r5, r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	014b      	lsls	r3, r1, #5
 8002c28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c2c:	0142      	lsls	r2, r0, #5
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	1b00      	subs	r0, r0, r4
 8002c34:	eb61 0105 	sbc.w	r1, r1, r5
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	018b      	lsls	r3, r1, #6
 8002c42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c46:	0182      	lsls	r2, r0, #6
 8002c48:	1a12      	subs	r2, r2, r0
 8002c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	00d9      	lsls	r1, r3, #3
 8002c58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c5c:	00d0      	lsls	r0, r2, #3
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	1912      	adds	r2, r2, r4
 8002c64:	eb45 0303 	adc.w	r3, r5, r3
 8002c68:	f04f 0000 	mov.w	r0, #0
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	0299      	lsls	r1, r3, #10
 8002c72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c76:	0290      	lsls	r0, r2, #10
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	f7fd ff96 	bl	8000bb8 <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4613      	mov	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c94:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	60bb      	str	r3, [r7, #8]
      break;
 8002cae:	e002      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002cb2:	60bb      	str	r3, [r7, #8]
      break;
 8002cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	00f42400 	.word	0x00f42400
 8002cc8:	017d7840 	.word	0x017d7840

08002ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000000 	.word	0x20000000

08002ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce8:	f7ff fff0 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0a9b      	lsrs	r3, r3, #10
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	4903      	ldr	r1, [pc, #12]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08009e0c 	.word	0x08009e0c

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d10:	f7ff ffdc 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0b5b      	lsrs	r3, r3, #13
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4903      	ldr	r1, [pc, #12]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	08009e0c 	.word	0x08009e0c

08002d34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	220f      	movs	r2, #15
 8002d42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_RCC_GetClockConfig+0x5c>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0203 	and.w	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_RCC_GetClockConfig+0x5c>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCC_GetClockConfig+0x5c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_GetClockConfig+0x5c>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	08db      	lsrs	r3, r3, #3
 8002d6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_RCC_GetClockConfig+0x60>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0207 	and.w	r2, r3, #7
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	601a      	str	r2, [r3, #0]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40023c00 	.word	0x40023c00

08002d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e041      	b.n	8002e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f839 	bl	8002e36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f000 f9ca 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d001      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e044      	b.n	8002eee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1e      	ldr	r2, [pc, #120]	; (8002efc <HAL_TIM_Base_Start_IT+0xb0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d018      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d013      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00e      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <HAL_TIM_Base_Start_IT+0xbc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <HAL_TIM_Base_Start_IT+0xc0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d111      	bne.n	8002edc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d010      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eda:	e007      	b.n	8002eec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	40014000 	.word	0x40014000

08002f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0202 	mvn.w	r2, #2
 8002f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8ee 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8e0 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f8f1 	bl	8003148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0204 	mvn.w	r2, #4
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8c4 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8b6 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f8c7 	bl	8003148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d122      	bne.n	8003014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0208 	mvn.w	r2, #8
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f89a 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f88c 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f89d 	bl	8003148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b10      	cmp	r3, #16
 8003020:	d122      	bne.n	8003068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b10      	cmp	r3, #16
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0210 	mvn.w	r2, #16
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2208      	movs	r2, #8
 800303e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f870 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f862 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f873 	bl	8003148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d10e      	bne.n	8003094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0201 	mvn.w	r2, #1
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe ffb4 	bl	8001ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8e2 	bl	8003284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d107      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f838 	bl	800315c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b20      	cmp	r3, #32
 8003106:	d107      	bne.n	8003118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0220 	mvn.w	r2, #32
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8ac 	bl	8003270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a34      	ldr	r2, [pc, #208]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00f      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d00b      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a31      	ldr	r2, [pc, #196]	; (8003258 <TIM_Base_SetConfig+0xe8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d007      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a30      	ldr	r2, [pc, #192]	; (800325c <TIM_Base_SetConfig+0xec>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <TIM_Base_SetConfig+0xf0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d108      	bne.n	80031ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a25      	ldr	r2, [pc, #148]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01b      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d017      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <TIM_Base_SetConfig+0xe8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a21      	ldr	r2, [pc, #132]	; (800325c <TIM_Base_SetConfig+0xec>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a20      	ldr	r2, [pc, #128]	; (8003260 <TIM_Base_SetConfig+0xf0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <TIM_Base_SetConfig+0xf4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a1e      	ldr	r2, [pc, #120]	; (8003268 <TIM_Base_SetConfig+0xf8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <TIM_Base_SetConfig+0xfc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a08      	ldr	r2, [pc, #32]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d103      	bne.n	8003240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	615a      	str	r2, [r3, #20]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800

08003270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	; 0x28
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	f040 808c 	bne.w	80033d2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_UART_Receive+0x2e>
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e084      	b.n	80033d4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_UART_Receive+0x40>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e07d      	b.n	80033d4 <HAL_UART_Receive+0x13c>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2222      	movs	r2, #34	; 0x22
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032f4:	f7fe ffe8 	bl	80022c8 <HAL_GetTick>
 80032f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	88fa      	ldrh	r2, [r7, #6]
 80032fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330e:	d108      	bne.n	8003322 <HAL_UART_Receive+0x8a>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	e003      	b.n	800332a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003332:	e043      	b.n	80033bc <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2200      	movs	r2, #0
 800333c:	2120      	movs	r1, #32
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f84c 	bl	80033dc <UART_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e042      	b.n	80033d4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10c      	bne.n	800336e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003360:	b29a      	uxth	r2, r3
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	3302      	adds	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e01f      	b.n	80033ae <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d007      	beq.n	8003388 <HAL_UART_Receive+0xf0>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_UART_Receive+0xfe>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e008      	b.n	80033a8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	3301      	adds	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1b6      	bne.n	8003334 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3720      	adds	r7, #32
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b090      	sub	sp, #64	; 0x40
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ec:	e050      	b.n	8003490 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d04c      	beq.n	8003490 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <UART_WaitOnFlagUntilTimeout+0x30>
 80033fc:	f7fe ff64 	bl	80022c8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003408:	429a      	cmp	r2, r3
 800340a:	d241      	bcs.n	8003490 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	e853 3f00 	ldrex	r3, [r3]
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800342c:	637a      	str	r2, [r7, #52]	; 0x34
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003434:	e841 2300 	strex	r3, r2, [r1]
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e5      	bne.n	800340c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3314      	adds	r3, #20
 8003446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	613b      	str	r3, [r7, #16]
   return(result);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	63bb      	str	r3, [r7, #56]	; 0x38
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003460:	623a      	str	r2, [r7, #32]
 8003462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	69f9      	ldr	r1, [r7, #28]
 8003466:	6a3a      	ldr	r2, [r7, #32]
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	61bb      	str	r3, [r7, #24]
   return(result);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e5      	bne.n	8003440 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e00f      	b.n	80034b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d09f      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3740      	adds	r7, #64	; 0x40
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <__NVIC_SetPriority>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SysTick_Handler+0x1c>)
 8003512:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003514:	f002 f906 	bl	8005724 <xTaskGetSchedulerState>
 8003518:	4603      	mov	r3, r0
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800351e:	f003 f913 	bl	8006748 <xPortSysTickHandler>
  }
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003530:	2100      	movs	r1, #0
 8003532:	f06f 0004 	mvn.w	r0, #4
 8003536:	f7ff ffbf 	bl	80034b8 <__NVIC_SetPriority>
#endif
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003546:	f3ef 8305 	mrs	r3, IPSR
 800354a:	603b      	str	r3, [r7, #0]
  return(result);
 800354c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003552:	f06f 0305 	mvn.w	r3, #5
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	e00c      	b.n	8003574 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <osKernelInitialize+0x44>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d105      	bne.n	800356e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <osKernelInitialize+0x44>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003568:	2300      	movs	r3, #0
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	e002      	b.n	8003574 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003574:	687b      	ldr	r3, [r7, #4]
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000210 	.word	0x20000210

08003588 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800358e:	f3ef 8305 	mrs	r3, IPSR
 8003592:	603b      	str	r3, [r7, #0]
  return(result);
 8003594:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800359a:	f06f 0305 	mvn.w	r3, #5
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	e010      	b.n	80035c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <osKernelStart+0x48>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d109      	bne.n	80035be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80035aa:	f7ff ffbf 	bl	800352c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <osKernelStart+0x48>)
 80035b0:	2202      	movs	r2, #2
 80035b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80035b4:	f001 fc24 	bl	8004e00 <vTaskStartScheduler>
      stat = osOK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	e002      	b.n	80035c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035c4:	687b      	ldr	r3, [r7, #4]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000210 	.word	0x20000210

080035d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08e      	sub	sp, #56	; 0x38
 80035d8:	af04      	add	r7, sp, #16
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035e4:	f3ef 8305 	mrs	r3, IPSR
 80035e8:	617b      	str	r3, [r7, #20]
  return(result);
 80035ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d17e      	bne.n	80036ee <osThreadNew+0x11a>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d07b      	beq.n	80036ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80035fa:	2318      	movs	r3, #24
 80035fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d045      	beq.n	800369a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <osThreadNew+0x48>
        name = attr->name;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <osThreadNew+0x6e>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b38      	cmp	r3, #56	; 0x38
 8003634:	d805      	bhi.n	8003642 <osThreadNew+0x6e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <osThreadNew+0x72>
        return (NULL);
 8003642:	2300      	movs	r3, #0
 8003644:	e054      	b.n	80036f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <osThreadNew+0xa8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2bbb      	cmp	r3, #187	; 0xbb
 8003664:	d90a      	bls.n	800367c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800366a:	2b00      	cmp	r3, #0
 800366c:	d006      	beq.n	800367c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <osThreadNew+0xa8>
        mem = 1;
 8003676:	2301      	movs	r3, #1
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	e010      	b.n	800369e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10c      	bne.n	800369e <osThreadNew+0xca>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d108      	bne.n	800369e <osThreadNew+0xca>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <osThreadNew+0xca>
          mem = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	e001      	b.n	800369e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d110      	bne.n	80036c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036ac:	9202      	str	r2, [sp, #8]
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6a3a      	ldr	r2, [r7, #32]
 80036b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f001 f9e7 	bl	8004a8e <xTaskCreateStatic>
 80036c0:	4603      	mov	r3, r0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	e013      	b.n	80036ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d110      	bne.n	80036ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	f107 0310 	add.w	r3, r7, #16
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f001 fa32 	bl	8004b48 <xTaskCreate>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <osThreadNew+0x11a>
            hTask = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036ee:	693b      	ldr	r3, [r7, #16]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3728      	adds	r7, #40	; 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a07      	ldr	r2, [pc, #28]	; (8003724 <vApplicationGetIdleTaskMemory+0x2c>)
 8003708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4a06      	ldr	r2, [pc, #24]	; (8003728 <vApplicationGetIdleTaskMemory+0x30>)
 800370e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000214 	.word	0x20000214
 8003728:	200002d0 	.word	0x200002d0

0800372c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a07      	ldr	r2, [pc, #28]	; (8003758 <vApplicationGetTimerTaskMemory+0x2c>)
 800373c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4a06      	ldr	r2, [pc, #24]	; (800375c <vApplicationGetTimerTaskMemory+0x30>)
 8003742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	200004d0 	.word	0x200004d0
 800375c:	2000058c 	.word	0x2000058c

08003760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f103 0208 	add.w	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f103 0208 	add.w	r2, r3, #8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f103 0208 	add.w	r2, r3, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d103      	bne.n	8003822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e00c      	b.n	800383c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3308      	adds	r3, #8
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e002      	b.n	8003830 <vListInsert+0x2e>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d2f6      	bcs.n	800382a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6852      	ldr	r2, [r2, #4]
 8003894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	429a      	cmp	r2, r3
 800389e:	d103      	bne.n	80038a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	1e5a      	subs	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038f2:	f002 fe97 	bl	8006624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	441a      	add	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	3b01      	subs	r3, #1
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	22ff      	movs	r2, #255	; 0xff
 800393e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d114      	bne.n	8003972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01a      	beq.n	8003986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3310      	adds	r3, #16
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fced 	bl	8005334 <xTaskRemoveFromEventList>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d012      	beq.n	8003986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <xQueueGenericReset+0xcc>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	e009      	b.n	8003986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3310      	adds	r3, #16
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fef2 	bl	8003760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3324      	adds	r3, #36	; 0x24
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff feed 	bl	8003760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003986:	f002 fe7d 	bl	8006684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08e      	sub	sp, #56	; 0x38
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <xQueueGenericCreateStatic+0x52>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <xQueueGenericCreateStatic+0x56>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueGenericCreateStatic+0x58>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <xQueueGenericCreateStatic+0x7e>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <xQueueGenericCreateStatic+0x82>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericCreateStatic+0x84>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	61fb      	str	r3, [r7, #28]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a36:	2350      	movs	r3, #80	; 0x50
 8003a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b50      	cmp	r3, #80	; 0x50
 8003a3e:	d00a      	beq.n	8003a56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	61bb      	str	r3, [r7, #24]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	4613      	mov	r3, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f805 	bl	8003a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3730      	adds	r7, #48	; 0x30
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	69b8      	ldr	r0, [r7, #24]
 8003aba:	f7ff ff05 	bl	80038c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08e      	sub	sp, #56	; 0x38
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <xQueueGenericSend+0x32>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003afe:	bf00      	nop
 8003b00:	e7fe      	b.n	8003b00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <xQueueGenericSend+0x40>
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <xQueueGenericSend+0x44>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <xQueueGenericSend+0x46>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <xQueueGenericSend+0x60>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d103      	bne.n	8003b3e <xQueueGenericSend+0x6e>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <xQueueGenericSend+0x72>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericSend+0x74>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xQueueGenericSend+0x8e>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	623b      	str	r3, [r7, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b5e:	f001 fde1 	bl	8005724 <xTaskGetSchedulerState>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <xQueueGenericSend+0x9e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <xQueueGenericSend+0xa2>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <xQueueGenericSend+0xa4>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <xQueueGenericSend+0xbe>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	61fb      	str	r3, [r7, #28]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b8e:	f002 fd49 	bl	8006624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <xQueueGenericSend+0xd4>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d129      	bne.n	8003bf8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003baa:	f000 fa0b 	bl	8003fc4 <prvCopyDataToQueue>
 8003bae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d010      	beq.n	8003bda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	3324      	adds	r3, #36	; 0x24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 fbb9 	bl	8005334 <xTaskRemoveFromEventList>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bc8:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <xQueueGenericSend+0x1f8>)
 8003bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	e00a      	b.n	8003bf0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003be0:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <xQueueGenericSend+0x1f8>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bf0:	f002 fd48 	bl	8006684 <vPortExitCritical>
				return pdPASS;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e063      	b.n	8003cc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bfe:	f002 fd41 	bl	8006684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e05c      	b.n	8003cc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 fc19 	bl	8005448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c16:	2301      	movs	r3, #1
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c1a:	f002 fd33 	bl	8006684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c1e:	f001 f95f 	bl	8004ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c22:	f002 fcff 	bl	8006624 <vPortEnterCritical>
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d103      	bne.n	8003c3c <xQueueGenericSend+0x16c>
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c42:	b25b      	sxtb	r3, r3
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d103      	bne.n	8003c52 <xQueueGenericSend+0x182>
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c52:	f002 fd17 	bl	8006684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c56:	1d3a      	adds	r2, r7, #4
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 fc08 	bl	8005474 <xTaskCheckForTimeOut>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d124      	bne.n	8003cb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c6c:	f000 faa2 	bl	80041b4 <prvIsQueueFull>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d018      	beq.n	8003ca8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	3310      	adds	r3, #16
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 fb08 	bl	8005294 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c86:	f000 fa2d 	bl	80040e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c8a:	f001 f937 	bl	8004efc <xTaskResumeAll>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f af7c 	bne.w	8003b8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <xQueueGenericSend+0x1f8>)
 8003c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	e772      	b.n	8003b8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003caa:	f000 fa1b 	bl	80040e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cae:	f001 f925 	bl	8004efc <xTaskResumeAll>
 8003cb2:	e76c      	b.n	8003b8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cb6:	f000 fa15 	bl	80040e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cba:	f001 f91f 	bl	8004efc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3738      	adds	r7, #56	; 0x38
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b090      	sub	sp, #64	; 0x40
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <xQueueGenericSendFromISR+0x3c>
 8003d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <xQueueGenericSendFromISR+0x40>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <xQueueGenericSendFromISR+0x42>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d24:	bf00      	nop
 8003d26:	e7fe      	b.n	8003d26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d103      	bne.n	8003d36 <xQueueGenericSendFromISR+0x6a>
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <xQueueGenericSendFromISR+0x6e>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <xQueueGenericSendFromISR+0x70>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	623b      	str	r3, [r7, #32]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d56:	f002 fd47 	bl	80067e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	61fa      	str	r2, [r7, #28]
 8003d70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <xQueueGenericSendFromISR+0xbc>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d12f      	bne.n	8003de8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d9e:	f000 f911 	bl	8003fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003da2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d112      	bne.n	8003dd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d016      	beq.n	8003de2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	3324      	adds	r3, #36	; 0x24
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 fabb 	bl	8005334 <xTaskRemoveFromEventList>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e007      	b.n	8003de2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	b25a      	sxtb	r2, r3
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003de2:	2301      	movs	r3, #1
 8003de4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003de6:	e001      	b.n	8003dec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003df6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3740      	adds	r7, #64	; 0x40
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <xQueueReceive+0x30>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	623b      	str	r3, [r7, #32]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <xQueueReceive+0x3e>
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <xQueueReceive+0x42>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <xQueueReceive+0x44>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <xQueueReceive+0x5e>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	61fb      	str	r3, [r7, #28]
}
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e62:	f001 fc5f 	bl	8005724 <xTaskGetSchedulerState>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <xQueueReceive+0x6e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <xQueueReceive+0x72>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <xQueueReceive+0x74>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <xQueueReceive+0x8e>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	61bb      	str	r3, [r7, #24]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e92:	f002 fbc7 	bl	8006624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01f      	beq.n	8003ee2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea6:	f000 f8f7 	bl	8004098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00f      	beq.n	8003eda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	3310      	adds	r3, #16
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 fa38 	bl	8005334 <xTaskRemoveFromEventList>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <xQueueReceive+0x1bc>)
 8003ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eda:	f002 fbd3 	bl	8006684 <vPortExitCritical>
				return pdPASS;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e069      	b.n	8003fb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ee8:	f002 fbcc 	bl	8006684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e062      	b.n	8003fb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ef6:	f107 0310 	add.w	r3, r7, #16
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 faa4 	bl	8005448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f04:	f002 fbbe 	bl	8006684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f08:	f000 ffea 	bl	8004ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f0c:	f002 fb8a 	bl	8006624 <vPortEnterCritical>
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f16:	b25b      	sxtb	r3, r3
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d103      	bne.n	8003f26 <xQueueReceive+0x122>
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d103      	bne.n	8003f3c <xQueueReceive+0x138>
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f3c:	f002 fba2 	bl	8006684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f40:	1d3a      	adds	r2, r7, #4
 8003f42:	f107 0310 	add.w	r3, r7, #16
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 fa93 	bl	8005474 <xTaskCheckForTimeOut>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d123      	bne.n	8003f9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f56:	f000 f917 	bl	8004188 <prvIsQueueEmpty>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	3324      	adds	r3, #36	; 0x24
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 f993 	bl	8005294 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f70:	f000 f8b8 	bl	80040e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f74:	f000 ffc2 	bl	8004efc <xTaskResumeAll>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d189      	bne.n	8003e92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <xQueueReceive+0x1bc>)
 8003f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	e780      	b.n	8003e92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f92:	f000 f8a7 	bl	80040e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f96:	f000 ffb1 	bl	8004efc <xTaskResumeAll>
 8003f9a:	e77a      	b.n	8003e92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f9e:	f000 f8a1 	bl	80040e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fa2:	f000 ffab 	bl	8004efc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa8:	f000 f8ee 	bl	8004188 <prvIsQueueEmpty>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f43f af6f 	beq.w	8003e92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3730      	adds	r7, #48	; 0x30
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10d      	bne.n	8003ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d14d      	bne.n	8004086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 fbb6 	bl	8005760 <xTaskPriorityDisinherit>
 8003ff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	e043      	b.n	8004086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d119      	bne.n	8004038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6858      	ldr	r0, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	461a      	mov	r2, r3
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	f002 ff37 	bl	8006e82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	441a      	add	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	429a      	cmp	r2, r3
 800402c:	d32b      	bcc.n	8004086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e026      	b.n	8004086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68d8      	ldr	r0, [r3, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	461a      	mov	r2, r3
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	f002 ff1d 	bl	8006e82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	425b      	negs	r3, r3
 8004052:	441a      	add	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d207      	bcs.n	8004074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	425b      	negs	r3, r3
 800406e:	441a      	add	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d105      	bne.n	8004086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	3b01      	subs	r3, #1
 8004084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800408e:	697b      	ldr	r3, [r7, #20]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d303      	bcc.n	80040cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68d9      	ldr	r1, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	461a      	mov	r2, r3
 80040d6:	6838      	ldr	r0, [r7, #0]
 80040d8:	f002 fed3 	bl	8006e82 <memcpy>
	}
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040ec:	f002 fa9a 	bl	8006624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040f8:	e011      	b.n	800411e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3324      	adds	r3, #36	; 0x24
 8004106:	4618      	mov	r0, r3
 8004108:	f001 f914 	bl	8005334 <xTaskRemoveFromEventList>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004112:	f001 fa11 	bl	8005538 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	3b01      	subs	r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800411e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	dce9      	bgt.n	80040fa <prvUnlockQueue+0x16>
 8004126:	e000      	b.n	800412a <prvUnlockQueue+0x46>
					break;
 8004128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	22ff      	movs	r2, #255	; 0xff
 800412e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004132:	f002 faa7 	bl	8006684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004136:	f002 fa75 	bl	8006624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004142:	e011      	b.n	8004168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d012      	beq.n	8004172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3310      	adds	r3, #16
 8004150:	4618      	mov	r0, r3
 8004152:	f001 f8ef 	bl	8005334 <xTaskRemoveFromEventList>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800415c:	f001 f9ec 	bl	8005538 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004160:	7bbb      	ldrb	r3, [r7, #14]
 8004162:	3b01      	subs	r3, #1
 8004164:	b2db      	uxtb	r3, r3
 8004166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800416c:	2b00      	cmp	r3, #0
 800416e:	dce9      	bgt.n	8004144 <prvUnlockQueue+0x60>
 8004170:	e000      	b.n	8004174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	22ff      	movs	r2, #255	; 0xff
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800417c:	f002 fa82 	bl	8006684 <vPortExitCritical>
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004190:	f002 fa48 	bl	8006624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e001      	b.n	80041a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041a6:	f002 fa6d 	bl	8006684 <vPortExitCritical>

	return xReturn;
 80041aa:	68fb      	ldr	r3, [r7, #12]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041bc:	f002 fa32 	bl	8006624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d102      	bne.n	80041d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e001      	b.n	80041d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041d6:	f002 fa55 	bl	8006684 <vPortExitCritical>

	return xReturn;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e014      	b.n	800421e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041f4:	4a0f      	ldr	r2, [pc, #60]	; (8004234 <vQueueAddToRegistry+0x50>)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004200:	490c      	ldr	r1, [pc, #48]	; (8004234 <vQueueAddToRegistry+0x50>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <vQueueAddToRegistry+0x50>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004216:	e006      	b.n	8004226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b07      	cmp	r3, #7
 8004222:	d9e7      	bls.n	80041f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20004f5c 	.word	0x20004f5c

08004238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004248:	f002 f9ec 	bl	8006624 <vPortEnterCritical>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004252:	b25b      	sxtb	r3, r3
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d103      	bne.n	8004262 <vQueueWaitForMessageRestricted+0x2a>
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004268:	b25b      	sxtb	r3, r3
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d103      	bne.n	8004278 <vQueueWaitForMessageRestricted+0x40>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004278:	f002 fa04 	bl	8006684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3324      	adds	r3, #36	; 0x24
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f825 	bl	80052dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004292:	6978      	ldr	r0, [r7, #20]
 8004294:	f7ff ff26 	bl	80040e4 <prvUnlockQueue>
	}
 8004298:	bf00      	nop
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	; 0x30
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d110      	bne.n	80042d4 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d81b      	bhi.n	80042f6 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	61fb      	str	r3, [r7, #28]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	61bb      	str	r3, [r7, #24]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d90a      	bls.n	8004314 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	617b      	str	r3, [r7, #20]
}
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800431a:	2301      	movs	r3, #1
 800431c:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3301      	adds	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3324      	adds	r3, #36	; 0x24
 8004328:	4618      	mov	r0, r3
 800432a:	f002 fa9d 	bl	8006868 <pvPortMalloc>
 800432e:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800433c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	6a38      	ldr	r0, [r7, #32]
 8004348:	f000 fb6e 	bl	8004a28 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800434c:	6a3b      	ldr	r3, [r7, #32]
	}
 800434e:	4618      	mov	r0, r3
 8004350:	3728      	adds	r7, #40	; 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8004356:	b480      	push	{r7}
 8004358:	b087      	sub	sp, #28
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	60fb      	str	r3, [r7, #12]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4413      	add	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3b01      	subs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d304      	bcc.n	80043ae <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80043ae:	697b      	ldr	r3, [r7, #20]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b090      	sub	sp, #64	; 0x40
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <xStreamBufferSend+0x36>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <xStreamBufferSend+0x52>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	623b      	str	r3, [r7, #32]
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	7f1b      	ldrb	r3, [r3, #28]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d011      	beq.n	800443e <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	3304      	adds	r3, #4
 800441e:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8004420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	429a      	cmp	r2, r3
 8004426:	d80a      	bhi.n	800443e <xStreamBufferSend+0x82>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	61fb      	str	r3, [r7, #28]
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03e      	beq.n	80044c2 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8004444:	f107 0310 	add.w	r3, r7, #16
 8004448:	4618      	mov	r0, r3
 800444a:	f000 ffd7 	bl	80053fc <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800444e:	f002 f8e9 	bl	8006624 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004454:	f7ff ff7f 	bl	8004356 <xStreamBufferSpacesAvailable>
 8004458:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800445a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	429a      	cmp	r2, r3
 8004460:	d217      	bcs.n	8004492 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8004462:	2000      	movs	r0, #0
 8004464:	f001 fbec 	bl	8005c40 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <xStreamBufferSend+0xca>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	61bb      	str	r3, [r7, #24]
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8004486:	f001 f93d 	bl	8005704 <xTaskGetCurrentTaskHandle>
 800448a:	4602      	mov	r2, r0
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	615a      	str	r2, [r3, #20]
 8004490:	e002      	b.n	8004498 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8004492:	f002 f8f7 	bl	8006684 <vPortExitCritical>
					break;
 8004496:	e014      	b.n	80044c2 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8004498:	f002 f8f4 	bl	8006684 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	2100      	movs	r1, #0
 80044a2:	2000      	movs	r0, #0
 80044a4:	f001 f9ca 	bl	800583c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	2200      	movs	r2, #0
 80044ac:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80044ae:	463a      	mov	r2, r7
 80044b0:	f107 0310 	add.w	r3, r7, #16
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 ffdc 	bl	8005474 <xTaskCheckForTimeOut>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0c5      	beq.n	800444e <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d103      	bne.n	80044d0 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80044c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044ca:	f7ff ff44 	bl	8004356 <xStreamBufferSpacesAvailable>
 80044ce:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044dc:	f000 f894 	bl	8004608 <prvWriteMessageToBuffer>
 80044e0:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d019      	beq.n	800451c <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80044e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044ea:	f000 fa7d 	bl	80049e8 <prvBytesInBuffer>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d311      	bcc.n	800451c <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 80044f8:	f000 fcf2 	bl	8004ee0 <vTaskSuspendAll>
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <xStreamBufferSend+0x15c>
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	6918      	ldr	r0, [r3, #16]
 8004508:	2300      	movs	r3, #0
 800450a:	2200      	movs	r2, #0
 800450c:	2100      	movs	r1, #0
 800450e:	f001 f9f5 	bl	80058fc <xTaskGenericNotify>
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
 8004518:	f000 fcf0 	bl	8004efc <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800451e:	4618      	mov	r0, r3
 8004520:	3738      	adds	r7, #56	; 0x38
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b090      	sub	sp, #64	; 0x40
 800452a:	af02      	add	r7, sp, #8
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	623b      	str	r3, [r7, #32]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	61fb      	str	r3, [r7, #28]
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	7f1b      	ldrb	r3, [r3, #28]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	3304      	adds	r3, #4
 8004584:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004588:	f7ff fee5 	bl	8004356 <xStreamBufferSpacesAvailable>
 800458c:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800458e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800459a:	f000 f835 	bl	8004608 <prvWriteMessageToBuffer>
 800459e:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02b      	beq.n	80045fe <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80045a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a8:	f000 fa1e 	bl	80049e8 <prvBytesInBuffer>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d323      	bcc.n	80045fe <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 80045b6:	f3ef 8211 	mrs	r2, BASEPRI
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	61ba      	str	r2, [r7, #24]
 80045cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80045ce:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <xStreamBufferSendFromISR+0xcc>
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	6918      	ldr	r0, [r3, #16]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	2200      	movs	r2, #0
 80045e6:	2100      	movs	r1, #0
 80045e8:	f001 fa46 	bl	8005a78 <xTaskGenericNotifyFromISR>
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f383 8811 	msr	BASEPRI, r3
}
 80045fc:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004600:	4618      	mov	r0, r3
 8004602:	3738      	adds	r7, #56	; 0x38
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e01d      	b.n	800465e <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	7f1b      	ldrb	r3, [r3, #28]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d108      	bne.n	8004640 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800462e:	2301      	movs	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	4293      	cmp	r3, r2
 8004638:	bf28      	it	cs
 800463a:	4613      	movcs	r3, r2
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	e00e      	b.n	800465e <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	429a      	cmp	r2, r3
 8004646:	d308      	bcc.n	800465a <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	2204      	movs	r2, #4
 8004650:	4619      	mov	r1, r3
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f8dc 	bl	8004810 <prvWriteBytesToBuffer>
 8004658:	e001      	b.n	800465e <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	461a      	mov	r2, r3
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f8d0 	bl	8004810 <prvWriteBytesToBuffer>
 8004670:	6138      	str	r0, [r7, #16]
 8004672:	e001      	b.n	8004678 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8004678:	693b      	ldr	r3, [r7, #16]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b08e      	sub	sp, #56	; 0x38
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <xStreamBufferReceive+0x32>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	61fb      	str	r3, [r7, #28]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <xStreamBufferReceive+0x4e>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	61bb      	str	r3, [r7, #24]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	7f1b      	ldrb	r3, [r3, #28]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80046dc:	2304      	movs	r3, #4
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	e001      	b.n	80046e6 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d034      	beq.n	8004756 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80046ec:	f001 ff9a 	bl	8006624 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80046f0:	6a38      	ldr	r0, [r7, #32]
 80046f2:	f000 f979 	bl	80049e8 <prvBytesInBuffer>
 80046f6:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80046f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d816      	bhi.n	800472e <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8004700:	2000      	movs	r0, #0
 8004702:	f001 fa9d 	bl	8005c40 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <xStreamBufferReceive+0xa2>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	617b      	str	r3, [r7, #20]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8004724:	f000 ffee 	bl	8005704 <xTaskGetCurrentTaskHandle>
 8004728:	4602      	mov	r2, r0
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800472e:	f001 ffa9 	bl	8006684 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	429a      	cmp	r2, r3
 8004738:	d811      	bhi.n	800475e <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2200      	movs	r2, #0
 800473e:	2100      	movs	r1, #0
 8004740:	2000      	movs	r0, #0
 8004742:	f001 f87b 	bl	800583c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	2200      	movs	r2, #0
 800474a:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800474c:	6a38      	ldr	r0, [r7, #32]
 800474e:	f000 f94b 	bl	80049e8 <prvBytesInBuffer>
 8004752:	62b8      	str	r0, [r7, #40]	; 0x28
 8004754:	e003      	b.n	800475e <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004756:	6a38      	ldr	r0, [r7, #32]
 8004758:	f000 f946 	bl	80049e8 <prvBytesInBuffer>
 800475c:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800475e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	429a      	cmp	r2, r3
 8004764:	d91d      	bls.n	80047a2 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	6a38      	ldr	r0, [r7, #32]
 8004772:	f000 f81b 	bl	80047ac <prvReadMessageFromBuffer>
 8004776:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d011      	beq.n	80047a2 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800477e:	f000 fbaf 	bl	8004ee0 <vTaskSuspendAll>
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <xStreamBufferReceive+0x11c>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	6958      	ldr	r0, [r3, #20]
 800478e:	2300      	movs	r3, #0
 8004790:	2200      	movs	r2, #0
 8004792:	2100      	movs	r1, #0
 8004794:	f001 f8b2 	bl	80058fc <xTaskGenericNotify>
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2200      	movs	r2, #0
 800479c:	615a      	str	r2, [r3, #20]
 800479e:	f000 fbad 	bl	8004efc <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3730      	adds	r7, #48	; 0x30
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d019      	beq.n	80047f4 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80047c6:	f107 0110 	add.w	r1, r7, #16
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f890 	bl	80048f4 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d907      	bls.n	80047f8 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	e001      	b.n	80047f8 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f878 	bl	80048f4 <prvReadBytesFromBuffer>
 8004804:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8004806:	697b      	ldr	r3, [r7, #20]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	; 0x28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	61fb      	str	r3, [r7, #28]
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	4293      	cmp	r3, r2
 800484a:	bf28      	it	cs
 800484c:	4613      	movcs	r3, r2
 800484e:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8004850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	441a      	add	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d90a      	bls.n	8004874 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	61bb      	str	r3, [r7, #24]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	4413      	add	r3, r2
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	4618      	mov	r0, r3
 8004882:	f002 fafe 	bl	8006e82 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	429a      	cmp	r2, r3
 800488c:	d91c      	bls.n	80048c8 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	429a      	cmp	r2, r3
 800489a:	d90a      	bls.n	80048b2 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	617b      	str	r3, [r7, #20]
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6998      	ldr	r0, [r3, #24]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	18d1      	adds	r1, r2, r3
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	f002 fadd 	bl	8006e82 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d304      	bcc.n	80048e4 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	605a      	str	r2, [r3, #4]

	return xCount;
 80048ea:	687b      	ldr	r3, [r7, #4]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3728      	adds	r7, #40	; 0x28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	4293      	cmp	r3, r2
 8004908:	bf28      	it	cs
 800490a:	4613      	movcs	r3, r2
 800490c:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d064      	beq.n	80049de <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	6a3a      	ldr	r2, [r7, #32]
 8004924:	4293      	cmp	r3, r2
 8004926:	bf28      	it	cs
 8004928:	4613      	movcs	r3, r2
 800492a:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d90a      	bls.n	800494a <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	61bb      	str	r3, [r7, #24]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800494a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	441a      	add	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d90a      	bls.n	800496e <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	617b      	str	r3, [r7, #20]
}
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	4413      	add	r3, r2
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	4619      	mov	r1, r3
 800497a:	68b8      	ldr	r0, [r7, #8]
 800497c:	f002 fa81 	bl	8006e82 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	429a      	cmp	r2, r3
 8004986:	d919      	bls.n	80049bc <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d90a      	bls.n	80049a6 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	613b      	str	r3, [r7, #16]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	18d0      	adds	r0, r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6999      	ldr	r1, [r3, #24]
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	f002 fa63 	bl	8006e82 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	4413      	add	r3, r2
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d304      	bcc.n	80049d8 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80049de:	6a3b      	ldr	r3, [r7, #32]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3728      	adds	r7, #40	; 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d304      	bcc.n	8004a1a <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8004a36:	2355      	movs	r3, #85	; 0x55
 8004a38:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6979      	ldr	r1, [r7, #20]
 8004a3e:	68b8      	ldr	r0, [r7, #8]
 8004a40:	f002 fa2d 	bl	8006e9e <memset>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00a      	beq.n	8004a62 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	613b      	str	r3, [r7, #16]
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8004a62:	2224      	movs	r2, #36	; 0x24
 8004a64:	2100      	movs	r1, #0
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f002 fa19 	bl	8006e9e <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a84:	771a      	strb	r2, [r3, #28]
}
 8004a86:	bf00      	nop
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b08e      	sub	sp, #56	; 0x38
 8004a92:	af04      	add	r7, sp, #16
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	623b      	str	r3, [r7, #32]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <xTaskCreateStatic+0x46>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	61fb      	str	r3, [r7, #28]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ad4:	23bc      	movs	r3, #188	; 0xbc
 8004ad6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2bbc      	cmp	r3, #188	; 0xbc
 8004adc:	d00a      	beq.n	8004af4 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	61bb      	str	r3, [r7, #24]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004af4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01e      	beq.n	8004b3a <xTaskCreateStatic+0xac>
 8004afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01b      	beq.n	8004b3a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b14:	2300      	movs	r3, #0
 8004b16:	9303      	str	r3, [sp, #12]
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	9302      	str	r3, [sp, #8]
 8004b1c:	f107 0314 	add.w	r3, r7, #20
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f851 	bl	8004bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b34:	f000 f8f4 	bl	8004d20 <prvAddNewTaskToReadyList>
 8004b38:	e001      	b.n	8004b3e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b3e:	697b      	ldr	r3, [r7, #20]
	}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3728      	adds	r7, #40	; 0x28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08c      	sub	sp, #48	; 0x30
 8004b4c:	af04      	add	r7, sp, #16
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 fe83 	bl	8006868 <pvPortMalloc>
 8004b62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00e      	beq.n	8004b88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b6a:	20bc      	movs	r0, #188	; 0xbc
 8004b6c:	f001 fe7c 	bl	8006868 <pvPortMalloc>
 8004b70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8004b7e:	e005      	b.n	8004b8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b80:	6978      	ldr	r0, [r7, #20]
 8004b82:	f001 ff3d 	bl	8006a00 <vPortFree>
 8004b86:	e001      	b.n	8004b8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d017      	beq.n	8004bc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b9a:	88fa      	ldrh	r2, [r7, #6]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9303      	str	r3, [sp, #12]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	9302      	str	r3, [sp, #8]
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f80f 	bl	8004bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bb6:	69f8      	ldr	r0, [r7, #28]
 8004bb8:	f000 f8b2 	bl	8004d20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	e002      	b.n	8004bc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
	}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	461a      	mov	r2, r3
 8004bec:	21a5      	movs	r1, #165	; 0xa5
 8004bee:	f002 f956 	bl	8006e9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f023 0307 	bic.w	r3, r3, #7
 8004c0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	617b      	str	r3, [r7, #20]
}
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01f      	beq.n	8004c72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	e012      	b.n	8004c5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	7819      	ldrb	r1, [r3, #0]
 8004c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	3334      	adds	r3, #52	; 0x34
 8004c48:	460a      	mov	r2, r1
 8004c4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d006      	beq.n	8004c66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2b0f      	cmp	r3, #15
 8004c62:	d9e9      	bls.n	8004c38 <prvInitialiseNewTask+0x64>
 8004c64:	e000      	b.n	8004c68 <prvInitialiseNewTask+0x94>
			{
				break;
 8004c66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c70:	e003      	b.n	8004c7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	2b37      	cmp	r3, #55	; 0x37
 8004c7e:	d901      	bls.n	8004c84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c80:	2337      	movs	r3, #55	; 0x37
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	2200      	movs	r2, #0
 8004c94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe fd80 	bl	80037a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	3318      	adds	r3, #24
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fe fd7b 	bl	80037a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	3354      	adds	r3, #84	; 0x54
 8004cd4:	2260      	movs	r2, #96	; 0x60
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f002 f8e0 	bl	8006e9e <memset>
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	4a0c      	ldr	r2, [pc, #48]	; (8004d14 <prvInitialiseNewTask+0x140>)
 8004ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <prvInitialiseNewTask+0x144>)
 8004ce8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <prvInitialiseNewTask+0x148>)
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	69b8      	ldr	r0, [r7, #24]
 8004cf6:	f001 fb6b 	bl	80063d0 <pxPortInitialiseStack>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0c:	bf00      	nop
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	08009e34 	.word	0x08009e34
 8004d18:	08009e54 	.word	0x08009e54
 8004d1c:	08009e14 	.word	0x08009e14

08004d20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d28:	f001 fc7c 	bl	8006624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d2c:	4b2d      	ldr	r3, [pc, #180]	; (8004de4 <prvAddNewTaskToReadyList+0xc4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3301      	adds	r3, #1
 8004d32:	4a2c      	ldr	r2, [pc, #176]	; (8004de4 <prvAddNewTaskToReadyList+0xc4>)
 8004d34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d36:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <prvAddNewTaskToReadyList+0xc8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d3e:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <prvAddNewTaskToReadyList+0xc8>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d44:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <prvAddNewTaskToReadyList+0xc4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d110      	bne.n	8004d6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d4c:	f000 fc18 	bl	8005580 <prvInitialiseTaskLists>
 8004d50:	e00d      	b.n	8004d6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d52:	4b26      	ldr	r3, [pc, #152]	; (8004dec <prvAddNewTaskToReadyList+0xcc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d5a:	4b23      	ldr	r3, [pc, #140]	; (8004de8 <prvAddNewTaskToReadyList+0xc8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d802      	bhi.n	8004d6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d68:	4a1f      	ldr	r2, [pc, #124]	; (8004de8 <prvAddNewTaskToReadyList+0xc8>)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d6e:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <prvAddNewTaskToReadyList+0xd0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3301      	adds	r3, #1
 8004d74:	4a1e      	ldr	r2, [pc, #120]	; (8004df0 <prvAddNewTaskToReadyList+0xd0>)
 8004d76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d78:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <prvAddNewTaskToReadyList+0xd0>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <prvAddNewTaskToReadyList+0xd4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d903      	bls.n	8004d94 <prvAddNewTaskToReadyList+0x74>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <prvAddNewTaskToReadyList+0xd4>)
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <prvAddNewTaskToReadyList+0xd8>)
 8004da2:	441a      	add	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f7fe fd05 	bl	80037ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004db0:	f001 fc68 	bl	8006684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004db4:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <prvAddNewTaskToReadyList+0xcc>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00e      	beq.n	8004dda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <prvAddNewTaskToReadyList+0xc8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d207      	bcs.n	8004dda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <prvAddNewTaskToReadyList+0xdc>)
 8004dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000e60 	.word	0x20000e60
 8004de8:	2000098c 	.word	0x2000098c
 8004dec:	20000e6c 	.word	0x20000e6c
 8004df0:	20000e7c 	.word	0x20000e7c
 8004df4:	20000e68 	.word	0x20000e68
 8004df8:	20000990 	.word	0x20000990
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e0e:	463a      	mov	r2, r7
 8004e10:	1d39      	adds	r1, r7, #4
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fc6e 	bl	80036f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	9202      	str	r2, [sp, #8]
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	460a      	mov	r2, r1
 8004e2e:	4924      	ldr	r1, [pc, #144]	; (8004ec0 <vTaskStartScheduler+0xc0>)
 8004e30:	4824      	ldr	r0, [pc, #144]	; (8004ec4 <vTaskStartScheduler+0xc4>)
 8004e32:	f7ff fe2c 	bl	8004a8e <xTaskCreateStatic>
 8004e36:	4603      	mov	r3, r0
 8004e38:	4a23      	ldr	r2, [pc, #140]	; (8004ec8 <vTaskStartScheduler+0xc8>)
 8004e3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <vTaskStartScheduler+0xc8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e44:	2301      	movs	r3, #1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e001      	b.n	8004e4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d102      	bne.n	8004e5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e54:	f000 ff6e 	bl	8005d34 <xTimerCreateTimerTask>
 8004e58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d11b      	bne.n	8004e98 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	613b      	str	r3, [r7, #16]
}
 8004e72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e74:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <vTaskStartScheduler+0xcc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3354      	adds	r3, #84	; 0x54
 8004e7a:	4a15      	ldr	r2, [pc, #84]	; (8004ed0 <vTaskStartScheduler+0xd0>)
 8004e7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <vTaskStartScheduler+0xd4>)
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295
 8004e84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e86:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <vTaskStartScheduler+0xd8>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <vTaskStartScheduler+0xdc>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e92:	f001 fb25 	bl	80064e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e96:	e00e      	b.n	8004eb6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d10a      	bne.n	8004eb6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <vTaskStartScheduler+0xb4>
}
 8004eb6:	bf00      	nop
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	08009d78 	.word	0x08009d78
 8004ec4:	08005551 	.word	0x08005551
 8004ec8:	20000e84 	.word	0x20000e84
 8004ecc:	2000098c 	.word	0x2000098c
 8004ed0:	20000010 	.word	0x20000010
 8004ed4:	20000e80 	.word	0x20000e80
 8004ed8:	20000e6c 	.word	0x20000e6c
 8004edc:	20000e64 	.word	0x20000e64

08004ee0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ee4:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <vTaskSuspendAll+0x18>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	4a03      	ldr	r2, [pc, #12]	; (8004ef8 <vTaskSuspendAll+0x18>)
 8004eec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004eee:	bf00      	nop
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	20000e88 	.word	0x20000e88

08004efc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f0a:	4b42      	ldr	r3, [pc, #264]	; (8005014 <xTaskResumeAll+0x118>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	603b      	str	r3, [r7, #0]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f28:	f001 fb7c 	bl	8006624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f2c:	4b39      	ldr	r3, [pc, #228]	; (8005014 <xTaskResumeAll+0x118>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	4a38      	ldr	r2, [pc, #224]	; (8005014 <xTaskResumeAll+0x118>)
 8004f34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f36:	4b37      	ldr	r3, [pc, #220]	; (8005014 <xTaskResumeAll+0x118>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d162      	bne.n	8005004 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f3e:	4b36      	ldr	r3, [pc, #216]	; (8005018 <xTaskResumeAll+0x11c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d05e      	beq.n	8005004 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f46:	e02f      	b.n	8004fa8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f48:	4b34      	ldr	r3, [pc, #208]	; (800501c <xTaskResumeAll+0x120>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3318      	adds	r3, #24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe fc8d 	bl	8003874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fc88 	bl	8003874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f68:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <xTaskResumeAll+0x124>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d903      	bls.n	8004f78 <xTaskResumeAll+0x7c>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <xTaskResumeAll+0x124>)
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4a27      	ldr	r2, [pc, #156]	; (8005024 <xTaskResumeAll+0x128>)
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f7fe fc13 	bl	80037ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f98:	4b23      	ldr	r3, [pc, #140]	; (8005028 <xTaskResumeAll+0x12c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004fa2:	4b22      	ldr	r3, [pc, #136]	; (800502c <xTaskResumeAll+0x130>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	; (800501c <xTaskResumeAll+0x120>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1cb      	bne.n	8004f48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fb6:	f000 fb85 	bl	80056c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fba:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <xTaskResumeAll+0x134>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d010      	beq.n	8004fe8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fc6:	f000 f847 	bl	8005058 <xTaskIncrementTick>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fd0:	4b16      	ldr	r3, [pc, #88]	; (800502c <xTaskResumeAll+0x130>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f1      	bne.n	8004fc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004fe2:	4b13      	ldr	r3, [pc, #76]	; (8005030 <xTaskResumeAll+0x134>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <xTaskResumeAll+0x130>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <xTaskResumeAll+0x138>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005004:	f001 fb3e 	bl	8006684 <vPortExitCritical>

	return xAlreadyYielded;
 8005008:	68bb      	ldr	r3, [r7, #8]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000e88 	.word	0x20000e88
 8005018:	20000e60 	.word	0x20000e60
 800501c:	20000e20 	.word	0x20000e20
 8005020:	20000e68 	.word	0x20000e68
 8005024:	20000990 	.word	0x20000990
 8005028:	2000098c 	.word	0x2000098c
 800502c:	20000e74 	.word	0x20000e74
 8005030:	20000e70 	.word	0x20000e70
 8005034:	e000ed04 	.word	0xe000ed04

08005038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <xTaskGetTickCount+0x1c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005044:	687b      	ldr	r3, [r7, #4]
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000e64 	.word	0x20000e64

08005058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005062:	4b4f      	ldr	r3, [pc, #316]	; (80051a0 <xTaskIncrementTick+0x148>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f040 808f 	bne.w	800518a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800506c:	4b4d      	ldr	r3, [pc, #308]	; (80051a4 <xTaskIncrementTick+0x14c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3301      	adds	r3, #1
 8005072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005074:	4a4b      	ldr	r2, [pc, #300]	; (80051a4 <xTaskIncrementTick+0x14c>)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d120      	bne.n	80050c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005080:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <xTaskIncrementTick+0x150>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	603b      	str	r3, [r7, #0]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <xTaskIncrementTick+0x46>
 80050a0:	4b41      	ldr	r3, [pc, #260]	; (80051a8 <xTaskIncrementTick+0x150>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	4b41      	ldr	r3, [pc, #260]	; (80051ac <xTaskIncrementTick+0x154>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a3f      	ldr	r2, [pc, #252]	; (80051a8 <xTaskIncrementTick+0x150>)
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	4a3f      	ldr	r2, [pc, #252]	; (80051ac <xTaskIncrementTick+0x154>)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b3e      	ldr	r3, [pc, #248]	; (80051b0 <xTaskIncrementTick+0x158>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a3d      	ldr	r2, [pc, #244]	; (80051b0 <xTaskIncrementTick+0x158>)
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	f000 fb01 	bl	80056c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050c2:	4b3c      	ldr	r3, [pc, #240]	; (80051b4 <xTaskIncrementTick+0x15c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d349      	bcc.n	8005160 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050cc:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <xTaskIncrementTick+0x150>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d6:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <xTaskIncrementTick+0x15c>)
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295
 80050dc:	601a      	str	r2, [r3, #0]
					break;
 80050de:	e03f      	b.n	8005160 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e0:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <xTaskIncrementTick+0x150>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d203      	bcs.n	8005100 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050f8:	4a2e      	ldr	r2, [pc, #184]	; (80051b4 <xTaskIncrementTick+0x15c>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050fe:	e02f      	b.n	8005160 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fbb5 	bl	8003874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	3318      	adds	r3, #24
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fbac 	bl	8003874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	4b25      	ldr	r3, [pc, #148]	; (80051b8 <xTaskIncrementTick+0x160>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d903      	bls.n	8005130 <xTaskIncrementTick+0xd8>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <xTaskIncrementTick+0x160>)
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4a1f      	ldr	r2, [pc, #124]	; (80051bc <xTaskIncrementTick+0x164>)
 800513e:	441a      	add	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3304      	adds	r3, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f7fe fb37 	bl	80037ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <xTaskIncrementTick+0x168>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	429a      	cmp	r2, r3
 8005158:	d3b8      	bcc.n	80050cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800515a:	2301      	movs	r3, #1
 800515c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800515e:	e7b5      	b.n	80050cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <xTaskIncrementTick+0x168>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4915      	ldr	r1, [pc, #84]	; (80051bc <xTaskIncrementTick+0x164>)
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d901      	bls.n	800517c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005178:	2301      	movs	r3, #1
 800517a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <xTaskIncrementTick+0x16c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	e004      	b.n	8005194 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <xTaskIncrementTick+0x170>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	4a0d      	ldr	r2, [pc, #52]	; (80051c8 <xTaskIncrementTick+0x170>)
 8005192:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005194:	697b      	ldr	r3, [r7, #20]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000e88 	.word	0x20000e88
 80051a4:	20000e64 	.word	0x20000e64
 80051a8:	20000e18 	.word	0x20000e18
 80051ac:	20000e1c 	.word	0x20000e1c
 80051b0:	20000e78 	.word	0x20000e78
 80051b4:	20000e80 	.word	0x20000e80
 80051b8:	20000e68 	.word	0x20000e68
 80051bc:	20000990 	.word	0x20000990
 80051c0:	2000098c 	.word	0x2000098c
 80051c4:	20000e74 	.word	0x20000e74
 80051c8:	20000e70 	.word	0x20000e70

080051cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <vTaskSwitchContext+0xb0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051da:	4b29      	ldr	r3, [pc, #164]	; (8005280 <vTaskSwitchContext+0xb4>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051e0:	e046      	b.n	8005270 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80051e2:	4b27      	ldr	r3, [pc, #156]	; (8005280 <vTaskSwitchContext+0xb4>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e8:	4b26      	ldr	r3, [pc, #152]	; (8005284 <vTaskSwitchContext+0xb8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e010      	b.n	8005212 <vTaskSwitchContext+0x46>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <vTaskSwitchContext+0x40>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	607b      	str	r3, [r7, #4]
}
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <vTaskSwitchContext+0x3e>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3b01      	subs	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	491d      	ldr	r1, [pc, #116]	; (8005288 <vTaskSwitchContext+0xbc>)
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0e4      	beq.n	80051f0 <vTaskSwitchContext+0x24>
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4a15      	ldr	r2, [pc, #84]	; (8005288 <vTaskSwitchContext+0xbc>)
 8005232:	4413      	add	r3, r2
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	605a      	str	r2, [r3, #4]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	3308      	adds	r3, #8
 8005248:	429a      	cmp	r2, r3
 800524a:	d104      	bne.n	8005256 <vTaskSwitchContext+0x8a>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a0b      	ldr	r2, [pc, #44]	; (800528c <vTaskSwitchContext+0xc0>)
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	4a08      	ldr	r2, [pc, #32]	; (8005284 <vTaskSwitchContext+0xb8>)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <vTaskSwitchContext+0xc0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3354      	adds	r3, #84	; 0x54
 800526c:	4a08      	ldr	r2, [pc, #32]	; (8005290 <vTaskSwitchContext+0xc4>)
 800526e:	6013      	str	r3, [r2, #0]
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	20000e88 	.word	0x20000e88
 8005280:	20000e74 	.word	0x20000e74
 8005284:	20000e68 	.word	0x20000e68
 8005288:	20000990 	.word	0x20000990
 800528c:	2000098c 	.word	0x2000098c
 8005290:	20000010 	.word	0x20000010

08005294 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60fb      	str	r3, [r7, #12]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <vTaskPlaceOnEventList+0x44>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3318      	adds	r3, #24
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fe fa9d 	bl	8003802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052c8:	2101      	movs	r1, #1
 80052ca:	6838      	ldr	r0, [r7, #0]
 80052cc:	f000 fcde 	bl	8005c8c <prvAddCurrentTaskToDelayedList>
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	2000098c 	.word	0x2000098c

080052dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	617b      	str	r3, [r7, #20]
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <vTaskPlaceOnEventListRestricted+0x54>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3318      	adds	r3, #24
 800530a:	4619      	mov	r1, r3
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7fe fa54 	bl	80037ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
 800531c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	68b8      	ldr	r0, [r7, #8]
 8005322:	f000 fcb3 	bl	8005c8c <prvAddCurrentTaskToDelayedList>
	}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	2000098c 	.word	0x2000098c

08005334 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	60fb      	str	r3, [r7, #12]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	3318      	adds	r3, #24
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe fa85 	bl	8003874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800536a:	4b1e      	ldr	r3, [pc, #120]	; (80053e4 <xTaskRemoveFromEventList+0xb0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d11d      	bne.n	80053ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3304      	adds	r3, #4
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fa7c 	bl	8003874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005380:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <xTaskRemoveFromEventList+0xb4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d903      	bls.n	8005390 <xTaskRemoveFromEventList+0x5c>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4a16      	ldr	r2, [pc, #88]	; (80053e8 <xTaskRemoveFromEventList+0xb4>)
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <xTaskRemoveFromEventList+0xb8>)
 800539e:	441a      	add	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f7fe fa07 	bl	80037ba <vListInsertEnd>
 80053ac:	e005      	b.n	80053ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	3318      	adds	r3, #24
 80053b2:	4619      	mov	r1, r3
 80053b4:	480e      	ldr	r0, [pc, #56]	; (80053f0 <xTaskRemoveFromEventList+0xbc>)
 80053b6:	f7fe fa00 	bl	80037ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053be:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <xTaskRemoveFromEventList+0xc0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d905      	bls.n	80053d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <xTaskRemoveFromEventList+0xc4>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e001      	b.n	80053d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053d8:	697b      	ldr	r3, [r7, #20]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000e88 	.word	0x20000e88
 80053e8:	20000e68 	.word	0x20000e68
 80053ec:	20000990 	.word	0x20000990
 80053f0:	20000e20 	.word	0x20000e20
 80053f4:	2000098c 	.word	0x2000098c
 80053f8:	20000e74 	.word	0x20000e74

080053fc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60fb      	str	r3, [r7, #12]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005420:	f001 f900 	bl	8006624 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <vTaskSetTimeOutState+0x44>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <vTaskSetTimeOutState+0x48>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005434:	f001 f926 	bl	8006684 <vPortExitCritical>
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20000e78 	.word	0x20000e78
 8005444:	20000e64 	.word	0x20000e64

08005448 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005450:	4b06      	ldr	r3, [pc, #24]	; (800546c <vTaskInternalSetTimeOutState+0x24>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <vTaskInternalSetTimeOutState+0x28>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	605a      	str	r2, [r3, #4]
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	20000e78 	.word	0x20000e78
 8005470:	20000e64 	.word	0x20000e64

08005474 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	613b      	str	r3, [r7, #16]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	60fb      	str	r3, [r7, #12]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054b6:	f001 f8b5 	bl	8006624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054ba:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <xTaskCheckForTimeOut+0xbc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d102      	bne.n	80054da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	e023      	b.n	8005522 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <xTaskCheckForTimeOut+0xc0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d007      	beq.n	80054f6 <xTaskCheckForTimeOut+0x82>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d302      	bcc.n	80054f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054f0:	2301      	movs	r3, #1
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	e015      	b.n	8005522 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d20b      	bcs.n	8005518 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ff9b 	bl	8005448 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
 8005516:	e004      	b.n	8005522 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005522:	f001 f8af 	bl	8006684 <vPortExitCritical>

	return xReturn;
 8005526:	69fb      	ldr	r3, [r7, #28]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3720      	adds	r7, #32
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000e64 	.word	0x20000e64
 8005534:	20000e78 	.word	0x20000e78

08005538 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <vTaskMissedYield+0x14>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
}
 8005542:	bf00      	nop
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20000e74 	.word	0x20000e74

08005550 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005558:	f000 f852 	bl	8005600 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <prvIdleTask+0x28>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d9f9      	bls.n	8005558 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <prvIdleTask+0x2c>)
 8005566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005574:	e7f0      	b.n	8005558 <prvIdleTask+0x8>
 8005576:	bf00      	nop
 8005578:	20000990 	.word	0x20000990
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005586:	2300      	movs	r3, #0
 8005588:	607b      	str	r3, [r7, #4]
 800558a:	e00c      	b.n	80055a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <prvInitialiseTaskLists+0x60>)
 8005598:	4413      	add	r3, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe f8e0 	bl	8003760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3301      	adds	r3, #1
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b37      	cmp	r3, #55	; 0x37
 80055aa:	d9ef      	bls.n	800558c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055ac:	480d      	ldr	r0, [pc, #52]	; (80055e4 <prvInitialiseTaskLists+0x64>)
 80055ae:	f7fe f8d7 	bl	8003760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055b2:	480d      	ldr	r0, [pc, #52]	; (80055e8 <prvInitialiseTaskLists+0x68>)
 80055b4:	f7fe f8d4 	bl	8003760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055b8:	480c      	ldr	r0, [pc, #48]	; (80055ec <prvInitialiseTaskLists+0x6c>)
 80055ba:	f7fe f8d1 	bl	8003760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055be:	480c      	ldr	r0, [pc, #48]	; (80055f0 <prvInitialiseTaskLists+0x70>)
 80055c0:	f7fe f8ce 	bl	8003760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055c4:	480b      	ldr	r0, [pc, #44]	; (80055f4 <prvInitialiseTaskLists+0x74>)
 80055c6:	f7fe f8cb 	bl	8003760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <prvInitialiseTaskLists+0x78>)
 80055cc:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <prvInitialiseTaskLists+0x64>)
 80055ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <prvInitialiseTaskLists+0x7c>)
 80055d2:	4a05      	ldr	r2, [pc, #20]	; (80055e8 <prvInitialiseTaskLists+0x68>)
 80055d4:	601a      	str	r2, [r3, #0]
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000990 	.word	0x20000990
 80055e4:	20000df0 	.word	0x20000df0
 80055e8:	20000e04 	.word	0x20000e04
 80055ec:	20000e20 	.word	0x20000e20
 80055f0:	20000e34 	.word	0x20000e34
 80055f4:	20000e4c 	.word	0x20000e4c
 80055f8:	20000e18 	.word	0x20000e18
 80055fc:	20000e1c 	.word	0x20000e1c

08005600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005606:	e019      	b.n	800563c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005608:	f001 f80c 	bl	8006624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800560c:	4b10      	ldr	r3, [pc, #64]	; (8005650 <prvCheckTasksWaitingTermination+0x50>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe f92b 	bl	8003874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800561e:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <prvCheckTasksWaitingTermination+0x54>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3b01      	subs	r3, #1
 8005624:	4a0b      	ldr	r2, [pc, #44]	; (8005654 <prvCheckTasksWaitingTermination+0x54>)
 8005626:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <prvCheckTasksWaitingTermination+0x58>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3b01      	subs	r3, #1
 800562e:	4a0a      	ldr	r2, [pc, #40]	; (8005658 <prvCheckTasksWaitingTermination+0x58>)
 8005630:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005632:	f001 f827 	bl	8006684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f810 	bl	800565c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <prvCheckTasksWaitingTermination+0x58>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e1      	bne.n	8005608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000e34 	.word	0x20000e34
 8005654:	20000e60 	.word	0x20000e60
 8005658:	20000e48 	.word	0x20000e48

0800565c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3354      	adds	r3, #84	; 0x54
 8005668:	4618      	mov	r0, r3
 800566a:	f002 f981 	bl	8007970 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005674:	2b00      	cmp	r3, #0
 8005676:	d108      	bne.n	800568a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	4618      	mov	r0, r3
 800567e:	f001 f9bf 	bl	8006a00 <vPortFree>
				vPortFree( pxTCB );
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 f9bc 	bl	8006a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005688:	e018      	b.n	80056bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005690:	2b01      	cmp	r3, #1
 8005692:	d103      	bne.n	800569c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 f9b3 	bl	8006a00 <vPortFree>
	}
 800569a:	e00f      	b.n	80056bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d00a      	beq.n	80056bc <prvDeleteTCB+0x60>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	60fb      	str	r3, [r7, #12]
}
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <prvDeleteTCB+0x5e>
	}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ca:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <prvResetNextTaskUnblockTime+0x38>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056d4:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <prvResetNextTaskUnblockTime+0x3c>)
 80056d6:	f04f 32ff 	mov.w	r2, #4294967295
 80056da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056dc:	e008      	b.n	80056f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056de:	4b07      	ldr	r3, [pc, #28]	; (80056fc <prvResetNextTaskUnblockTime+0x38>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4a04      	ldr	r2, [pc, #16]	; (8005700 <prvResetNextTaskUnblockTime+0x3c>)
 80056ee:	6013      	str	r3, [r2, #0]
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20000e18 	.word	0x20000e18
 8005700:	20000e80 	.word	0x20000e80

08005704 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <xTaskGetCurrentTaskHandle+0x1c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005710:	687b      	ldr	r3, [r7, #4]
	}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	2000098c 	.word	0x2000098c

08005724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <xTaskGetSchedulerState+0x34>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d102      	bne.n	8005738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005732:	2301      	movs	r3, #1
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	e008      	b.n	800574a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005738:	4b08      	ldr	r3, [pc, #32]	; (800575c <xTaskGetSchedulerState+0x38>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005740:	2302      	movs	r3, #2
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	e001      	b.n	800574a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005746:	2300      	movs	r3, #0
 8005748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800574a:	687b      	ldr	r3, [r7, #4]
	}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	20000e6c 	.word	0x20000e6c
 800575c:	20000e88 	.word	0x20000e88

08005760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d056      	beq.n	8005824 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005776:	4b2e      	ldr	r3, [pc, #184]	; (8005830 <xTaskPriorityDisinherit+0xd0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	429a      	cmp	r2, r3
 800577e:	d00a      	beq.n	8005796 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60fb      	str	r3, [r7, #12]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	60bb      	str	r3, [r7, #8]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b8:	1e5a      	subs	r2, r3, #1
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d02c      	beq.n	8005824 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d128      	bne.n	8005824 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe f84c 	bl	8003874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <xTaskPriorityDisinherit+0xd4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d903      	bls.n	8005804 <xTaskPriorityDisinherit+0xa4>
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <xTaskPriorityDisinherit+0xd4>)
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4a09      	ldr	r2, [pc, #36]	; (8005838 <xTaskPriorityDisinherit+0xd8>)
 8005812:	441a      	add	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3304      	adds	r3, #4
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7fd ffcd 	bl	80037ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005824:	697b      	ldr	r3, [r7, #20]
	}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	2000098c 	.word	0x2000098c
 8005834:	20000e68 	.word	0x20000e68
 8005838:	20000990 	.word	0x20000990

0800583c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800584a:	f000 feeb 	bl	8006624 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800584e:	4b29      	ldr	r3, [pc, #164]	; (80058f4 <xTaskNotifyWait+0xb8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d01c      	beq.n	8005896 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800585c:	4b25      	ldr	r3, [pc, #148]	; (80058f4 <xTaskNotifyWait+0xb8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	43d2      	mvns	r2, r2
 8005868:	400a      	ands	r2, r1
 800586a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800586e:	4b21      	ldr	r3, [pc, #132]	; (80058f4 <xTaskNotifyWait+0xb8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800587e:	2101      	movs	r1, #1
 8005880:	6838      	ldr	r0, [r7, #0]
 8005882:	f000 fa03 	bl	8005c8c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005886:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <xTaskNotifyWait+0xbc>)
 8005888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005896:	f000 fef5 	bl	8006684 <vPortExitCritical>

		taskENTER_CRITICAL();
 800589a:	f000 fec3 	bl	8006624 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80058a4:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <xTaskNotifyWait+0xb8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80058b0:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <xTaskNotifyWait+0xb8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d002      	beq.n	80058c4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e00a      	b.n	80058da <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <xTaskNotifyWait+0xb8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	43d2      	mvns	r2, r2
 80058d0:	400a      	ands	r2, r1
 80058d2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <xTaskNotifyWait+0xb8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80058e4:	f000 fece 	bl	8006684 <vPortExitCritical>

		return xReturn;
 80058e8:	697b      	ldr	r3, [r7, #20]
	}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	2000098c 	.word	0x2000098c
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800590c:	2301      	movs	r3, #1
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <xTaskGenericNotify+0x30>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	61bb      	str	r3, [r7, #24]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005930:	f000 fe78 	bl	8006624 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800594a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	2b04      	cmp	r3, #4
 8005958:	d82d      	bhi.n	80059b6 <xTaskGenericNotify+0xba>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <xTaskGenericNotify+0x64>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	080059d9 	.word	0x080059d9
 8005964:	08005975 	.word	0x08005975
 8005968:	08005987 	.word	0x08005987
 800596c:	08005997 	.word	0x08005997
 8005970:	080059a1 	.word	0x080059a1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	431a      	orrs	r2, r3
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005984:	e02b      	b.n	80059de <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005994:	e023      	b.n	80059de <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800599e:	e01e      	b.n	80059de <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059a0:	7ffb      	ldrb	r3, [r7, #31]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d004      	beq.n	80059b0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80059ae:	e016      	b.n	80059de <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80059b4:	e013      	b.n	80059de <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d00c      	beq.n	80059dc <xTaskGenericNotify+0xe0>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	617b      	str	r3, [r7, #20]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <xTaskGenericNotify+0xda>
					break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <xTaskGenericNotify+0xe2>

					break;
 80059dc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80059de:	7ffb      	ldrb	r3, [r7, #31]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d13a      	bne.n	8005a5a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fd ff43 	bl	8003874 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <xTaskGenericNotify+0x16c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d903      	bls.n	8005a02 <xTaskGenericNotify+0x106>
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <xTaskGenericNotify+0x16c>)
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <xTaskGenericNotify+0x170>)
 8005a10:	441a      	add	r2, r3
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f7fd fece 	bl	80037ba <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <xTaskGenericNotify+0x140>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	613b      	str	r3, [r7, #16]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <xTaskGenericNotify+0x174>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d907      	bls.n	8005a5a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <xTaskGenericNotify+0x178>)
 8005a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005a5a:	f000 fe13 	bl	8006684 <vPortExitCritical>

		return xReturn;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3728      	adds	r7, #40	; 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000e68 	.word	0x20000e68
 8005a6c:	20000990 	.word	0x20000990
 8005a70:	2000098c 	.word	0x2000098c
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08e      	sub	sp, #56	; 0x38
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aa8:	f000 fe9e 	bl	80067e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005ab0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	623a      	str	r2, [r7, #32]
 8005ac6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005ac8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d82f      	bhi.n	8005b54 <xTaskGenericNotifyFromISR+0xdc>
 8005af4:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <xTaskGenericNotifyFromISR+0x84>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b77 	.word	0x08005b77
 8005b00:	08005b11 	.word	0x08005b11
 8005b04:	08005b23 	.word	0x08005b23
 8005b08:	08005b33 	.word	0x08005b33
 8005b0c:	08005b3d 	.word	0x08005b3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005b20:	e02c      	b.n	8005b7c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005b30:	e024      	b.n	8005b7c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005b3a:	e01f      	b.n	8005b7c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005b3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d004      	beq.n	8005b4e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005b4c:	e016      	b.n	8005b7c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005b52:	e013      	b.n	8005b7c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d00c      	beq.n	8005b7a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	61bb      	str	r3, [r7, #24]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <xTaskGenericNotifyFromISR+0x104>
					break;
 8005b7a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d146      	bne.n	8005c12 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	617b      	str	r3, [r7, #20]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba2:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <xTaskGenericNotifyFromISR+0x1b0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d11d      	bne.n	8005be6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fd fe60 	bl	8003874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <xTaskGenericNotifyFromISR+0x1b4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d903      	bls.n	8005bc8 <xTaskGenericNotifyFromISR+0x150>
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4a19      	ldr	r2, [pc, #100]	; (8005c2c <xTaskGenericNotifyFromISR+0x1b4>)
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <xTaskGenericNotifyFromISR+0x1b8>)
 8005bd6:	441a      	add	r2, r3
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fd fdeb 	bl	80037ba <vListInsertEnd>
 8005be4:	e005      	b.n	8005bf2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	3318      	adds	r3, #24
 8005bea:	4619      	mov	r1, r3
 8005bec:	4811      	ldr	r0, [pc, #68]	; (8005c34 <xTaskGenericNotifyFromISR+0x1bc>)
 8005bee:	f7fd fde4 	bl	80037ba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <xTaskGenericNotifyFromISR+0x1c0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d908      	bls.n	8005c12 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <xTaskGenericNotifyFromISR+0x1c4>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f383 8811 	msr	BASEPRI, r3
}
 8005c1c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3738      	adds	r7, #56	; 0x38
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000e88 	.word	0x20000e88
 8005c2c:	20000e68 	.word	0x20000e68
 8005c30:	20000990 	.word	0x20000990
 8005c34:	20000e20 	.word	0x20000e20
 8005c38:	2000098c 	.word	0x2000098c
 8005c3c:	20000e74 	.word	0x20000e74

08005c40 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <xTaskNotifyStateClear+0x14>
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	; (8005c88 <xTaskNotifyStateClear+0x48>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	e000      	b.n	8005c56 <xTaskNotifyStateClear+0x16>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8005c58:	f000 fce4 	bl	8006624 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d106      	bne.n	8005c76 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 8005c70:	2301      	movs	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e001      	b.n	8005c7a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8005c7a:	f000 fd03 	bl	8006684 <vPortExitCritical>

		return xReturn;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
	}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	2000098c 	.word	0x2000098c

08005c8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c96:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x90>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c9c:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fd fde6 	bl	8003874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d10a      	bne.n	8005cc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cb6:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4819      	ldr	r0, [pc, #100]	; (8005d24 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cc0:	f7fd fd7b 	bl	80037ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cc4:	e026      	b.n	8005d14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4413      	add	r3, r2
 8005ccc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cce:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d209      	bcs.n	8005cf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cde:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7fd fd89 	bl	8003802 <vListInsert>
}
 8005cf0:	e010      	b.n	8005d14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cf2:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f7fd fd7f 	bl	8003802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d202      	bcs.n	8005d14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d0e:	4a08      	ldr	r2, [pc, #32]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	6013      	str	r3, [r2, #0]
}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000e64 	.word	0x20000e64
 8005d20:	2000098c 	.word	0x2000098c
 8005d24:	20000e4c 	.word	0x20000e4c
 8005d28:	20000e1c 	.word	0x20000e1c
 8005d2c:	20000e18 	.word	0x20000e18
 8005d30:	20000e80 	.word	0x20000e80

08005d34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	; 0x28
 8005d38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d3e:	f000 fb07 	bl	8006350 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d42:	4b1c      	ldr	r3, [pc, #112]	; (8005db4 <xTimerCreateTimerTask+0x80>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d021      	beq.n	8005d8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d52:	1d3a      	adds	r2, r7, #4
 8005d54:	f107 0108 	add.w	r1, r7, #8
 8005d58:	f107 030c 	add.w	r3, r7, #12
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fd fce5 	bl	800372c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	9202      	str	r2, [sp, #8]
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2300      	movs	r3, #0
 8005d72:	460a      	mov	r2, r1
 8005d74:	4910      	ldr	r1, [pc, #64]	; (8005db8 <xTimerCreateTimerTask+0x84>)
 8005d76:	4811      	ldr	r0, [pc, #68]	; (8005dbc <xTimerCreateTimerTask+0x88>)
 8005d78:	f7fe fe89 	bl	8004a8e <xTaskCreateStatic>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4a10      	ldr	r2, [pc, #64]	; (8005dc0 <xTimerCreateTimerTask+0x8c>)
 8005d80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d82:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <xTimerCreateTimerTask+0x8c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	613b      	str	r3, [r7, #16]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005daa:	697b      	ldr	r3, [r7, #20]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20000ebc 	.word	0x20000ebc
 8005db8:	08009d80 	.word	0x08009d80
 8005dbc:	08005ef9 	.word	0x08005ef9
 8005dc0:	20000ec0 	.word	0x20000ec0

08005dc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	623b      	str	r3, [r7, #32]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005df2:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <xTimerGenericCommand+0x98>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d02a      	beq.n	8005e50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b05      	cmp	r3, #5
 8005e0a:	dc18      	bgt.n	8005e3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e0c:	f7ff fc8a 	bl	8005724 <xTaskGetSchedulerState>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d109      	bne.n	8005e2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e16:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <xTimerGenericCommand+0x98>)
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	f107 0110 	add.w	r1, r7, #16
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e22:	f7fd fe55 	bl	8003ad0 <xQueueGenericSend>
 8005e26:	6278      	str	r0, [r7, #36]	; 0x24
 8005e28:	e012      	b.n	8005e50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e2a:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <xTimerGenericCommand+0x98>)
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	f107 0110 	add.w	r1, r7, #16
 8005e32:	2300      	movs	r3, #0
 8005e34:	2200      	movs	r2, #0
 8005e36:	f7fd fe4b 	bl	8003ad0 <xQueueGenericSend>
 8005e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e3c:	e008      	b.n	8005e50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e3e:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <xTimerGenericCommand+0x98>)
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	f107 0110 	add.w	r1, r7, #16
 8005e46:	2300      	movs	r3, #0
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	f7fd ff3f 	bl	8003ccc <xQueueGenericSendFromISR>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3728      	adds	r7, #40	; 0x28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000ebc 	.word	0x20000ebc

08005e60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e6a:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <prvProcessExpiredTimer+0x94>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fd fcfb 	bl	8003874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d022      	beq.n	8005ed2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	18d1      	adds	r1, r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	6978      	ldr	r0, [r7, #20]
 8005e9a:	f000 f8d1 	bl	8006040 <prvInsertTimerInActiveList>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01f      	beq.n	8005ee4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	2100      	movs	r1, #0
 8005eae:	6978      	ldr	r0, [r7, #20]
 8005eb0:	f7ff ff88 	bl	8005dc4 <xTimerGenericCommand>
 8005eb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d113      	bne.n	8005ee4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	60fb      	str	r3, [r7, #12]
}
 8005ece:	bf00      	nop
 8005ed0:	e7fe      	b.n	8005ed0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	6978      	ldr	r0, [r7, #20]
 8005eea:	4798      	blx	r3
}
 8005eec:	bf00      	nop
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000eb4 	.word	0x20000eb4

08005ef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f00:	f107 0308 	add.w	r3, r7, #8
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 f857 	bl	8005fb8 <prvGetNextExpireTime>
 8005f0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f803 	bl	8005f1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f16:	f000 f8d5 	bl	80060c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f1a:	e7f1      	b.n	8005f00 <prvTimerTask+0x8>

08005f1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f26:	f7fe ffdb 	bl	8004ee0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f2a:	f107 0308 	add.w	r3, r7, #8
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f866 	bl	8006000 <prvSampleTimeNow>
 8005f34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d130      	bne.n	8005f9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <prvProcessTimerOrBlockTask+0x3c>
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d806      	bhi.n	8005f58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f4a:	f7fe ffd7 	bl	8004efc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f4e:	68f9      	ldr	r1, [r7, #12]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ff85 	bl	8005e60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f56:	e024      	b.n	8005fa2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <prvProcessTimerOrBlockTask+0x90>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <prvProcessTimerOrBlockTask+0x50>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e000      	b.n	8005f6e <prvProcessTimerOrBlockTask+0x52>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <prvProcessTimerOrBlockTask+0x94>)
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f7fe f95b 	bl	8004238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f82:	f7fe ffbb 	bl	8004efc <xTaskResumeAll>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f8c:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <prvProcessTimerOrBlockTask+0x98>)
 8005f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	f3bf 8f6f 	isb	sy
}
 8005f9c:	e001      	b.n	8005fa2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f9e:	f7fe ffad 	bl	8004efc <xTaskResumeAll>
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000eb8 	.word	0x20000eb8
 8005fb0:	20000ebc 	.word	0x20000ebc
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fc0:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <prvGetNextExpireTime+0x44>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <prvGetNextExpireTime+0x16>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	e000      	b.n	8005fd0 <prvGetNextExpireTime+0x18>
 8005fce:	2200      	movs	r2, #0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d105      	bne.n	8005fe8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fdc:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <prvGetNextExpireTime+0x44>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e001      	b.n	8005fec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fec:	68fb      	ldr	r3, [r7, #12]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000eb4 	.word	0x20000eb4

08006000 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006008:	f7ff f816 	bl	8005038 <xTaskGetTickCount>
 800600c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <prvSampleTimeNow+0x3c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	429a      	cmp	r2, r3
 8006016:	d205      	bcs.n	8006024 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006018:	f000 f936 	bl	8006288 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e002      	b.n	800602a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800602a:	4a04      	ldr	r2, [pc, #16]	; (800603c <prvSampleTimeNow+0x3c>)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006030:	68fb      	ldr	r3, [r7, #12]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000ec4 	.word	0x20000ec4

08006040 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	429a      	cmp	r2, r3
 8006064:	d812      	bhi.n	800608c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	429a      	cmp	r2, r3
 8006072:	d302      	bcc.n	800607a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006074:	2301      	movs	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	e01b      	b.n	80060b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <prvInsertTimerInActiveList+0x7c>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f7fd fbbc 	bl	8003802 <vListInsert>
 800608a:	e012      	b.n	80060b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d206      	bcs.n	80060a2 <prvInsertTimerInActiveList+0x62>
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e007      	b.n	80060b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060a2:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <prvInsertTimerInActiveList+0x80>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7fd fba8 	bl	8003802 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060b2:	697b      	ldr	r3, [r7, #20]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000eb8 	.word	0x20000eb8
 80060c0:	20000eb4 	.word	0x20000eb4

080060c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08e      	sub	sp, #56	; 0x38
 80060c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060ca:	e0ca      	b.n	8006262 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	da18      	bge.n	8006104 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060d2:	1d3b      	adds	r3, r7, #4
 80060d4:	3304      	adds	r3, #4
 80060d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	61fb      	str	r3, [r7, #28]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fa:	6850      	ldr	r0, [r2, #4]
 80060fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fe:	6892      	ldr	r2, [r2, #8]
 8006100:	4611      	mov	r1, r2
 8006102:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f2c0 80aa 	blt.w	8006260 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	3304      	adds	r3, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f7fd fba9 	bl	8003874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006122:	463b      	mov	r3, r7
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ff6b 	bl	8006000 <prvSampleTimeNow>
 800612a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b09      	cmp	r3, #9
 8006130:	f200 8097 	bhi.w	8006262 <prvProcessReceivedCommands+0x19e>
 8006134:	a201      	add	r2, pc, #4	; (adr r2, 800613c <prvProcessReceivedCommands+0x78>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	08006165 	.word	0x08006165
 8006140:	08006165 	.word	0x08006165
 8006144:	08006165 	.word	0x08006165
 8006148:	080061d9 	.word	0x080061d9
 800614c:	080061ed 	.word	0x080061ed
 8006150:	08006237 	.word	0x08006237
 8006154:	08006165 	.word	0x08006165
 8006158:	08006165 	.word	0x08006165
 800615c:	080061d9 	.word	0x080061d9
 8006160:	080061ed 	.word	0x080061ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	b2da      	uxtb	r2, r3
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	18d1      	adds	r1, r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006184:	f7ff ff5c 	bl	8006040 <prvInsertTimerInActiveList>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d069      	beq.n	8006262 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006194:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d05e      	beq.n	8006262 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	441a      	add	r2, r3
 80061ac:	2300      	movs	r3, #0
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	2300      	movs	r3, #0
 80061b2:	2100      	movs	r1, #0
 80061b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b6:	f7ff fe05 	bl	8005dc4 <xTimerGenericCommand>
 80061ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d14f      	bne.n	8006262 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	61bb      	str	r3, [r7, #24]
}
 80061d4:	bf00      	nop
 80061d6:	e7fe      	b.n	80061d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80061ea:	e03a      	b.n	8006262 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	617b      	str	r3, [r7, #20]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	18d1      	adds	r1, r2, r3
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006230:	f7ff ff06 	bl	8006040 <prvInsertTimerInActiveList>
					break;
 8006234:	e015      	b.n	8006262 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d103      	bne.n	800624c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006246:	f000 fbdb 	bl	8006a00 <vPortFree>
 800624a:	e00a      	b.n	8006262 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	b2da      	uxtb	r2, r3
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800625e:	e000      	b.n	8006262 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006260:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006262:	4b08      	ldr	r3, [pc, #32]	; (8006284 <prvProcessReceivedCommands+0x1c0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	1d39      	adds	r1, r7, #4
 8006268:	2200      	movs	r2, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f7fd fdca 	bl	8003e04 <xQueueReceive>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	f47f af2a 	bne.w	80060cc <prvProcessReceivedCommands+0x8>
	}
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	3730      	adds	r7, #48	; 0x30
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000ebc 	.word	0x20000ebc

08006288 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800628e:	e048      	b.n	8006322 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006290:	4b2d      	ldr	r3, [pc, #180]	; (8006348 <prvSwitchTimerLists+0xc0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629a:	4b2b      	ldr	r3, [pc, #172]	; (8006348 <prvSwitchTimerLists+0xc0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fd fae3 	bl	8003874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d02e      	beq.n	8006322 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4413      	add	r3, r2
 80062cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d90e      	bls.n	80062f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062e2:	4b19      	ldr	r3, [pc, #100]	; (8006348 <prvSwitchTimerLists+0xc0>)
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3304      	adds	r3, #4
 80062ea:	4619      	mov	r1, r3
 80062ec:	4610      	mov	r0, r2
 80062ee:	f7fd fa88 	bl	8003802 <vListInsert>
 80062f2:	e016      	b.n	8006322 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062f4:	2300      	movs	r3, #0
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	2300      	movs	r3, #0
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	2100      	movs	r1, #0
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff fd60 	bl	8005dc4 <xTimerGenericCommand>
 8006304:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	603b      	str	r3, [r7, #0]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <prvSwitchTimerLists+0xc0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1b1      	bne.n	8006290 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <prvSwitchTimerLists+0xc0>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <prvSwitchTimerLists+0xc4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a04      	ldr	r2, [pc, #16]	; (8006348 <prvSwitchTimerLists+0xc0>)
 8006338:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800633a:	4a04      	ldr	r2, [pc, #16]	; (800634c <prvSwitchTimerLists+0xc4>)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	6013      	str	r3, [r2, #0]
}
 8006340:	bf00      	nop
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20000eb4 	.word	0x20000eb4
 800634c:	20000eb8 	.word	0x20000eb8

08006350 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006356:	f000 f965 	bl	8006624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800635a:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <prvCheckForValidListAndQueue+0x60>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d120      	bne.n	80063a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006362:	4814      	ldr	r0, [pc, #80]	; (80063b4 <prvCheckForValidListAndQueue+0x64>)
 8006364:	f7fd f9fc 	bl	8003760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006368:	4813      	ldr	r0, [pc, #76]	; (80063b8 <prvCheckForValidListAndQueue+0x68>)
 800636a:	f7fd f9f9 	bl	8003760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800636e:	4b13      	ldr	r3, [pc, #76]	; (80063bc <prvCheckForValidListAndQueue+0x6c>)
 8006370:	4a10      	ldr	r2, [pc, #64]	; (80063b4 <prvCheckForValidListAndQueue+0x64>)
 8006372:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006374:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <prvCheckForValidListAndQueue+0x70>)
 8006376:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <prvCheckForValidListAndQueue+0x68>)
 8006378:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800637a:	2300      	movs	r3, #0
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <prvCheckForValidListAndQueue+0x74>)
 8006380:	4a11      	ldr	r2, [pc, #68]	; (80063c8 <prvCheckForValidListAndQueue+0x78>)
 8006382:	2110      	movs	r1, #16
 8006384:	200a      	movs	r0, #10
 8006386:	f7fd fb07 	bl	8003998 <xQueueGenericCreateStatic>
 800638a:	4603      	mov	r3, r0
 800638c:	4a08      	ldr	r2, [pc, #32]	; (80063b0 <prvCheckForValidListAndQueue+0x60>)
 800638e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <prvCheckForValidListAndQueue+0x60>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <prvCheckForValidListAndQueue+0x60>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	490b      	ldr	r1, [pc, #44]	; (80063cc <prvCheckForValidListAndQueue+0x7c>)
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fd ff20 	bl	80041e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063a4:	f000 f96e 	bl	8006684 <vPortExitCritical>
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000ebc 	.word	0x20000ebc
 80063b4:	20000e8c 	.word	0x20000e8c
 80063b8:	20000ea0 	.word	0x20000ea0
 80063bc:	20000eb4 	.word	0x20000eb4
 80063c0:	20000eb8 	.word	0x20000eb8
 80063c4:	20000f68 	.word	0x20000f68
 80063c8:	20000ec8 	.word	0x20000ec8
 80063cc:	08009d88 	.word	0x08009d88

080063d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3b04      	subs	r3, #4
 80063e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3b04      	subs	r3, #4
 80063ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f023 0201 	bic.w	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3b04      	subs	r3, #4
 80063fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006400:	4a0c      	ldr	r2, [pc, #48]	; (8006434 <pxPortInitialiseStack+0x64>)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3b14      	subs	r3, #20
 800640a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b04      	subs	r3, #4
 8006416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f06f 0202 	mvn.w	r2, #2
 800641e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3b20      	subs	r3, #32
 8006424:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006426:	68fb      	ldr	r3, [r7, #12]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	08006439 	.word	0x08006439

08006438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <prvTaskExitError+0x54>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d00a      	beq.n	8006462 <prvTaskExitError+0x2a>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	60fb      	str	r3, [r7, #12]
}
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <prvTaskExitError+0x28>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	60bb      	str	r3, [r7, #8]
}
 8006474:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006476:	bf00      	nop
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0fc      	beq.n	8006478 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	2000000c 	.word	0x2000000c

08006490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <pxCurrentTCBConst2>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649a:	f380 8809 	msr	PSP, r0
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8811 	msr	BASEPRI, r0
 80064aa:	4770      	bx	lr
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst2>:
 80064b0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064b8:	4808      	ldr	r0, [pc, #32]	; (80064dc <prvPortStartFirstTask+0x24>)
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f380 8808 	msr	MSP, r0
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8814 	msr	CONTROL, r0
 80064ca:	b662      	cpsie	i
 80064cc:	b661      	cpsie	f
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	df00      	svc	0
 80064d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064da:	bf00      	nop
 80064dc:	e000ed08 	.word	0xe000ed08

080064e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064e6:	4b46      	ldr	r3, [pc, #280]	; (8006600 <xPortStartScheduler+0x120>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a46      	ldr	r2, [pc, #280]	; (8006604 <xPortStartScheduler+0x124>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10a      	bne.n	8006506 <xPortStartScheduler+0x26>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006506:	4b3e      	ldr	r3, [pc, #248]	; (8006600 <xPortStartScheduler+0x120>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a3f      	ldr	r2, [pc, #252]	; (8006608 <xPortStartScheduler+0x128>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d10a      	bne.n	8006526 <xPortStartScheduler+0x46>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	60fb      	str	r3, [r7, #12]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006526:	4b39      	ldr	r3, [pc, #228]	; (800660c <xPortStartScheduler+0x12c>)
 8006528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006548:	b2da      	uxtb	r2, r3
 800654a:	4b31      	ldr	r3, [pc, #196]	; (8006610 <xPortStartScheduler+0x130>)
 800654c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <xPortStartScheduler+0x134>)
 8006550:	2207      	movs	r2, #7
 8006552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006554:	e009      	b.n	800656a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006556:	4b2f      	ldr	r3, [pc, #188]	; (8006614 <xPortStartScheduler+0x134>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3b01      	subs	r3, #1
 800655c:	4a2d      	ldr	r2, [pc, #180]	; (8006614 <xPortStartScheduler+0x134>)
 800655e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	b2db      	uxtb	r3, r3
 8006568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d0ef      	beq.n	8006556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006576:	4b27      	ldr	r3, [pc, #156]	; (8006614 <xPortStartScheduler+0x134>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1c3 0307 	rsb	r3, r3, #7
 800657e:	2b04      	cmp	r3, #4
 8006580:	d00a      	beq.n	8006598 <xPortStartScheduler+0xb8>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	60bb      	str	r3, [r7, #8]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006598:	4b1e      	ldr	r3, [pc, #120]	; (8006614 <xPortStartScheduler+0x134>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	4a1d      	ldr	r2, [pc, #116]	; (8006614 <xPortStartScheduler+0x134>)
 80065a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065a2:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <xPortStartScheduler+0x134>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065aa:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <xPortStartScheduler+0x134>)
 80065ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065b6:	4b18      	ldr	r3, [pc, #96]	; (8006618 <xPortStartScheduler+0x138>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a17      	ldr	r2, [pc, #92]	; (8006618 <xPortStartScheduler+0x138>)
 80065bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <xPortStartScheduler+0x138>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a14      	ldr	r2, [pc, #80]	; (8006618 <xPortStartScheduler+0x138>)
 80065c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065ce:	f000 f8dd 	bl	800678c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <xPortStartScheduler+0x13c>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065d8:	f000 f8fc 	bl	80067d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065dc:	4b10      	ldr	r3, [pc, #64]	; (8006620 <xPortStartScheduler+0x140>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0f      	ldr	r2, [pc, #60]	; (8006620 <xPortStartScheduler+0x140>)
 80065e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065e8:	f7ff ff66 	bl	80064b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065ec:	f7fe fdee 	bl	80051cc <vTaskSwitchContext>
	prvTaskExitError();
 80065f0:	f7ff ff22 	bl	8006438 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	e000ed00 	.word	0xe000ed00
 8006604:	410fc271 	.word	0x410fc271
 8006608:	410fc270 	.word	0x410fc270
 800660c:	e000e400 	.word	0xe000e400
 8006610:	20000fb8 	.word	0x20000fb8
 8006614:	20000fbc 	.word	0x20000fbc
 8006618:	e000ed20 	.word	0xe000ed20
 800661c:	2000000c 	.word	0x2000000c
 8006620:	e000ef34 	.word	0xe000ef34

08006624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	607b      	str	r3, [r7, #4]
}
 800663c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <vPortEnterCritical+0x58>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a0d      	ldr	r2, [pc, #52]	; (800667c <vPortEnterCritical+0x58>)
 8006646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <vPortEnterCritical+0x58>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d10f      	bne.n	8006670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <vPortEnterCritical+0x5c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <vPortEnterCritical+0x4c>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	603b      	str	r3, [r7, #0]
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <vPortEnterCritical+0x4a>
	}
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	2000000c 	.word	0x2000000c
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <vPortExitCritical+0x50>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <vPortExitCritical+0x24>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	607b      	str	r3, [r7, #4]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <vPortExitCritical+0x50>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <vPortExitCritical+0x50>)
 80066b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066b2:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <vPortExitCritical+0x50>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d105      	bne.n	80066c6 <vPortExitCritical+0x42>
 80066ba:	2300      	movs	r3, #0
 80066bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	f383 8811 	msr	BASEPRI, r3
}
 80066c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	2000000c 	.word	0x2000000c
	...

080066e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066e0:	f3ef 8009 	mrs	r0, PSP
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4b15      	ldr	r3, [pc, #84]	; (8006740 <pxCurrentTCBConst>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f01e 0f10 	tst.w	lr, #16
 80066f0:	bf08      	it	eq
 80066f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fa:	6010      	str	r0, [r2, #0]
 80066fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006704:	f380 8811 	msr	BASEPRI, r0
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f7fe fd5c 	bl	80051cc <vTaskSwitchContext>
 8006714:	f04f 0000 	mov.w	r0, #0
 8006718:	f380 8811 	msr	BASEPRI, r0
 800671c:	bc09      	pop	{r0, r3}
 800671e:	6819      	ldr	r1, [r3, #0]
 8006720:	6808      	ldr	r0, [r1, #0]
 8006722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006726:	f01e 0f10 	tst.w	lr, #16
 800672a:	bf08      	it	eq
 800672c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006730:	f380 8809 	msr	PSP, r0
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	f3af 8000 	nop.w

08006740 <pxCurrentTCBConst>:
 8006740:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	607b      	str	r3, [r7, #4]
}
 8006760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006762:	f7fe fc79 	bl	8005058 <xTaskIncrementTick>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <xPortSysTickHandler+0x40>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	2300      	movs	r3, #0
 8006776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f383 8811 	msr	BASEPRI, r3
}
 800677e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <vPortSetupTimerInterrupt+0x34>)
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <vPortSetupTimerInterrupt+0x38>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800679c:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <vPortSetupTimerInterrupt+0x3c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <vPortSetupTimerInterrupt+0x40>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	099b      	lsrs	r3, r3, #6
 80067a8:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <vPortSetupTimerInterrupt+0x44>)
 80067aa:	3b01      	subs	r3, #1
 80067ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067ae:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <vPortSetupTimerInterrupt+0x34>)
 80067b0:	2207      	movs	r2, #7
 80067b2:	601a      	str	r2, [r3, #0]
}
 80067b4:	bf00      	nop
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	e000e010 	.word	0xe000e010
 80067c4:	e000e018 	.word	0xe000e018
 80067c8:	20000000 	.word	0x20000000
 80067cc:	10624dd3 	.word	0x10624dd3
 80067d0:	e000e014 	.word	0xe000e014

080067d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067e4 <vPortEnableVFP+0x10>
 80067d8:	6801      	ldr	r1, [r0, #0]
 80067da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067de:	6001      	str	r1, [r0, #0]
 80067e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067e2:	bf00      	nop
 80067e4:	e000ed88 	.word	0xe000ed88

080067e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067ee:	f3ef 8305 	mrs	r3, IPSR
 80067f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d914      	bls.n	8006824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067fa:	4a17      	ldr	r2, [pc, #92]	; (8006858 <vPortValidateInterruptPriority+0x70>)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006804:	4b15      	ldr	r3, [pc, #84]	; (800685c <vPortValidateInterruptPriority+0x74>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	7afa      	ldrb	r2, [r7, #11]
 800680a:	429a      	cmp	r2, r3
 800680c:	d20a      	bcs.n	8006824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006824:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <vPortValidateInterruptPriority+0x78>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800682c:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <vPortValidateInterruptPriority+0x7c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d90a      	bls.n	800684a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	603b      	str	r3, [r7, #0]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <vPortValidateInterruptPriority+0x60>
	}
 800684a:	bf00      	nop
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	e000e3f0 	.word	0xe000e3f0
 800685c:	20000fb8 	.word	0x20000fb8
 8006860:	e000ed0c 	.word	0xe000ed0c
 8006864:	20000fbc 	.word	0x20000fbc

08006868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006874:	f7fe fb34 	bl	8004ee0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006878:	4b5b      	ldr	r3, [pc, #364]	; (80069e8 <pvPortMalloc+0x180>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006880:	f000 f920 	bl	8006ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006884:	4b59      	ldr	r3, [pc, #356]	; (80069ec <pvPortMalloc+0x184>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 8093 	bne.w	80069b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01d      	beq.n	80068d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006898:	2208      	movs	r2, #8
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d014      	beq.n	80068d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f023 0307 	bic.w	r3, r3, #7
 80068b0:	3308      	adds	r3, #8
 80068b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <pvPortMalloc+0x6c>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	617b      	str	r3, [r7, #20]
}
 80068d0:	bf00      	nop
 80068d2:	e7fe      	b.n	80068d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d06e      	beq.n	80069b8 <pvPortMalloc+0x150>
 80068da:	4b45      	ldr	r3, [pc, #276]	; (80069f0 <pvPortMalloc+0x188>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d869      	bhi.n	80069b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068e4:	4b43      	ldr	r3, [pc, #268]	; (80069f4 <pvPortMalloc+0x18c>)
 80068e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068e8:	4b42      	ldr	r3, [pc, #264]	; (80069f4 <pvPortMalloc+0x18c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ee:	e004      	b.n	80068fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d903      	bls.n	800690c <pvPortMalloc+0xa4>
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1f1      	bne.n	80068f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800690c:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <pvPortMalloc+0x180>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006912:	429a      	cmp	r2, r3
 8006914:	d050      	beq.n	80069b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2208      	movs	r2, #8
 800691c:	4413      	add	r3, r2
 800691e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	2308      	movs	r3, #8
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	429a      	cmp	r2, r3
 8006936:	d91f      	bls.n	8006978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4413      	add	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <pvPortMalloc+0xf8>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	613b      	str	r3, [r7, #16]
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006972:	69b8      	ldr	r0, [r7, #24]
 8006974:	f000 f908 	bl	8006b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006978:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <pvPortMalloc+0x188>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <pvPortMalloc+0x188>)
 8006984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006986:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <pvPortMalloc+0x188>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <pvPortMalloc+0x190>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d203      	bcs.n	800699a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006992:	4b17      	ldr	r3, [pc, #92]	; (80069f0 <pvPortMalloc+0x188>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a18      	ldr	r2, [pc, #96]	; (80069f8 <pvPortMalloc+0x190>)
 8006998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	4b13      	ldr	r3, [pc, #76]	; (80069ec <pvPortMalloc+0x184>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80069ae:	4b13      	ldr	r3, [pc, #76]	; (80069fc <pvPortMalloc+0x194>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	4a11      	ldr	r2, [pc, #68]	; (80069fc <pvPortMalloc+0x194>)
 80069b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069b8:	f7fe faa0 	bl	8004efc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <pvPortMalloc+0x174>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60fb      	str	r3, [r7, #12]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <pvPortMalloc+0x172>
	return pvReturn;
 80069dc:	69fb      	ldr	r3, [r7, #28]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3728      	adds	r7, #40	; 0x28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20004bc8 	.word	0x20004bc8
 80069ec:	20004bdc 	.word	0x20004bdc
 80069f0:	20004bcc 	.word	0x20004bcc
 80069f4:	20004bc0 	.word	0x20004bc0
 80069f8:	20004bd0 	.word	0x20004bd0
 80069fc:	20004bd4 	.word	0x20004bd4

08006a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d04d      	beq.n	8006aae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a12:	2308      	movs	r3, #8
 8006a14:	425b      	negs	r3, r3
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4413      	add	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	4b24      	ldr	r3, [pc, #144]	; (8006ab8 <vPortFree+0xb8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <vPortFree+0x44>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	60fb      	str	r3, [r7, #12]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <vPortFree+0x62>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	60bb      	str	r3, [r7, #8]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <vPortFree+0xb8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01e      	beq.n	8006aae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d11a      	bne.n	8006aae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <vPortFree+0xb8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	43db      	mvns	r3, r3
 8006a82:	401a      	ands	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a88:	f7fe fa2a 	bl	8004ee0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <vPortFree+0xbc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4413      	add	r3, r2
 8006a96:	4a09      	ldr	r2, [pc, #36]	; (8006abc <vPortFree+0xbc>)
 8006a98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a9a:	6938      	ldr	r0, [r7, #16]
 8006a9c:	f000 f874 	bl	8006b88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <vPortFree+0xc0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	4a06      	ldr	r2, [pc, #24]	; (8006ac0 <vPortFree+0xc0>)
 8006aa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006aaa:	f7fe fa27 	bl	8004efc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006aae:	bf00      	nop
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20004bdc 	.word	0x20004bdc
 8006abc:	20004bcc 	.word	0x20004bcc
 8006ac0:	20004bd8 	.word	0x20004bd8

08006ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006aca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ad0:	4b27      	ldr	r3, [pc, #156]	; (8006b70 <prvHeapInit+0xac>)
 8006ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3307      	adds	r3, #7
 8006ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0307 	bic.w	r3, r3, #7
 8006aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <prvHeapInit+0xac>)
 8006af4:	4413      	add	r3, r2
 8006af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006afc:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <prvHeapInit+0xb0>)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b02:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <prvHeapInit+0xb0>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b10:	2208      	movs	r2, #8
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1a9b      	subs	r3, r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0307 	bic.w	r3, r3, #7
 8006b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <prvHeapInit+0xb4>)
 8006b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b26:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <prvHeapInit+0xb4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b2e:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <prvHeapInit+0xb4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	1ad2      	subs	r2, r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b44:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <prvHeapInit+0xb4>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <prvHeapInit+0xb8>)
 8006b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <prvHeapInit+0xbc>)
 8006b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b5c:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <prvHeapInit+0xc0>)
 8006b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b62:	601a      	str	r2, [r3, #0]
}
 8006b64:	bf00      	nop
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	20000fc0 	.word	0x20000fc0
 8006b74:	20004bc0 	.word	0x20004bc0
 8006b78:	20004bc8 	.word	0x20004bc8
 8006b7c:	20004bd0 	.word	0x20004bd0
 8006b80:	20004bcc 	.word	0x20004bcc
 8006b84:	20004bdc 	.word	0x20004bdc

08006b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b90:	4b28      	ldr	r3, [pc, #160]	; (8006c34 <prvInsertBlockIntoFreeList+0xac>)
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	e002      	b.n	8006b9c <prvInsertBlockIntoFreeList+0x14>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d8f7      	bhi.n	8006b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d108      	bne.n	8006bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	441a      	add	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	441a      	add	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d118      	bne.n	8006c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <prvInsertBlockIntoFreeList+0xb0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d00d      	beq.n	8006c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	441a      	add	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e008      	b.n	8006c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <prvInsertBlockIntoFreeList+0xb0>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	e003      	b.n	8006c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d002      	beq.n	8006c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20004bc0 	.word	0x20004bc0
 8006c38:	20004bc8 	.word	0x20004bc8

08006c3c <__errno>:
 8006c3c:	4b01      	ldr	r3, [pc, #4]	; (8006c44 <__errno+0x8>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000010 	.word	0x20000010

08006c48 <std>:
 8006c48:	2300      	movs	r3, #0
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c56:	6083      	str	r3, [r0, #8]
 8006c58:	8181      	strh	r1, [r0, #12]
 8006c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c5c:	81c2      	strh	r2, [r0, #14]
 8006c5e:	6183      	str	r3, [r0, #24]
 8006c60:	4619      	mov	r1, r3
 8006c62:	2208      	movs	r2, #8
 8006c64:	305c      	adds	r0, #92	; 0x5c
 8006c66:	f000 f91a 	bl	8006e9e <memset>
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <std+0x38>)
 8006c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <std+0x3c>)
 8006c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <std+0x40>)
 8006c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <std+0x44>)
 8006c78:	6224      	str	r4, [r4, #32]
 8006c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	bf00      	nop
 8006c80:	08007b1d 	.word	0x08007b1d
 8006c84:	08007b3f 	.word	0x08007b3f
 8006c88:	08007b77 	.word	0x08007b77
 8006c8c:	08007b9b 	.word	0x08007b9b

08006c90 <_cleanup_r>:
 8006c90:	4901      	ldr	r1, [pc, #4]	; (8006c98 <_cleanup_r+0x8>)
 8006c92:	f000 b8af 	b.w	8006df4 <_fwalk_reent>
 8006c96:	bf00      	nop
 8006c98:	08008b9d 	.word	0x08008b9d

08006c9c <__sfmoreglue>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	1e4a      	subs	r2, r1, #1
 8006ca0:	2568      	movs	r5, #104	; 0x68
 8006ca2:	4355      	muls	r5, r2
 8006ca4:	460e      	mov	r6, r1
 8006ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006caa:	f000 f901 	bl	8006eb0 <_malloc_r>
 8006cae:	4604      	mov	r4, r0
 8006cb0:	b140      	cbz	r0, 8006cc4 <__sfmoreglue+0x28>
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8006cb8:	300c      	adds	r0, #12
 8006cba:	60a0      	str	r0, [r4, #8]
 8006cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc0:	f000 f8ed 	bl	8006e9e <memset>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}

08006cc8 <__sfp_lock_acquire>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	; (8006cd0 <__sfp_lock_acquire+0x8>)
 8006cca:	f000 b8d8 	b.w	8006e7e <__retarget_lock_acquire_recursive>
 8006cce:	bf00      	nop
 8006cd0:	20004fa4 	.word	0x20004fa4

08006cd4 <__sfp_lock_release>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__sfp_lock_release+0x8>)
 8006cd6:	f000 b8d3 	b.w	8006e80 <__retarget_lock_release_recursive>
 8006cda:	bf00      	nop
 8006cdc:	20004fa4 	.word	0x20004fa4

08006ce0 <__sinit_lock_acquire>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__sinit_lock_acquire+0x8>)
 8006ce2:	f000 b8cc 	b.w	8006e7e <__retarget_lock_acquire_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	20004f9f 	.word	0x20004f9f

08006cec <__sinit_lock_release>:
 8006cec:	4801      	ldr	r0, [pc, #4]	; (8006cf4 <__sinit_lock_release+0x8>)
 8006cee:	f000 b8c7 	b.w	8006e80 <__retarget_lock_release_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	20004f9f 	.word	0x20004f9f

08006cf8 <__sinit>:
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	f7ff fff0 	bl	8006ce0 <__sinit_lock_acquire>
 8006d00:	69a3      	ldr	r3, [r4, #24]
 8006d02:	b11b      	cbz	r3, 8006d0c <__sinit+0x14>
 8006d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d08:	f7ff bff0 	b.w	8006cec <__sinit_lock_release>
 8006d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d10:	6523      	str	r3, [r4, #80]	; 0x50
 8006d12:	4b13      	ldr	r3, [pc, #76]	; (8006d60 <__sinit+0x68>)
 8006d14:	4a13      	ldr	r2, [pc, #76]	; (8006d64 <__sinit+0x6c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d1a:	42a3      	cmp	r3, r4
 8006d1c:	bf04      	itt	eq
 8006d1e:	2301      	moveq	r3, #1
 8006d20:	61a3      	streq	r3, [r4, #24]
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 f820 	bl	8006d68 <__sfp>
 8006d28:	6060      	str	r0, [r4, #4]
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 f81c 	bl	8006d68 <__sfp>
 8006d30:	60a0      	str	r0, [r4, #8]
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 f818 	bl	8006d68 <__sfp>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	60e0      	str	r0, [r4, #12]
 8006d3c:	2104      	movs	r1, #4
 8006d3e:	6860      	ldr	r0, [r4, #4]
 8006d40:	f7ff ff82 	bl	8006c48 <std>
 8006d44:	68a0      	ldr	r0, [r4, #8]
 8006d46:	2201      	movs	r2, #1
 8006d48:	2109      	movs	r1, #9
 8006d4a:	f7ff ff7d 	bl	8006c48 <std>
 8006d4e:	68e0      	ldr	r0, [r4, #12]
 8006d50:	2202      	movs	r2, #2
 8006d52:	2112      	movs	r1, #18
 8006d54:	f7ff ff78 	bl	8006c48 <std>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	61a3      	str	r3, [r4, #24]
 8006d5c:	e7d2      	b.n	8006d04 <__sinit+0xc>
 8006d5e:	bf00      	nop
 8006d60:	08009e74 	.word	0x08009e74
 8006d64:	08006c91 	.word	0x08006c91

08006d68 <__sfp>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	4607      	mov	r7, r0
 8006d6c:	f7ff ffac 	bl	8006cc8 <__sfp_lock_acquire>
 8006d70:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <__sfp+0x84>)
 8006d72:	681e      	ldr	r6, [r3, #0]
 8006d74:	69b3      	ldr	r3, [r6, #24]
 8006d76:	b913      	cbnz	r3, 8006d7e <__sfp+0x16>
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7ff ffbd 	bl	8006cf8 <__sinit>
 8006d7e:	3648      	adds	r6, #72	; 0x48
 8006d80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	d503      	bpl.n	8006d90 <__sfp+0x28>
 8006d88:	6833      	ldr	r3, [r6, #0]
 8006d8a:	b30b      	cbz	r3, 8006dd0 <__sfp+0x68>
 8006d8c:	6836      	ldr	r6, [r6, #0]
 8006d8e:	e7f7      	b.n	8006d80 <__sfp+0x18>
 8006d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d94:	b9d5      	cbnz	r5, 8006dcc <__sfp+0x64>
 8006d96:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <__sfp+0x88>)
 8006d98:	60e3      	str	r3, [r4, #12]
 8006d9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d9e:	6665      	str	r5, [r4, #100]	; 0x64
 8006da0:	f000 f86c 	bl	8006e7c <__retarget_lock_init_recursive>
 8006da4:	f7ff ff96 	bl	8006cd4 <__sfp_lock_release>
 8006da8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006db0:	6025      	str	r5, [r4, #0]
 8006db2:	61a5      	str	r5, [r4, #24]
 8006db4:	2208      	movs	r2, #8
 8006db6:	4629      	mov	r1, r5
 8006db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dbc:	f000 f86f 	bl	8006e9e <memset>
 8006dc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dc8:	4620      	mov	r0, r4
 8006dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dcc:	3468      	adds	r4, #104	; 0x68
 8006dce:	e7d9      	b.n	8006d84 <__sfp+0x1c>
 8006dd0:	2104      	movs	r1, #4
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	f7ff ff62 	bl	8006c9c <__sfmoreglue>
 8006dd8:	4604      	mov	r4, r0
 8006dda:	6030      	str	r0, [r6, #0]
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d1d5      	bne.n	8006d8c <__sfp+0x24>
 8006de0:	f7ff ff78 	bl	8006cd4 <__sfp_lock_release>
 8006de4:	230c      	movs	r3, #12
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	e7ee      	b.n	8006dc8 <__sfp+0x60>
 8006dea:	bf00      	nop
 8006dec:	08009e74 	.word	0x08009e74
 8006df0:	ffff0001 	.word	0xffff0001

08006df4 <_fwalk_reent>:
 8006df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df8:	4606      	mov	r6, r0
 8006dfa:	4688      	mov	r8, r1
 8006dfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e00:	2700      	movs	r7, #0
 8006e02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e06:	f1b9 0901 	subs.w	r9, r9, #1
 8006e0a:	d505      	bpl.n	8006e18 <_fwalk_reent+0x24>
 8006e0c:	6824      	ldr	r4, [r4, #0]
 8006e0e:	2c00      	cmp	r4, #0
 8006e10:	d1f7      	bne.n	8006e02 <_fwalk_reent+0xe>
 8006e12:	4638      	mov	r0, r7
 8006e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e18:	89ab      	ldrh	r3, [r5, #12]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d907      	bls.n	8006e2e <_fwalk_reent+0x3a>
 8006e1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e22:	3301      	adds	r3, #1
 8006e24:	d003      	beq.n	8006e2e <_fwalk_reent+0x3a>
 8006e26:	4629      	mov	r1, r5
 8006e28:	4630      	mov	r0, r6
 8006e2a:	47c0      	blx	r8
 8006e2c:	4307      	orrs	r7, r0
 8006e2e:	3568      	adds	r5, #104	; 0x68
 8006e30:	e7e9      	b.n	8006e06 <_fwalk_reent+0x12>
	...

08006e34 <__libc_init_array>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	4d0d      	ldr	r5, [pc, #52]	; (8006e6c <__libc_init_array+0x38>)
 8006e38:	4c0d      	ldr	r4, [pc, #52]	; (8006e70 <__libc_init_array+0x3c>)
 8006e3a:	1b64      	subs	r4, r4, r5
 8006e3c:	10a4      	asrs	r4, r4, #2
 8006e3e:	2600      	movs	r6, #0
 8006e40:	42a6      	cmp	r6, r4
 8006e42:	d109      	bne.n	8006e58 <__libc_init_array+0x24>
 8006e44:	4d0b      	ldr	r5, [pc, #44]	; (8006e74 <__libc_init_array+0x40>)
 8006e46:	4c0c      	ldr	r4, [pc, #48]	; (8006e78 <__libc_init_array+0x44>)
 8006e48:	f002 ff2e 	bl	8009ca8 <_init>
 8006e4c:	1b64      	subs	r4, r4, r5
 8006e4e:	10a4      	asrs	r4, r4, #2
 8006e50:	2600      	movs	r6, #0
 8006e52:	42a6      	cmp	r6, r4
 8006e54:	d105      	bne.n	8006e62 <__libc_init_array+0x2e>
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5c:	4798      	blx	r3
 8006e5e:	3601      	adds	r6, #1
 8006e60:	e7ee      	b.n	8006e40 <__libc_init_array+0xc>
 8006e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e66:	4798      	blx	r3
 8006e68:	3601      	adds	r6, #1
 8006e6a:	e7f2      	b.n	8006e52 <__libc_init_array+0x1e>
 8006e6c:	0800a204 	.word	0x0800a204
 8006e70:	0800a204 	.word	0x0800a204
 8006e74:	0800a204 	.word	0x0800a204
 8006e78:	0800a208 	.word	0x0800a208

08006e7c <__retarget_lock_init_recursive>:
 8006e7c:	4770      	bx	lr

08006e7e <__retarget_lock_acquire_recursive>:
 8006e7e:	4770      	bx	lr

08006e80 <__retarget_lock_release_recursive>:
 8006e80:	4770      	bx	lr

08006e82 <memcpy>:
 8006e82:	440a      	add	r2, r1
 8006e84:	4291      	cmp	r1, r2
 8006e86:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e8a:	d100      	bne.n	8006e8e <memcpy+0xc>
 8006e8c:	4770      	bx	lr
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e98:	4291      	cmp	r1, r2
 8006e9a:	d1f9      	bne.n	8006e90 <memcpy+0xe>
 8006e9c:	bd10      	pop	{r4, pc}

08006e9e <memset>:
 8006e9e:	4402      	add	r2, r0
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d100      	bne.n	8006ea8 <memset+0xa>
 8006ea6:	4770      	bx	lr
 8006ea8:	f803 1b01 	strb.w	r1, [r3], #1
 8006eac:	e7f9      	b.n	8006ea2 <memset+0x4>
	...

08006eb0 <_malloc_r>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	1ccd      	adds	r5, r1, #3
 8006eb4:	f025 0503 	bic.w	r5, r5, #3
 8006eb8:	3508      	adds	r5, #8
 8006eba:	2d0c      	cmp	r5, #12
 8006ebc:	bf38      	it	cc
 8006ebe:	250c      	movcc	r5, #12
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	db01      	blt.n	8006eca <_malloc_r+0x1a>
 8006ec6:	42a9      	cmp	r1, r5
 8006ec8:	d903      	bls.n	8006ed2 <_malloc_r+0x22>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	6033      	str	r3, [r6, #0]
 8006ece:	2000      	movs	r0, #0
 8006ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed2:	f001 ff21 	bl	8008d18 <__malloc_lock>
 8006ed6:	4921      	ldr	r1, [pc, #132]	; (8006f5c <_malloc_r+0xac>)
 8006ed8:	680a      	ldr	r2, [r1, #0]
 8006eda:	4614      	mov	r4, r2
 8006edc:	b99c      	cbnz	r4, 8006f06 <_malloc_r+0x56>
 8006ede:	4f20      	ldr	r7, [pc, #128]	; (8006f60 <_malloc_r+0xb0>)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	b923      	cbnz	r3, 8006eee <_malloc_r+0x3e>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f000 fde8 	bl	8007abc <_sbrk_r>
 8006eec:	6038      	str	r0, [r7, #0]
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 fde3 	bl	8007abc <_sbrk_r>
 8006ef6:	1c43      	adds	r3, r0, #1
 8006ef8:	d123      	bne.n	8006f42 <_malloc_r+0x92>
 8006efa:	230c      	movs	r3, #12
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	4630      	mov	r0, r6
 8006f00:	f001 ff10 	bl	8008d24 <__malloc_unlock>
 8006f04:	e7e3      	b.n	8006ece <_malloc_r+0x1e>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	1b5b      	subs	r3, r3, r5
 8006f0a:	d417      	bmi.n	8006f3c <_malloc_r+0x8c>
 8006f0c:	2b0b      	cmp	r3, #11
 8006f0e:	d903      	bls.n	8006f18 <_malloc_r+0x68>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	441c      	add	r4, r3
 8006f14:	6025      	str	r5, [r4, #0]
 8006f16:	e004      	b.n	8006f22 <_malloc_r+0x72>
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	42a2      	cmp	r2, r4
 8006f1c:	bf0c      	ite	eq
 8006f1e:	600b      	streq	r3, [r1, #0]
 8006f20:	6053      	strne	r3, [r2, #4]
 8006f22:	4630      	mov	r0, r6
 8006f24:	f001 fefe 	bl	8008d24 <__malloc_unlock>
 8006f28:	f104 000b 	add.w	r0, r4, #11
 8006f2c:	1d23      	adds	r3, r4, #4
 8006f2e:	f020 0007 	bic.w	r0, r0, #7
 8006f32:	1ac2      	subs	r2, r0, r3
 8006f34:	d0cc      	beq.n	8006ed0 <_malloc_r+0x20>
 8006f36:	1a1b      	subs	r3, r3, r0
 8006f38:	50a3      	str	r3, [r4, r2]
 8006f3a:	e7c9      	b.n	8006ed0 <_malloc_r+0x20>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	6864      	ldr	r4, [r4, #4]
 8006f40:	e7cc      	b.n	8006edc <_malloc_r+0x2c>
 8006f42:	1cc4      	adds	r4, r0, #3
 8006f44:	f024 0403 	bic.w	r4, r4, #3
 8006f48:	42a0      	cmp	r0, r4
 8006f4a:	d0e3      	beq.n	8006f14 <_malloc_r+0x64>
 8006f4c:	1a21      	subs	r1, r4, r0
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f000 fdb4 	bl	8007abc <_sbrk_r>
 8006f54:	3001      	adds	r0, #1
 8006f56:	d1dd      	bne.n	8006f14 <_malloc_r+0x64>
 8006f58:	e7cf      	b.n	8006efa <_malloc_r+0x4a>
 8006f5a:	bf00      	nop
 8006f5c:	20004be0 	.word	0x20004be0
 8006f60:	20004be4 	.word	0x20004be4

08006f64 <__cvt>:
 8006f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f68:	ec55 4b10 	vmov	r4, r5, d0
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	460e      	mov	r6, r1
 8006f70:	4619      	mov	r1, r3
 8006f72:	462b      	mov	r3, r5
 8006f74:	bfbb      	ittet	lt
 8006f76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f7a:	461d      	movlt	r5, r3
 8006f7c:	2300      	movge	r3, #0
 8006f7e:	232d      	movlt	r3, #45	; 0x2d
 8006f80:	700b      	strb	r3, [r1, #0]
 8006f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f88:	4691      	mov	r9, r2
 8006f8a:	f023 0820 	bic.w	r8, r3, #32
 8006f8e:	bfbc      	itt	lt
 8006f90:	4622      	movlt	r2, r4
 8006f92:	4614      	movlt	r4, r2
 8006f94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f98:	d005      	beq.n	8006fa6 <__cvt+0x42>
 8006f9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f9e:	d100      	bne.n	8006fa2 <__cvt+0x3e>
 8006fa0:	3601      	adds	r6, #1
 8006fa2:	2102      	movs	r1, #2
 8006fa4:	e000      	b.n	8006fa8 <__cvt+0x44>
 8006fa6:	2103      	movs	r1, #3
 8006fa8:	ab03      	add	r3, sp, #12
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	ab02      	add	r3, sp, #8
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	ec45 4b10 	vmov	d0, r4, r5
 8006fb4:	4653      	mov	r3, sl
 8006fb6:	4632      	mov	r2, r6
 8006fb8:	f000 ff7e 	bl	8007eb8 <_dtoa_r>
 8006fbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	d102      	bne.n	8006fca <__cvt+0x66>
 8006fc4:	f019 0f01 	tst.w	r9, #1
 8006fc8:	d022      	beq.n	8007010 <__cvt+0xac>
 8006fca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fce:	eb07 0906 	add.w	r9, r7, r6
 8006fd2:	d110      	bne.n	8006ff6 <__cvt+0x92>
 8006fd4:	783b      	ldrb	r3, [r7, #0]
 8006fd6:	2b30      	cmp	r3, #48	; 0x30
 8006fd8:	d10a      	bne.n	8006ff0 <__cvt+0x8c>
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 fd79 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fe6:	b918      	cbnz	r0, 8006ff0 <__cvt+0x8c>
 8006fe8:	f1c6 0601 	rsb	r6, r6, #1
 8006fec:	f8ca 6000 	str.w	r6, [sl]
 8006ff0:	f8da 3000 	ldr.w	r3, [sl]
 8006ff4:	4499      	add	r9, r3
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f7f9 fd6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007002:	b108      	cbz	r0, 8007008 <__cvt+0xa4>
 8007004:	f8cd 900c 	str.w	r9, [sp, #12]
 8007008:	2230      	movs	r2, #48	; 0x30
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	454b      	cmp	r3, r9
 800700e:	d307      	bcc.n	8007020 <__cvt+0xbc>
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007014:	1bdb      	subs	r3, r3, r7
 8007016:	4638      	mov	r0, r7
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	b004      	add	sp, #16
 800701c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007020:	1c59      	adds	r1, r3, #1
 8007022:	9103      	str	r1, [sp, #12]
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	e7f0      	b.n	800700a <__cvt+0xa6>

08007028 <__exponent>:
 8007028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800702a:	4603      	mov	r3, r0
 800702c:	2900      	cmp	r1, #0
 800702e:	bfb8      	it	lt
 8007030:	4249      	neglt	r1, r1
 8007032:	f803 2b02 	strb.w	r2, [r3], #2
 8007036:	bfb4      	ite	lt
 8007038:	222d      	movlt	r2, #45	; 0x2d
 800703a:	222b      	movge	r2, #43	; 0x2b
 800703c:	2909      	cmp	r1, #9
 800703e:	7042      	strb	r2, [r0, #1]
 8007040:	dd2a      	ble.n	8007098 <__exponent+0x70>
 8007042:	f10d 0407 	add.w	r4, sp, #7
 8007046:	46a4      	mov	ip, r4
 8007048:	270a      	movs	r7, #10
 800704a:	46a6      	mov	lr, r4
 800704c:	460a      	mov	r2, r1
 800704e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007052:	fb07 1516 	mls	r5, r7, r6, r1
 8007056:	3530      	adds	r5, #48	; 0x30
 8007058:	2a63      	cmp	r2, #99	; 0x63
 800705a:	f104 34ff 	add.w	r4, r4, #4294967295
 800705e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007062:	4631      	mov	r1, r6
 8007064:	dcf1      	bgt.n	800704a <__exponent+0x22>
 8007066:	3130      	adds	r1, #48	; 0x30
 8007068:	f1ae 0502 	sub.w	r5, lr, #2
 800706c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007070:	1c44      	adds	r4, r0, #1
 8007072:	4629      	mov	r1, r5
 8007074:	4561      	cmp	r1, ip
 8007076:	d30a      	bcc.n	800708e <__exponent+0x66>
 8007078:	f10d 0209 	add.w	r2, sp, #9
 800707c:	eba2 020e 	sub.w	r2, r2, lr
 8007080:	4565      	cmp	r5, ip
 8007082:	bf88      	it	hi
 8007084:	2200      	movhi	r2, #0
 8007086:	4413      	add	r3, r2
 8007088:	1a18      	subs	r0, r3, r0
 800708a:	b003      	add	sp, #12
 800708c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800708e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007092:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007096:	e7ed      	b.n	8007074 <__exponent+0x4c>
 8007098:	2330      	movs	r3, #48	; 0x30
 800709a:	3130      	adds	r1, #48	; 0x30
 800709c:	7083      	strb	r3, [r0, #2]
 800709e:	70c1      	strb	r1, [r0, #3]
 80070a0:	1d03      	adds	r3, r0, #4
 80070a2:	e7f1      	b.n	8007088 <__exponent+0x60>

080070a4 <_printf_float>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	ed2d 8b02 	vpush	{d8}
 80070ac:	b08d      	sub	sp, #52	; 0x34
 80070ae:	460c      	mov	r4, r1
 80070b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070b4:	4616      	mov	r6, r2
 80070b6:	461f      	mov	r7, r3
 80070b8:	4605      	mov	r5, r0
 80070ba:	f001 fdab 	bl	8008c14 <_localeconv_r>
 80070be:	f8d0 a000 	ldr.w	sl, [r0]
 80070c2:	4650      	mov	r0, sl
 80070c4:	f7f9 f88c 	bl	80001e0 <strlen>
 80070c8:	2300      	movs	r3, #0
 80070ca:	930a      	str	r3, [sp, #40]	; 0x28
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	9305      	str	r3, [sp, #20]
 80070d0:	f8d8 3000 	ldr.w	r3, [r8]
 80070d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070d8:	3307      	adds	r3, #7
 80070da:	f023 0307 	bic.w	r3, r3, #7
 80070de:	f103 0208 	add.w	r2, r3, #8
 80070e2:	f8c8 2000 	str.w	r2, [r8]
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070f6:	9307      	str	r3, [sp, #28]
 80070f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80070fc:	ee08 0a10 	vmov	s16, r0
 8007100:	4b9f      	ldr	r3, [pc, #636]	; (8007380 <_printf_float+0x2dc>)
 8007102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007106:	f04f 32ff 	mov.w	r2, #4294967295
 800710a:	f7f9 fd17 	bl	8000b3c <__aeabi_dcmpun>
 800710e:	bb88      	cbnz	r0, 8007174 <_printf_float+0xd0>
 8007110:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007114:	4b9a      	ldr	r3, [pc, #616]	; (8007380 <_printf_float+0x2dc>)
 8007116:	f04f 32ff 	mov.w	r2, #4294967295
 800711a:	f7f9 fcf1 	bl	8000b00 <__aeabi_dcmple>
 800711e:	bb48      	cbnz	r0, 8007174 <_printf_float+0xd0>
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	4640      	mov	r0, r8
 8007126:	4649      	mov	r1, r9
 8007128:	f7f9 fce0 	bl	8000aec <__aeabi_dcmplt>
 800712c:	b110      	cbz	r0, 8007134 <_printf_float+0x90>
 800712e:	232d      	movs	r3, #45	; 0x2d
 8007130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007134:	4b93      	ldr	r3, [pc, #588]	; (8007384 <_printf_float+0x2e0>)
 8007136:	4894      	ldr	r0, [pc, #592]	; (8007388 <_printf_float+0x2e4>)
 8007138:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800713c:	bf94      	ite	ls
 800713e:	4698      	movls	r8, r3
 8007140:	4680      	movhi	r8, r0
 8007142:	2303      	movs	r3, #3
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	9b05      	ldr	r3, [sp, #20]
 8007148:	f023 0204 	bic.w	r2, r3, #4
 800714c:	6022      	str	r2, [r4, #0]
 800714e:	f04f 0900 	mov.w	r9, #0
 8007152:	9700      	str	r7, [sp, #0]
 8007154:	4633      	mov	r3, r6
 8007156:	aa0b      	add	r2, sp, #44	; 0x2c
 8007158:	4621      	mov	r1, r4
 800715a:	4628      	mov	r0, r5
 800715c:	f000 f9d8 	bl	8007510 <_printf_common>
 8007160:	3001      	adds	r0, #1
 8007162:	f040 8090 	bne.w	8007286 <_printf_float+0x1e2>
 8007166:	f04f 30ff 	mov.w	r0, #4294967295
 800716a:	b00d      	add	sp, #52	; 0x34
 800716c:	ecbd 8b02 	vpop	{d8}
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007174:	4642      	mov	r2, r8
 8007176:	464b      	mov	r3, r9
 8007178:	4640      	mov	r0, r8
 800717a:	4649      	mov	r1, r9
 800717c:	f7f9 fcde 	bl	8000b3c <__aeabi_dcmpun>
 8007180:	b140      	cbz	r0, 8007194 <_printf_float+0xf0>
 8007182:	464b      	mov	r3, r9
 8007184:	2b00      	cmp	r3, #0
 8007186:	bfbc      	itt	lt
 8007188:	232d      	movlt	r3, #45	; 0x2d
 800718a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800718e:	487f      	ldr	r0, [pc, #508]	; (800738c <_printf_float+0x2e8>)
 8007190:	4b7f      	ldr	r3, [pc, #508]	; (8007390 <_printf_float+0x2ec>)
 8007192:	e7d1      	b.n	8007138 <_printf_float+0x94>
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800719a:	9206      	str	r2, [sp, #24]
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	d13f      	bne.n	8007220 <_printf_float+0x17c>
 80071a0:	2306      	movs	r3, #6
 80071a2:	6063      	str	r3, [r4, #4]
 80071a4:	9b05      	ldr	r3, [sp, #20]
 80071a6:	6861      	ldr	r1, [r4, #4]
 80071a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071ac:	2300      	movs	r3, #0
 80071ae:	9303      	str	r3, [sp, #12]
 80071b0:	ab0a      	add	r3, sp, #40	; 0x28
 80071b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071b6:	ab09      	add	r3, sp, #36	; 0x24
 80071b8:	ec49 8b10 	vmov	d0, r8, r9
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	6022      	str	r2, [r4, #0]
 80071c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071c4:	4628      	mov	r0, r5
 80071c6:	f7ff fecd 	bl	8006f64 <__cvt>
 80071ca:	9b06      	ldr	r3, [sp, #24]
 80071cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071ce:	2b47      	cmp	r3, #71	; 0x47
 80071d0:	4680      	mov	r8, r0
 80071d2:	d108      	bne.n	80071e6 <_printf_float+0x142>
 80071d4:	1cc8      	adds	r0, r1, #3
 80071d6:	db02      	blt.n	80071de <_printf_float+0x13a>
 80071d8:	6863      	ldr	r3, [r4, #4]
 80071da:	4299      	cmp	r1, r3
 80071dc:	dd41      	ble.n	8007262 <_printf_float+0x1be>
 80071de:	f1ab 0b02 	sub.w	fp, fp, #2
 80071e2:	fa5f fb8b 	uxtb.w	fp, fp
 80071e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071ea:	d820      	bhi.n	800722e <_printf_float+0x18a>
 80071ec:	3901      	subs	r1, #1
 80071ee:	465a      	mov	r2, fp
 80071f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071f4:	9109      	str	r1, [sp, #36]	; 0x24
 80071f6:	f7ff ff17 	bl	8007028 <__exponent>
 80071fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071fc:	1813      	adds	r3, r2, r0
 80071fe:	2a01      	cmp	r2, #1
 8007200:	4681      	mov	r9, r0
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	dc02      	bgt.n	800720c <_printf_float+0x168>
 8007206:	6822      	ldr	r2, [r4, #0]
 8007208:	07d2      	lsls	r2, r2, #31
 800720a:	d501      	bpl.n	8007210 <_printf_float+0x16c>
 800720c:	3301      	adds	r3, #1
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007214:	2b00      	cmp	r3, #0
 8007216:	d09c      	beq.n	8007152 <_printf_float+0xae>
 8007218:	232d      	movs	r3, #45	; 0x2d
 800721a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800721e:	e798      	b.n	8007152 <_printf_float+0xae>
 8007220:	9a06      	ldr	r2, [sp, #24]
 8007222:	2a47      	cmp	r2, #71	; 0x47
 8007224:	d1be      	bne.n	80071a4 <_printf_float+0x100>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1bc      	bne.n	80071a4 <_printf_float+0x100>
 800722a:	2301      	movs	r3, #1
 800722c:	e7b9      	b.n	80071a2 <_printf_float+0xfe>
 800722e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007232:	d118      	bne.n	8007266 <_printf_float+0x1c2>
 8007234:	2900      	cmp	r1, #0
 8007236:	6863      	ldr	r3, [r4, #4]
 8007238:	dd0b      	ble.n	8007252 <_printf_float+0x1ae>
 800723a:	6121      	str	r1, [r4, #16]
 800723c:	b913      	cbnz	r3, 8007244 <_printf_float+0x1a0>
 800723e:	6822      	ldr	r2, [r4, #0]
 8007240:	07d0      	lsls	r0, r2, #31
 8007242:	d502      	bpl.n	800724a <_printf_float+0x1a6>
 8007244:	3301      	adds	r3, #1
 8007246:	440b      	add	r3, r1
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	65a1      	str	r1, [r4, #88]	; 0x58
 800724c:	f04f 0900 	mov.w	r9, #0
 8007250:	e7de      	b.n	8007210 <_printf_float+0x16c>
 8007252:	b913      	cbnz	r3, 800725a <_printf_float+0x1b6>
 8007254:	6822      	ldr	r2, [r4, #0]
 8007256:	07d2      	lsls	r2, r2, #31
 8007258:	d501      	bpl.n	800725e <_printf_float+0x1ba>
 800725a:	3302      	adds	r3, #2
 800725c:	e7f4      	b.n	8007248 <_printf_float+0x1a4>
 800725e:	2301      	movs	r3, #1
 8007260:	e7f2      	b.n	8007248 <_printf_float+0x1a4>
 8007262:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007268:	4299      	cmp	r1, r3
 800726a:	db05      	blt.n	8007278 <_printf_float+0x1d4>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	6121      	str	r1, [r4, #16]
 8007270:	07d8      	lsls	r0, r3, #31
 8007272:	d5ea      	bpl.n	800724a <_printf_float+0x1a6>
 8007274:	1c4b      	adds	r3, r1, #1
 8007276:	e7e7      	b.n	8007248 <_printf_float+0x1a4>
 8007278:	2900      	cmp	r1, #0
 800727a:	bfd4      	ite	le
 800727c:	f1c1 0202 	rsble	r2, r1, #2
 8007280:	2201      	movgt	r2, #1
 8007282:	4413      	add	r3, r2
 8007284:	e7e0      	b.n	8007248 <_printf_float+0x1a4>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	055a      	lsls	r2, r3, #21
 800728a:	d407      	bmi.n	800729c <_printf_float+0x1f8>
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	4642      	mov	r2, r8
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	d12c      	bne.n	80072f4 <_printf_float+0x250>
 800729a:	e764      	b.n	8007166 <_printf_float+0xc2>
 800729c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072a0:	f240 80e0 	bls.w	8007464 <_printf_float+0x3c0>
 80072a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072a8:	2200      	movs	r2, #0
 80072aa:	2300      	movs	r3, #0
 80072ac:	f7f9 fc14 	bl	8000ad8 <__aeabi_dcmpeq>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d034      	beq.n	800731e <_printf_float+0x27a>
 80072b4:	4a37      	ldr	r2, [pc, #220]	; (8007394 <_printf_float+0x2f0>)
 80072b6:	2301      	movs	r3, #1
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	f43f af51 	beq.w	8007166 <_printf_float+0xc2>
 80072c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072c8:	429a      	cmp	r2, r3
 80072ca:	db02      	blt.n	80072d2 <_printf_float+0x22e>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	07d8      	lsls	r0, r3, #31
 80072d0:	d510      	bpl.n	80072f4 <_printf_float+0x250>
 80072d2:	ee18 3a10 	vmov	r3, s16
 80072d6:	4652      	mov	r2, sl
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	f43f af41 	beq.w	8007166 <_printf_float+0xc2>
 80072e4:	f04f 0800 	mov.w	r8, #0
 80072e8:	f104 091a 	add.w	r9, r4, #26
 80072ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ee:	3b01      	subs	r3, #1
 80072f0:	4543      	cmp	r3, r8
 80072f2:	dc09      	bgt.n	8007308 <_printf_float+0x264>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	079b      	lsls	r3, r3, #30
 80072f8:	f100 8105 	bmi.w	8007506 <_printf_float+0x462>
 80072fc:	68e0      	ldr	r0, [r4, #12]
 80072fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007300:	4298      	cmp	r0, r3
 8007302:	bfb8      	it	lt
 8007304:	4618      	movlt	r0, r3
 8007306:	e730      	b.n	800716a <_printf_float+0xc6>
 8007308:	2301      	movs	r3, #1
 800730a:	464a      	mov	r2, r9
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	47b8      	blx	r7
 8007312:	3001      	adds	r0, #1
 8007314:	f43f af27 	beq.w	8007166 <_printf_float+0xc2>
 8007318:	f108 0801 	add.w	r8, r8, #1
 800731c:	e7e6      	b.n	80072ec <_printf_float+0x248>
 800731e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	dc39      	bgt.n	8007398 <_printf_float+0x2f4>
 8007324:	4a1b      	ldr	r2, [pc, #108]	; (8007394 <_printf_float+0x2f0>)
 8007326:	2301      	movs	r3, #1
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f af19 	beq.w	8007166 <_printf_float+0xc2>
 8007334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007338:	4313      	orrs	r3, r2
 800733a:	d102      	bne.n	8007342 <_printf_float+0x29e>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	07d9      	lsls	r1, r3, #31
 8007340:	d5d8      	bpl.n	80072f4 <_printf_float+0x250>
 8007342:	ee18 3a10 	vmov	r3, s16
 8007346:	4652      	mov	r2, sl
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f af09 	beq.w	8007166 <_printf_float+0xc2>
 8007354:	f04f 0900 	mov.w	r9, #0
 8007358:	f104 0a1a 	add.w	sl, r4, #26
 800735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735e:	425b      	negs	r3, r3
 8007360:	454b      	cmp	r3, r9
 8007362:	dc01      	bgt.n	8007368 <_printf_float+0x2c4>
 8007364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007366:	e792      	b.n	800728e <_printf_float+0x1ea>
 8007368:	2301      	movs	r3, #1
 800736a:	4652      	mov	r2, sl
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	f43f aef7 	beq.w	8007166 <_printf_float+0xc2>
 8007378:	f109 0901 	add.w	r9, r9, #1
 800737c:	e7ee      	b.n	800735c <_printf_float+0x2b8>
 800737e:	bf00      	nop
 8007380:	7fefffff 	.word	0x7fefffff
 8007384:	08009e78 	.word	0x08009e78
 8007388:	08009e7c 	.word	0x08009e7c
 800738c:	08009e84 	.word	0x08009e84
 8007390:	08009e80 	.word	0x08009e80
 8007394:	08009e88 	.word	0x08009e88
 8007398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800739a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800739c:	429a      	cmp	r2, r3
 800739e:	bfa8      	it	ge
 80073a0:	461a      	movge	r2, r3
 80073a2:	2a00      	cmp	r2, #0
 80073a4:	4691      	mov	r9, r2
 80073a6:	dc37      	bgt.n	8007418 <_printf_float+0x374>
 80073a8:	f04f 0b00 	mov.w	fp, #0
 80073ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073b0:	f104 021a 	add.w	r2, r4, #26
 80073b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	eba3 0309 	sub.w	r3, r3, r9
 80073bc:	455b      	cmp	r3, fp
 80073be:	dc33      	bgt.n	8007428 <_printf_float+0x384>
 80073c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073c4:	429a      	cmp	r2, r3
 80073c6:	db3b      	blt.n	8007440 <_printf_float+0x39c>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	07da      	lsls	r2, r3, #31
 80073cc:	d438      	bmi.n	8007440 <_printf_float+0x39c>
 80073ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073d0:	9b05      	ldr	r3, [sp, #20]
 80073d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	eba2 0901 	sub.w	r9, r2, r1
 80073da:	4599      	cmp	r9, r3
 80073dc:	bfa8      	it	ge
 80073de:	4699      	movge	r9, r3
 80073e0:	f1b9 0f00 	cmp.w	r9, #0
 80073e4:	dc35      	bgt.n	8007452 <_printf_float+0x3ae>
 80073e6:	f04f 0800 	mov.w	r8, #0
 80073ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ee:	f104 0a1a 	add.w	sl, r4, #26
 80073f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	eba3 0309 	sub.w	r3, r3, r9
 80073fc:	4543      	cmp	r3, r8
 80073fe:	f77f af79 	ble.w	80072f4 <_printf_float+0x250>
 8007402:	2301      	movs	r3, #1
 8007404:	4652      	mov	r2, sl
 8007406:	4631      	mov	r1, r6
 8007408:	4628      	mov	r0, r5
 800740a:	47b8      	blx	r7
 800740c:	3001      	adds	r0, #1
 800740e:	f43f aeaa 	beq.w	8007166 <_printf_float+0xc2>
 8007412:	f108 0801 	add.w	r8, r8, #1
 8007416:	e7ec      	b.n	80073f2 <_printf_float+0x34e>
 8007418:	4613      	mov	r3, r2
 800741a:	4631      	mov	r1, r6
 800741c:	4642      	mov	r2, r8
 800741e:	4628      	mov	r0, r5
 8007420:	47b8      	blx	r7
 8007422:	3001      	adds	r0, #1
 8007424:	d1c0      	bne.n	80073a8 <_printf_float+0x304>
 8007426:	e69e      	b.n	8007166 <_printf_float+0xc2>
 8007428:	2301      	movs	r3, #1
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	9205      	str	r2, [sp, #20]
 8007430:	47b8      	blx	r7
 8007432:	3001      	adds	r0, #1
 8007434:	f43f ae97 	beq.w	8007166 <_printf_float+0xc2>
 8007438:	9a05      	ldr	r2, [sp, #20]
 800743a:	f10b 0b01 	add.w	fp, fp, #1
 800743e:	e7b9      	b.n	80073b4 <_printf_float+0x310>
 8007440:	ee18 3a10 	vmov	r3, s16
 8007444:	4652      	mov	r2, sl
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	d1be      	bne.n	80073ce <_printf_float+0x32a>
 8007450:	e689      	b.n	8007166 <_printf_float+0xc2>
 8007452:	9a05      	ldr	r2, [sp, #20]
 8007454:	464b      	mov	r3, r9
 8007456:	4442      	add	r2, r8
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	d1c1      	bne.n	80073e6 <_printf_float+0x342>
 8007462:	e680      	b.n	8007166 <_printf_float+0xc2>
 8007464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007466:	2a01      	cmp	r2, #1
 8007468:	dc01      	bgt.n	800746e <_printf_float+0x3ca>
 800746a:	07db      	lsls	r3, r3, #31
 800746c:	d538      	bpl.n	80074e0 <_printf_float+0x43c>
 800746e:	2301      	movs	r3, #1
 8007470:	4642      	mov	r2, r8
 8007472:	4631      	mov	r1, r6
 8007474:	4628      	mov	r0, r5
 8007476:	47b8      	blx	r7
 8007478:	3001      	adds	r0, #1
 800747a:	f43f ae74 	beq.w	8007166 <_printf_float+0xc2>
 800747e:	ee18 3a10 	vmov	r3, s16
 8007482:	4652      	mov	r2, sl
 8007484:	4631      	mov	r1, r6
 8007486:	4628      	mov	r0, r5
 8007488:	47b8      	blx	r7
 800748a:	3001      	adds	r0, #1
 800748c:	f43f ae6b 	beq.w	8007166 <_printf_float+0xc2>
 8007490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007494:	2200      	movs	r2, #0
 8007496:	2300      	movs	r3, #0
 8007498:	f7f9 fb1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800749c:	b9d8      	cbnz	r0, 80074d6 <_printf_float+0x432>
 800749e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a0:	f108 0201 	add.w	r2, r8, #1
 80074a4:	3b01      	subs	r3, #1
 80074a6:	4631      	mov	r1, r6
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b8      	blx	r7
 80074ac:	3001      	adds	r0, #1
 80074ae:	d10e      	bne.n	80074ce <_printf_float+0x42a>
 80074b0:	e659      	b.n	8007166 <_printf_float+0xc2>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4652      	mov	r2, sl
 80074b6:	4631      	mov	r1, r6
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b8      	blx	r7
 80074bc:	3001      	adds	r0, #1
 80074be:	f43f ae52 	beq.w	8007166 <_printf_float+0xc2>
 80074c2:	f108 0801 	add.w	r8, r8, #1
 80074c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c8:	3b01      	subs	r3, #1
 80074ca:	4543      	cmp	r3, r8
 80074cc:	dcf1      	bgt.n	80074b2 <_printf_float+0x40e>
 80074ce:	464b      	mov	r3, r9
 80074d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074d4:	e6dc      	b.n	8007290 <_printf_float+0x1ec>
 80074d6:	f04f 0800 	mov.w	r8, #0
 80074da:	f104 0a1a 	add.w	sl, r4, #26
 80074de:	e7f2      	b.n	80074c6 <_printf_float+0x422>
 80074e0:	2301      	movs	r3, #1
 80074e2:	4642      	mov	r2, r8
 80074e4:	e7df      	b.n	80074a6 <_printf_float+0x402>
 80074e6:	2301      	movs	r3, #1
 80074e8:	464a      	mov	r2, r9
 80074ea:	4631      	mov	r1, r6
 80074ec:	4628      	mov	r0, r5
 80074ee:	47b8      	blx	r7
 80074f0:	3001      	adds	r0, #1
 80074f2:	f43f ae38 	beq.w	8007166 <_printf_float+0xc2>
 80074f6:	f108 0801 	add.w	r8, r8, #1
 80074fa:	68e3      	ldr	r3, [r4, #12]
 80074fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074fe:	1a5b      	subs	r3, r3, r1
 8007500:	4543      	cmp	r3, r8
 8007502:	dcf0      	bgt.n	80074e6 <_printf_float+0x442>
 8007504:	e6fa      	b.n	80072fc <_printf_float+0x258>
 8007506:	f04f 0800 	mov.w	r8, #0
 800750a:	f104 0919 	add.w	r9, r4, #25
 800750e:	e7f4      	b.n	80074fa <_printf_float+0x456>

08007510 <_printf_common>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	4616      	mov	r6, r2
 8007516:	4699      	mov	r9, r3
 8007518:	688a      	ldr	r2, [r1, #8]
 800751a:	690b      	ldr	r3, [r1, #16]
 800751c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007520:	4293      	cmp	r3, r2
 8007522:	bfb8      	it	lt
 8007524:	4613      	movlt	r3, r2
 8007526:	6033      	str	r3, [r6, #0]
 8007528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800752c:	4607      	mov	r7, r0
 800752e:	460c      	mov	r4, r1
 8007530:	b10a      	cbz	r2, 8007536 <_printf_common+0x26>
 8007532:	3301      	adds	r3, #1
 8007534:	6033      	str	r3, [r6, #0]
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	0699      	lsls	r1, r3, #26
 800753a:	bf42      	ittt	mi
 800753c:	6833      	ldrmi	r3, [r6, #0]
 800753e:	3302      	addmi	r3, #2
 8007540:	6033      	strmi	r3, [r6, #0]
 8007542:	6825      	ldr	r5, [r4, #0]
 8007544:	f015 0506 	ands.w	r5, r5, #6
 8007548:	d106      	bne.n	8007558 <_printf_common+0x48>
 800754a:	f104 0a19 	add.w	sl, r4, #25
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	6832      	ldr	r2, [r6, #0]
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	42ab      	cmp	r3, r5
 8007556:	dc26      	bgt.n	80075a6 <_printf_common+0x96>
 8007558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800755c:	1e13      	subs	r3, r2, #0
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	bf18      	it	ne
 8007562:	2301      	movne	r3, #1
 8007564:	0692      	lsls	r2, r2, #26
 8007566:	d42b      	bmi.n	80075c0 <_printf_common+0xb0>
 8007568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800756c:	4649      	mov	r1, r9
 800756e:	4638      	mov	r0, r7
 8007570:	47c0      	blx	r8
 8007572:	3001      	adds	r0, #1
 8007574:	d01e      	beq.n	80075b4 <_printf_common+0xa4>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	68e5      	ldr	r5, [r4, #12]
 800757a:	6832      	ldr	r2, [r6, #0]
 800757c:	f003 0306 	and.w	r3, r3, #6
 8007580:	2b04      	cmp	r3, #4
 8007582:	bf08      	it	eq
 8007584:	1aad      	subeq	r5, r5, r2
 8007586:	68a3      	ldr	r3, [r4, #8]
 8007588:	6922      	ldr	r2, [r4, #16]
 800758a:	bf0c      	ite	eq
 800758c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007590:	2500      	movne	r5, #0
 8007592:	4293      	cmp	r3, r2
 8007594:	bfc4      	itt	gt
 8007596:	1a9b      	subgt	r3, r3, r2
 8007598:	18ed      	addgt	r5, r5, r3
 800759a:	2600      	movs	r6, #0
 800759c:	341a      	adds	r4, #26
 800759e:	42b5      	cmp	r5, r6
 80075a0:	d11a      	bne.n	80075d8 <_printf_common+0xc8>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e008      	b.n	80075b8 <_printf_common+0xa8>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4652      	mov	r2, sl
 80075aa:	4649      	mov	r1, r9
 80075ac:	4638      	mov	r0, r7
 80075ae:	47c0      	blx	r8
 80075b0:	3001      	adds	r0, #1
 80075b2:	d103      	bne.n	80075bc <_printf_common+0xac>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075bc:	3501      	adds	r5, #1
 80075be:	e7c6      	b.n	800754e <_printf_common+0x3e>
 80075c0:	18e1      	adds	r1, r4, r3
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	2030      	movs	r0, #48	; 0x30
 80075c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075ca:	4422      	add	r2, r4
 80075cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075d4:	3302      	adds	r3, #2
 80075d6:	e7c7      	b.n	8007568 <_printf_common+0x58>
 80075d8:	2301      	movs	r3, #1
 80075da:	4622      	mov	r2, r4
 80075dc:	4649      	mov	r1, r9
 80075de:	4638      	mov	r0, r7
 80075e0:	47c0      	blx	r8
 80075e2:	3001      	adds	r0, #1
 80075e4:	d0e6      	beq.n	80075b4 <_printf_common+0xa4>
 80075e6:	3601      	adds	r6, #1
 80075e8:	e7d9      	b.n	800759e <_printf_common+0x8e>
	...

080075ec <_printf_i>:
 80075ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f0:	460c      	mov	r4, r1
 80075f2:	4691      	mov	r9, r2
 80075f4:	7e27      	ldrb	r7, [r4, #24]
 80075f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075f8:	2f78      	cmp	r7, #120	; 0x78
 80075fa:	4680      	mov	r8, r0
 80075fc:	469a      	mov	sl, r3
 80075fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007602:	d807      	bhi.n	8007614 <_printf_i+0x28>
 8007604:	2f62      	cmp	r7, #98	; 0x62
 8007606:	d80a      	bhi.n	800761e <_printf_i+0x32>
 8007608:	2f00      	cmp	r7, #0
 800760a:	f000 80d8 	beq.w	80077be <_printf_i+0x1d2>
 800760e:	2f58      	cmp	r7, #88	; 0x58
 8007610:	f000 80a3 	beq.w	800775a <_printf_i+0x16e>
 8007614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800761c:	e03a      	b.n	8007694 <_printf_i+0xa8>
 800761e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007622:	2b15      	cmp	r3, #21
 8007624:	d8f6      	bhi.n	8007614 <_printf_i+0x28>
 8007626:	a001      	add	r0, pc, #4	; (adr r0, 800762c <_printf_i+0x40>)
 8007628:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800762c:	08007685 	.word	0x08007685
 8007630:	08007699 	.word	0x08007699
 8007634:	08007615 	.word	0x08007615
 8007638:	08007615 	.word	0x08007615
 800763c:	08007615 	.word	0x08007615
 8007640:	08007615 	.word	0x08007615
 8007644:	08007699 	.word	0x08007699
 8007648:	08007615 	.word	0x08007615
 800764c:	08007615 	.word	0x08007615
 8007650:	08007615 	.word	0x08007615
 8007654:	08007615 	.word	0x08007615
 8007658:	080077a5 	.word	0x080077a5
 800765c:	080076c9 	.word	0x080076c9
 8007660:	08007787 	.word	0x08007787
 8007664:	08007615 	.word	0x08007615
 8007668:	08007615 	.word	0x08007615
 800766c:	080077c7 	.word	0x080077c7
 8007670:	08007615 	.word	0x08007615
 8007674:	080076c9 	.word	0x080076c9
 8007678:	08007615 	.word	0x08007615
 800767c:	08007615 	.word	0x08007615
 8007680:	0800778f 	.word	0x0800778f
 8007684:	680b      	ldr	r3, [r1, #0]
 8007686:	1d1a      	adds	r2, r3, #4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	600a      	str	r2, [r1, #0]
 800768c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007694:	2301      	movs	r3, #1
 8007696:	e0a3      	b.n	80077e0 <_printf_i+0x1f4>
 8007698:	6825      	ldr	r5, [r4, #0]
 800769a:	6808      	ldr	r0, [r1, #0]
 800769c:	062e      	lsls	r6, r5, #24
 800769e:	f100 0304 	add.w	r3, r0, #4
 80076a2:	d50a      	bpl.n	80076ba <_printf_i+0xce>
 80076a4:	6805      	ldr	r5, [r0, #0]
 80076a6:	600b      	str	r3, [r1, #0]
 80076a8:	2d00      	cmp	r5, #0
 80076aa:	da03      	bge.n	80076b4 <_printf_i+0xc8>
 80076ac:	232d      	movs	r3, #45	; 0x2d
 80076ae:	426d      	negs	r5, r5
 80076b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b4:	485e      	ldr	r0, [pc, #376]	; (8007830 <_printf_i+0x244>)
 80076b6:	230a      	movs	r3, #10
 80076b8:	e019      	b.n	80076ee <_printf_i+0x102>
 80076ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076be:	6805      	ldr	r5, [r0, #0]
 80076c0:	600b      	str	r3, [r1, #0]
 80076c2:	bf18      	it	ne
 80076c4:	b22d      	sxthne	r5, r5
 80076c6:	e7ef      	b.n	80076a8 <_printf_i+0xbc>
 80076c8:	680b      	ldr	r3, [r1, #0]
 80076ca:	6825      	ldr	r5, [r4, #0]
 80076cc:	1d18      	adds	r0, r3, #4
 80076ce:	6008      	str	r0, [r1, #0]
 80076d0:	0628      	lsls	r0, r5, #24
 80076d2:	d501      	bpl.n	80076d8 <_printf_i+0xec>
 80076d4:	681d      	ldr	r5, [r3, #0]
 80076d6:	e002      	b.n	80076de <_printf_i+0xf2>
 80076d8:	0669      	lsls	r1, r5, #25
 80076da:	d5fb      	bpl.n	80076d4 <_printf_i+0xe8>
 80076dc:	881d      	ldrh	r5, [r3, #0]
 80076de:	4854      	ldr	r0, [pc, #336]	; (8007830 <_printf_i+0x244>)
 80076e0:	2f6f      	cmp	r7, #111	; 0x6f
 80076e2:	bf0c      	ite	eq
 80076e4:	2308      	moveq	r3, #8
 80076e6:	230a      	movne	r3, #10
 80076e8:	2100      	movs	r1, #0
 80076ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ee:	6866      	ldr	r6, [r4, #4]
 80076f0:	60a6      	str	r6, [r4, #8]
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	bfa2      	ittt	ge
 80076f6:	6821      	ldrge	r1, [r4, #0]
 80076f8:	f021 0104 	bicge.w	r1, r1, #4
 80076fc:	6021      	strge	r1, [r4, #0]
 80076fe:	b90d      	cbnz	r5, 8007704 <_printf_i+0x118>
 8007700:	2e00      	cmp	r6, #0
 8007702:	d04d      	beq.n	80077a0 <_printf_i+0x1b4>
 8007704:	4616      	mov	r6, r2
 8007706:	fbb5 f1f3 	udiv	r1, r5, r3
 800770a:	fb03 5711 	mls	r7, r3, r1, r5
 800770e:	5dc7      	ldrb	r7, [r0, r7]
 8007710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007714:	462f      	mov	r7, r5
 8007716:	42bb      	cmp	r3, r7
 8007718:	460d      	mov	r5, r1
 800771a:	d9f4      	bls.n	8007706 <_printf_i+0x11a>
 800771c:	2b08      	cmp	r3, #8
 800771e:	d10b      	bne.n	8007738 <_printf_i+0x14c>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	07df      	lsls	r7, r3, #31
 8007724:	d508      	bpl.n	8007738 <_printf_i+0x14c>
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	6861      	ldr	r1, [r4, #4]
 800772a:	4299      	cmp	r1, r3
 800772c:	bfde      	ittt	le
 800772e:	2330      	movle	r3, #48	; 0x30
 8007730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007734:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007738:	1b92      	subs	r2, r2, r6
 800773a:	6122      	str	r2, [r4, #16]
 800773c:	f8cd a000 	str.w	sl, [sp]
 8007740:	464b      	mov	r3, r9
 8007742:	aa03      	add	r2, sp, #12
 8007744:	4621      	mov	r1, r4
 8007746:	4640      	mov	r0, r8
 8007748:	f7ff fee2 	bl	8007510 <_printf_common>
 800774c:	3001      	adds	r0, #1
 800774e:	d14c      	bne.n	80077ea <_printf_i+0x1fe>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295
 8007754:	b004      	add	sp, #16
 8007756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775a:	4835      	ldr	r0, [pc, #212]	; (8007830 <_printf_i+0x244>)
 800775c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	680e      	ldr	r6, [r1, #0]
 8007764:	061f      	lsls	r7, r3, #24
 8007766:	f856 5b04 	ldr.w	r5, [r6], #4
 800776a:	600e      	str	r6, [r1, #0]
 800776c:	d514      	bpl.n	8007798 <_printf_i+0x1ac>
 800776e:	07d9      	lsls	r1, r3, #31
 8007770:	bf44      	itt	mi
 8007772:	f043 0320 	orrmi.w	r3, r3, #32
 8007776:	6023      	strmi	r3, [r4, #0]
 8007778:	b91d      	cbnz	r5, 8007782 <_printf_i+0x196>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	f023 0320 	bic.w	r3, r3, #32
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	2310      	movs	r3, #16
 8007784:	e7b0      	b.n	80076e8 <_printf_i+0xfc>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	f043 0320 	orr.w	r3, r3, #32
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	2378      	movs	r3, #120	; 0x78
 8007790:	4828      	ldr	r0, [pc, #160]	; (8007834 <_printf_i+0x248>)
 8007792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007796:	e7e3      	b.n	8007760 <_printf_i+0x174>
 8007798:	065e      	lsls	r6, r3, #25
 800779a:	bf48      	it	mi
 800779c:	b2ad      	uxthmi	r5, r5
 800779e:	e7e6      	b.n	800776e <_printf_i+0x182>
 80077a0:	4616      	mov	r6, r2
 80077a2:	e7bb      	b.n	800771c <_printf_i+0x130>
 80077a4:	680b      	ldr	r3, [r1, #0]
 80077a6:	6826      	ldr	r6, [r4, #0]
 80077a8:	6960      	ldr	r0, [r4, #20]
 80077aa:	1d1d      	adds	r5, r3, #4
 80077ac:	600d      	str	r5, [r1, #0]
 80077ae:	0635      	lsls	r5, r6, #24
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	d501      	bpl.n	80077b8 <_printf_i+0x1cc>
 80077b4:	6018      	str	r0, [r3, #0]
 80077b6:	e002      	b.n	80077be <_printf_i+0x1d2>
 80077b8:	0671      	lsls	r1, r6, #25
 80077ba:	d5fb      	bpl.n	80077b4 <_printf_i+0x1c8>
 80077bc:	8018      	strh	r0, [r3, #0]
 80077be:	2300      	movs	r3, #0
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	4616      	mov	r6, r2
 80077c4:	e7ba      	b.n	800773c <_printf_i+0x150>
 80077c6:	680b      	ldr	r3, [r1, #0]
 80077c8:	1d1a      	adds	r2, r3, #4
 80077ca:	600a      	str	r2, [r1, #0]
 80077cc:	681e      	ldr	r6, [r3, #0]
 80077ce:	6862      	ldr	r2, [r4, #4]
 80077d0:	2100      	movs	r1, #0
 80077d2:	4630      	mov	r0, r6
 80077d4:	f7f8 fd0c 	bl	80001f0 <memchr>
 80077d8:	b108      	cbz	r0, 80077de <_printf_i+0x1f2>
 80077da:	1b80      	subs	r0, r0, r6
 80077dc:	6060      	str	r0, [r4, #4]
 80077de:	6863      	ldr	r3, [r4, #4]
 80077e0:	6123      	str	r3, [r4, #16]
 80077e2:	2300      	movs	r3, #0
 80077e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e8:	e7a8      	b.n	800773c <_printf_i+0x150>
 80077ea:	6923      	ldr	r3, [r4, #16]
 80077ec:	4632      	mov	r2, r6
 80077ee:	4649      	mov	r1, r9
 80077f0:	4640      	mov	r0, r8
 80077f2:	47d0      	blx	sl
 80077f4:	3001      	adds	r0, #1
 80077f6:	d0ab      	beq.n	8007750 <_printf_i+0x164>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	079b      	lsls	r3, r3, #30
 80077fc:	d413      	bmi.n	8007826 <_printf_i+0x23a>
 80077fe:	68e0      	ldr	r0, [r4, #12]
 8007800:	9b03      	ldr	r3, [sp, #12]
 8007802:	4298      	cmp	r0, r3
 8007804:	bfb8      	it	lt
 8007806:	4618      	movlt	r0, r3
 8007808:	e7a4      	b.n	8007754 <_printf_i+0x168>
 800780a:	2301      	movs	r3, #1
 800780c:	4632      	mov	r2, r6
 800780e:	4649      	mov	r1, r9
 8007810:	4640      	mov	r0, r8
 8007812:	47d0      	blx	sl
 8007814:	3001      	adds	r0, #1
 8007816:	d09b      	beq.n	8007750 <_printf_i+0x164>
 8007818:	3501      	adds	r5, #1
 800781a:	68e3      	ldr	r3, [r4, #12]
 800781c:	9903      	ldr	r1, [sp, #12]
 800781e:	1a5b      	subs	r3, r3, r1
 8007820:	42ab      	cmp	r3, r5
 8007822:	dcf2      	bgt.n	800780a <_printf_i+0x21e>
 8007824:	e7eb      	b.n	80077fe <_printf_i+0x212>
 8007826:	2500      	movs	r5, #0
 8007828:	f104 0619 	add.w	r6, r4, #25
 800782c:	e7f5      	b.n	800781a <_printf_i+0x22e>
 800782e:	bf00      	nop
 8007830:	08009e8a 	.word	0x08009e8a
 8007834:	08009e9b 	.word	0x08009e9b

08007838 <iprintf>:
 8007838:	b40f      	push	{r0, r1, r2, r3}
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <iprintf+0x2c>)
 800783c:	b513      	push	{r0, r1, r4, lr}
 800783e:	681c      	ldr	r4, [r3, #0]
 8007840:	b124      	cbz	r4, 800784c <iprintf+0x14>
 8007842:	69a3      	ldr	r3, [r4, #24]
 8007844:	b913      	cbnz	r3, 800784c <iprintf+0x14>
 8007846:	4620      	mov	r0, r4
 8007848:	f7ff fa56 	bl	8006cf8 <__sinit>
 800784c:	ab05      	add	r3, sp, #20
 800784e:	9a04      	ldr	r2, [sp, #16]
 8007850:	68a1      	ldr	r1, [r4, #8]
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	4620      	mov	r0, r4
 8007856:	f001 ffcf 	bl	80097f8 <_vfiprintf_r>
 800785a:	b002      	add	sp, #8
 800785c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007860:	b004      	add	sp, #16
 8007862:	4770      	bx	lr
 8007864:	20000010 	.word	0x20000010

08007868 <_puts_r>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	460e      	mov	r6, r1
 800786c:	4605      	mov	r5, r0
 800786e:	b118      	cbz	r0, 8007878 <_puts_r+0x10>
 8007870:	6983      	ldr	r3, [r0, #24]
 8007872:	b90b      	cbnz	r3, 8007878 <_puts_r+0x10>
 8007874:	f7ff fa40 	bl	8006cf8 <__sinit>
 8007878:	69ab      	ldr	r3, [r5, #24]
 800787a:	68ac      	ldr	r4, [r5, #8]
 800787c:	b913      	cbnz	r3, 8007884 <_puts_r+0x1c>
 800787e:	4628      	mov	r0, r5
 8007880:	f7ff fa3a 	bl	8006cf8 <__sinit>
 8007884:	4b2c      	ldr	r3, [pc, #176]	; (8007938 <_puts_r+0xd0>)
 8007886:	429c      	cmp	r4, r3
 8007888:	d120      	bne.n	80078cc <_puts_r+0x64>
 800788a:	686c      	ldr	r4, [r5, #4]
 800788c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800788e:	07db      	lsls	r3, r3, #31
 8007890:	d405      	bmi.n	800789e <_puts_r+0x36>
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	0598      	lsls	r0, r3, #22
 8007896:	d402      	bmi.n	800789e <_puts_r+0x36>
 8007898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800789a:	f7ff faf0 	bl	8006e7e <__retarget_lock_acquire_recursive>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	0719      	lsls	r1, r3, #28
 80078a2:	d51d      	bpl.n	80078e0 <_puts_r+0x78>
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	b1db      	cbz	r3, 80078e0 <_puts_r+0x78>
 80078a8:	3e01      	subs	r6, #1
 80078aa:	68a3      	ldr	r3, [r4, #8]
 80078ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078b0:	3b01      	subs	r3, #1
 80078b2:	60a3      	str	r3, [r4, #8]
 80078b4:	bb39      	cbnz	r1, 8007906 <_puts_r+0x9e>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	da38      	bge.n	800792c <_puts_r+0xc4>
 80078ba:	4622      	mov	r2, r4
 80078bc:	210a      	movs	r1, #10
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 f98c 	bl	8007bdc <__swbuf_r>
 80078c4:	3001      	adds	r0, #1
 80078c6:	d011      	beq.n	80078ec <_puts_r+0x84>
 80078c8:	250a      	movs	r5, #10
 80078ca:	e011      	b.n	80078f0 <_puts_r+0x88>
 80078cc:	4b1b      	ldr	r3, [pc, #108]	; (800793c <_puts_r+0xd4>)
 80078ce:	429c      	cmp	r4, r3
 80078d0:	d101      	bne.n	80078d6 <_puts_r+0x6e>
 80078d2:	68ac      	ldr	r4, [r5, #8]
 80078d4:	e7da      	b.n	800788c <_puts_r+0x24>
 80078d6:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <_puts_r+0xd8>)
 80078d8:	429c      	cmp	r4, r3
 80078da:	bf08      	it	eq
 80078dc:	68ec      	ldreq	r4, [r5, #12]
 80078de:	e7d5      	b.n	800788c <_puts_r+0x24>
 80078e0:	4621      	mov	r1, r4
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 f9de 	bl	8007ca4 <__swsetup_r>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d0dd      	beq.n	80078a8 <_puts_r+0x40>
 80078ec:	f04f 35ff 	mov.w	r5, #4294967295
 80078f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078f2:	07da      	lsls	r2, r3, #31
 80078f4:	d405      	bmi.n	8007902 <_puts_r+0x9a>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	059b      	lsls	r3, r3, #22
 80078fa:	d402      	bmi.n	8007902 <_puts_r+0x9a>
 80078fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078fe:	f7ff fabf 	bl	8006e80 <__retarget_lock_release_recursive>
 8007902:	4628      	mov	r0, r5
 8007904:	bd70      	pop	{r4, r5, r6, pc}
 8007906:	2b00      	cmp	r3, #0
 8007908:	da04      	bge.n	8007914 <_puts_r+0xac>
 800790a:	69a2      	ldr	r2, [r4, #24]
 800790c:	429a      	cmp	r2, r3
 800790e:	dc06      	bgt.n	800791e <_puts_r+0xb6>
 8007910:	290a      	cmp	r1, #10
 8007912:	d004      	beq.n	800791e <_puts_r+0xb6>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	6022      	str	r2, [r4, #0]
 800791a:	7019      	strb	r1, [r3, #0]
 800791c:	e7c5      	b.n	80078aa <_puts_r+0x42>
 800791e:	4622      	mov	r2, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f000 f95b 	bl	8007bdc <__swbuf_r>
 8007926:	3001      	adds	r0, #1
 8007928:	d1bf      	bne.n	80078aa <_puts_r+0x42>
 800792a:	e7df      	b.n	80078ec <_puts_r+0x84>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	250a      	movs	r5, #10
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	6022      	str	r2, [r4, #0]
 8007934:	701d      	strb	r5, [r3, #0]
 8007936:	e7db      	b.n	80078f0 <_puts_r+0x88>
 8007938:	08009e34 	.word	0x08009e34
 800793c:	08009e54 	.word	0x08009e54
 8007940:	08009e14 	.word	0x08009e14

08007944 <puts>:
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <puts+0xc>)
 8007946:	4601      	mov	r1, r0
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	f7ff bf8d 	b.w	8007868 <_puts_r>
 800794e:	bf00      	nop
 8007950:	20000010 	.word	0x20000010

08007954 <cleanup_glue>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	460c      	mov	r4, r1
 8007958:	6809      	ldr	r1, [r1, #0]
 800795a:	4605      	mov	r5, r0
 800795c:	b109      	cbz	r1, 8007962 <cleanup_glue+0xe>
 800795e:	f7ff fff9 	bl	8007954 <cleanup_glue>
 8007962:	4621      	mov	r1, r4
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800796a:	f001 bd6f 	b.w	800944c <_free_r>
	...

08007970 <_reclaim_reent>:
 8007970:	4b2c      	ldr	r3, [pc, #176]	; (8007a24 <_reclaim_reent+0xb4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4283      	cmp	r3, r0
 8007976:	b570      	push	{r4, r5, r6, lr}
 8007978:	4604      	mov	r4, r0
 800797a:	d051      	beq.n	8007a20 <_reclaim_reent+0xb0>
 800797c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800797e:	b143      	cbz	r3, 8007992 <_reclaim_reent+0x22>
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d14a      	bne.n	8007a1c <_reclaim_reent+0xac>
 8007986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007988:	6819      	ldr	r1, [r3, #0]
 800798a:	b111      	cbz	r1, 8007992 <_reclaim_reent+0x22>
 800798c:	4620      	mov	r0, r4
 800798e:	f001 fd5d 	bl	800944c <_free_r>
 8007992:	6961      	ldr	r1, [r4, #20]
 8007994:	b111      	cbz	r1, 800799c <_reclaim_reent+0x2c>
 8007996:	4620      	mov	r0, r4
 8007998:	f001 fd58 	bl	800944c <_free_r>
 800799c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800799e:	b111      	cbz	r1, 80079a6 <_reclaim_reent+0x36>
 80079a0:	4620      	mov	r0, r4
 80079a2:	f001 fd53 	bl	800944c <_free_r>
 80079a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80079a8:	b111      	cbz	r1, 80079b0 <_reclaim_reent+0x40>
 80079aa:	4620      	mov	r0, r4
 80079ac:	f001 fd4e 	bl	800944c <_free_r>
 80079b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80079b2:	b111      	cbz	r1, 80079ba <_reclaim_reent+0x4a>
 80079b4:	4620      	mov	r0, r4
 80079b6:	f001 fd49 	bl	800944c <_free_r>
 80079ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80079bc:	b111      	cbz	r1, 80079c4 <_reclaim_reent+0x54>
 80079be:	4620      	mov	r0, r4
 80079c0:	f001 fd44 	bl	800944c <_free_r>
 80079c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80079c6:	b111      	cbz	r1, 80079ce <_reclaim_reent+0x5e>
 80079c8:	4620      	mov	r0, r4
 80079ca:	f001 fd3f 	bl	800944c <_free_r>
 80079ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80079d0:	b111      	cbz	r1, 80079d8 <_reclaim_reent+0x68>
 80079d2:	4620      	mov	r0, r4
 80079d4:	f001 fd3a 	bl	800944c <_free_r>
 80079d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079da:	b111      	cbz	r1, 80079e2 <_reclaim_reent+0x72>
 80079dc:	4620      	mov	r0, r4
 80079de:	f001 fd35 	bl	800944c <_free_r>
 80079e2:	69a3      	ldr	r3, [r4, #24]
 80079e4:	b1e3      	cbz	r3, 8007a20 <_reclaim_reent+0xb0>
 80079e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80079e8:	4620      	mov	r0, r4
 80079ea:	4798      	blx	r3
 80079ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80079ee:	b1b9      	cbz	r1, 8007a20 <_reclaim_reent+0xb0>
 80079f0:	4620      	mov	r0, r4
 80079f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80079f6:	f7ff bfad 	b.w	8007954 <cleanup_glue>
 80079fa:	5949      	ldr	r1, [r1, r5]
 80079fc:	b941      	cbnz	r1, 8007a10 <_reclaim_reent+0xa0>
 80079fe:	3504      	adds	r5, #4
 8007a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a02:	2d80      	cmp	r5, #128	; 0x80
 8007a04:	68d9      	ldr	r1, [r3, #12]
 8007a06:	d1f8      	bne.n	80079fa <_reclaim_reent+0x8a>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f001 fd1f 	bl	800944c <_free_r>
 8007a0e:	e7ba      	b.n	8007986 <_reclaim_reent+0x16>
 8007a10:	680e      	ldr	r6, [r1, #0]
 8007a12:	4620      	mov	r0, r4
 8007a14:	f001 fd1a 	bl	800944c <_free_r>
 8007a18:	4631      	mov	r1, r6
 8007a1a:	e7ef      	b.n	80079fc <_reclaim_reent+0x8c>
 8007a1c:	2500      	movs	r5, #0
 8007a1e:	e7ef      	b.n	8007a00 <_reclaim_reent+0x90>
 8007a20:	bd70      	pop	{r4, r5, r6, pc}
 8007a22:	bf00      	nop
 8007a24:	20000010 	.word	0x20000010

08007a28 <modf>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	ec55 4b10 	vmov	r4, r5, d0
 8007a2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007a32:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007a36:	2e13      	cmp	r6, #19
 8007a38:	dc24      	bgt.n	8007a84 <modf+0x5c>
 8007a3a:	2e00      	cmp	r6, #0
 8007a3c:	da07      	bge.n	8007a4e <modf+0x26>
 8007a3e:	2600      	movs	r6, #0
 8007a40:	f005 4700 	and.w	r7, r5, #2147483648	; 0x80000000
 8007a44:	e9c0 6700 	strd	r6, r7, [r0]
 8007a48:	ec45 4b10 	vmov	d0, r4, r5
 8007a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4e:	491a      	ldr	r1, [pc, #104]	; (8007ab8 <modf+0x90>)
 8007a50:	4131      	asrs	r1, r6
 8007a52:	ea05 0601 	and.w	r6, r5, r1
 8007a56:	ea56 0204 	orrs.w	r2, r6, r4
 8007a5a:	d105      	bne.n	8007a68 <modf+0x40>
 8007a5c:	ed80 0b00 	vstr	d0, [r0]
 8007a60:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8007a64:	4614      	mov	r4, r2
 8007a66:	e7ef      	b.n	8007a48 <modf+0x20>
 8007a68:	2600      	movs	r6, #0
 8007a6a:	ea25 0701 	bic.w	r7, r5, r1
 8007a6e:	4632      	mov	r2, r6
 8007a70:	463b      	mov	r3, r7
 8007a72:	e9c0 2300 	strd	r2, r3, [r0]
 8007a76:	4629      	mov	r1, r5
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f7f8 fc0d 	bl	8000298 <__aeabi_dsub>
 8007a7e:	4604      	mov	r4, r0
 8007a80:	460d      	mov	r5, r1
 8007a82:	e7e1      	b.n	8007a48 <modf+0x20>
 8007a84:	2e33      	cmp	r6, #51	; 0x33
 8007a86:	dd05      	ble.n	8007a94 <modf+0x6c>
 8007a88:	ed80 0b00 	vstr	d0, [r0]
 8007a8c:	2400      	movs	r4, #0
 8007a8e:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8007a92:	e7d9      	b.n	8007a48 <modf+0x20>
 8007a94:	f2a1 4613 	subw	r6, r1, #1043	; 0x413
 8007a98:	f04f 31ff 	mov.w	r1, #4294967295
 8007a9c:	40f1      	lsrs	r1, r6
 8007a9e:	ea11 0604 	ands.w	r6, r1, r4
 8007aa2:	d105      	bne.n	8007ab0 <modf+0x88>
 8007aa4:	ed80 0b00 	vstr	d0, [r0]
 8007aa8:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8007aac:	4634      	mov	r4, r6
 8007aae:	e7cb      	b.n	8007a48 <modf+0x20>
 8007ab0:	462f      	mov	r7, r5
 8007ab2:	ea24 0601 	bic.w	r6, r4, r1
 8007ab6:	e7da      	b.n	8007a6e <modf+0x46>
 8007ab8:	000fffff 	.word	0x000fffff

08007abc <_sbrk_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d06      	ldr	r5, [pc, #24]	; (8007ad8 <_sbrk_r+0x1c>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	f7fa fb56 	bl	8002178 <_sbrk>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_sbrk_r+0x1a>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_sbrk_r+0x1a>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20004fa8 	.word	0x20004fa8

08007adc <siprintf>:
 8007adc:	b40e      	push	{r1, r2, r3}
 8007ade:	b500      	push	{lr}
 8007ae0:	b09c      	sub	sp, #112	; 0x70
 8007ae2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ae4:	9002      	str	r0, [sp, #8]
 8007ae6:	9006      	str	r0, [sp, #24]
 8007ae8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007aec:	4809      	ldr	r0, [pc, #36]	; (8007b14 <siprintf+0x38>)
 8007aee:	9107      	str	r1, [sp, #28]
 8007af0:	9104      	str	r1, [sp, #16]
 8007af2:	4909      	ldr	r1, [pc, #36]	; (8007b18 <siprintf+0x3c>)
 8007af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af8:	9105      	str	r1, [sp, #20]
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	a902      	add	r1, sp, #8
 8007b00:	f001 fd50 	bl	80095a4 <_svfiprintf_r>
 8007b04:	9b02      	ldr	r3, [sp, #8]
 8007b06:	2200      	movs	r2, #0
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	b01c      	add	sp, #112	; 0x70
 8007b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b10:	b003      	add	sp, #12
 8007b12:	4770      	bx	lr
 8007b14:	20000010 	.word	0x20000010
 8007b18:	ffff0208 	.word	0xffff0208

08007b1c <__sread>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	460c      	mov	r4, r1
 8007b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b24:	f001 ff98 	bl	8009a58 <_read_r>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	bfab      	itete	ge
 8007b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b30:	181b      	addge	r3, r3, r0
 8007b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b36:	bfac      	ite	ge
 8007b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b3a:	81a3      	strhlt	r3, [r4, #12]
 8007b3c:	bd10      	pop	{r4, pc}

08007b3e <__swrite>:
 8007b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b42:	461f      	mov	r7, r3
 8007b44:	898b      	ldrh	r3, [r1, #12]
 8007b46:	05db      	lsls	r3, r3, #23
 8007b48:	4605      	mov	r5, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4616      	mov	r6, r2
 8007b4e:	d505      	bpl.n	8007b5c <__swrite+0x1e>
 8007b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b54:	2302      	movs	r3, #2
 8007b56:	2200      	movs	r2, #0
 8007b58:	f001 f860 	bl	8008c1c <_lseek_r>
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	4632      	mov	r2, r6
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b72:	f000 b885 	b.w	8007c80 <_write_r>

08007b76 <__sseek>:
 8007b76:	b510      	push	{r4, lr}
 8007b78:	460c      	mov	r4, r1
 8007b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7e:	f001 f84d 	bl	8008c1c <_lseek_r>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	bf15      	itete	ne
 8007b88:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b92:	81a3      	strheq	r3, [r4, #12]
 8007b94:	bf18      	it	ne
 8007b96:	81a3      	strhne	r3, [r4, #12]
 8007b98:	bd10      	pop	{r4, pc}

08007b9a <__sclose>:
 8007b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9e:	f000 b8ef 	b.w	8007d80 <_close_r>
	...

08007ba4 <strcasecmp>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4d0c      	ldr	r5, [pc, #48]	; (8007bd8 <strcasecmp+0x34>)
 8007ba8:	4604      	mov	r4, r0
 8007baa:	462e      	mov	r6, r5
 8007bac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bb0:	5d5a      	ldrb	r2, [r3, r5]
 8007bb2:	f002 0203 	and.w	r2, r2, #3
 8007bb6:	2a01      	cmp	r2, #1
 8007bb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bbc:	5cb0      	ldrb	r0, [r6, r2]
 8007bbe:	f000 0003 	and.w	r0, r0, #3
 8007bc2:	bf08      	it	eq
 8007bc4:	3320      	addeq	r3, #32
 8007bc6:	2801      	cmp	r0, #1
 8007bc8:	bf08      	it	eq
 8007bca:	3220      	addeq	r2, #32
 8007bcc:	1a98      	subs	r0, r3, r2
 8007bce:	d101      	bne.n	8007bd4 <strcasecmp+0x30>
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	d1eb      	bne.n	8007bac <strcasecmp+0x8>
 8007bd4:	bd70      	pop	{r4, r5, r6, pc}
 8007bd6:	bf00      	nop
 8007bd8:	08009ead 	.word	0x08009ead

08007bdc <__swbuf_r>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	460e      	mov	r6, r1
 8007be0:	4614      	mov	r4, r2
 8007be2:	4605      	mov	r5, r0
 8007be4:	b118      	cbz	r0, 8007bee <__swbuf_r+0x12>
 8007be6:	6983      	ldr	r3, [r0, #24]
 8007be8:	b90b      	cbnz	r3, 8007bee <__swbuf_r+0x12>
 8007bea:	f7ff f885 	bl	8006cf8 <__sinit>
 8007bee:	4b21      	ldr	r3, [pc, #132]	; (8007c74 <__swbuf_r+0x98>)
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	d12b      	bne.n	8007c4c <__swbuf_r+0x70>
 8007bf4:	686c      	ldr	r4, [r5, #4]
 8007bf6:	69a3      	ldr	r3, [r4, #24]
 8007bf8:	60a3      	str	r3, [r4, #8]
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	071a      	lsls	r2, r3, #28
 8007bfe:	d52f      	bpl.n	8007c60 <__swbuf_r+0x84>
 8007c00:	6923      	ldr	r3, [r4, #16]
 8007c02:	b36b      	cbz	r3, 8007c60 <__swbuf_r+0x84>
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	6820      	ldr	r0, [r4, #0]
 8007c08:	1ac0      	subs	r0, r0, r3
 8007c0a:	6963      	ldr	r3, [r4, #20]
 8007c0c:	b2f6      	uxtb	r6, r6
 8007c0e:	4283      	cmp	r3, r0
 8007c10:	4637      	mov	r7, r6
 8007c12:	dc04      	bgt.n	8007c1e <__swbuf_r+0x42>
 8007c14:	4621      	mov	r1, r4
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 ffc0 	bl	8008b9c <_fflush_r>
 8007c1c:	bb30      	cbnz	r0, 8007c6c <__swbuf_r+0x90>
 8007c1e:	68a3      	ldr	r3, [r4, #8]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	60a3      	str	r3, [r4, #8]
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	6022      	str	r2, [r4, #0]
 8007c2a:	701e      	strb	r6, [r3, #0]
 8007c2c:	6963      	ldr	r3, [r4, #20]
 8007c2e:	3001      	adds	r0, #1
 8007c30:	4283      	cmp	r3, r0
 8007c32:	d004      	beq.n	8007c3e <__swbuf_r+0x62>
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	07db      	lsls	r3, r3, #31
 8007c38:	d506      	bpl.n	8007c48 <__swbuf_r+0x6c>
 8007c3a:	2e0a      	cmp	r6, #10
 8007c3c:	d104      	bne.n	8007c48 <__swbuf_r+0x6c>
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4628      	mov	r0, r5
 8007c42:	f000 ffab 	bl	8008b9c <_fflush_r>
 8007c46:	b988      	cbnz	r0, 8007c6c <__swbuf_r+0x90>
 8007c48:	4638      	mov	r0, r7
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <__swbuf_r+0x9c>)
 8007c4e:	429c      	cmp	r4, r3
 8007c50:	d101      	bne.n	8007c56 <__swbuf_r+0x7a>
 8007c52:	68ac      	ldr	r4, [r5, #8]
 8007c54:	e7cf      	b.n	8007bf6 <__swbuf_r+0x1a>
 8007c56:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <__swbuf_r+0xa0>)
 8007c58:	429c      	cmp	r4, r3
 8007c5a:	bf08      	it	eq
 8007c5c:	68ec      	ldreq	r4, [r5, #12]
 8007c5e:	e7ca      	b.n	8007bf6 <__swbuf_r+0x1a>
 8007c60:	4621      	mov	r1, r4
 8007c62:	4628      	mov	r0, r5
 8007c64:	f000 f81e 	bl	8007ca4 <__swsetup_r>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d0cb      	beq.n	8007c04 <__swbuf_r+0x28>
 8007c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007c70:	e7ea      	b.n	8007c48 <__swbuf_r+0x6c>
 8007c72:	bf00      	nop
 8007c74:	08009e34 	.word	0x08009e34
 8007c78:	08009e54 	.word	0x08009e54
 8007c7c:	08009e14 	.word	0x08009e14

08007c80 <_write_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d07      	ldr	r5, [pc, #28]	; (8007ca0 <_write_r+0x20>)
 8007c84:	4604      	mov	r4, r0
 8007c86:	4608      	mov	r0, r1
 8007c88:	4611      	mov	r1, r2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7f9 fb7e 	bl	8001390 <_write>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_write_r+0x1e>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_write_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20004fa8 	.word	0x20004fa8

08007ca4 <__swsetup_r>:
 8007ca4:	4b32      	ldr	r3, [pc, #200]	; (8007d70 <__swsetup_r+0xcc>)
 8007ca6:	b570      	push	{r4, r5, r6, lr}
 8007ca8:	681d      	ldr	r5, [r3, #0]
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	b125      	cbz	r5, 8007cba <__swsetup_r+0x16>
 8007cb0:	69ab      	ldr	r3, [r5, #24]
 8007cb2:	b913      	cbnz	r3, 8007cba <__swsetup_r+0x16>
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f7ff f81f 	bl	8006cf8 <__sinit>
 8007cba:	4b2e      	ldr	r3, [pc, #184]	; (8007d74 <__swsetup_r+0xd0>)
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	d10f      	bne.n	8007ce0 <__swsetup_r+0x3c>
 8007cc0:	686c      	ldr	r4, [r5, #4]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cc8:	0719      	lsls	r1, r3, #28
 8007cca:	d42c      	bmi.n	8007d26 <__swsetup_r+0x82>
 8007ccc:	06dd      	lsls	r5, r3, #27
 8007cce:	d411      	bmi.n	8007cf4 <__swsetup_r+0x50>
 8007cd0:	2309      	movs	r3, #9
 8007cd2:	6033      	str	r3, [r6, #0]
 8007cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	e03e      	b.n	8007d5e <__swsetup_r+0xba>
 8007ce0:	4b25      	ldr	r3, [pc, #148]	; (8007d78 <__swsetup_r+0xd4>)
 8007ce2:	429c      	cmp	r4, r3
 8007ce4:	d101      	bne.n	8007cea <__swsetup_r+0x46>
 8007ce6:	68ac      	ldr	r4, [r5, #8]
 8007ce8:	e7eb      	b.n	8007cc2 <__swsetup_r+0x1e>
 8007cea:	4b24      	ldr	r3, [pc, #144]	; (8007d7c <__swsetup_r+0xd8>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	bf08      	it	eq
 8007cf0:	68ec      	ldreq	r4, [r5, #12]
 8007cf2:	e7e6      	b.n	8007cc2 <__swsetup_r+0x1e>
 8007cf4:	0758      	lsls	r0, r3, #29
 8007cf6:	d512      	bpl.n	8007d1e <__swsetup_r+0x7a>
 8007cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cfa:	b141      	cbz	r1, 8007d0e <__swsetup_r+0x6a>
 8007cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d00:	4299      	cmp	r1, r3
 8007d02:	d002      	beq.n	8007d0a <__swsetup_r+0x66>
 8007d04:	4630      	mov	r0, r6
 8007d06:	f001 fba1 	bl	800944c <_free_r>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	2300      	movs	r3, #0
 8007d18:	6063      	str	r3, [r4, #4]
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	f043 0308 	orr.w	r3, r3, #8
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	b94b      	cbnz	r3, 8007d3e <__swsetup_r+0x9a>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d34:	d003      	beq.n	8007d3e <__swsetup_r+0x9a>
 8007d36:	4621      	mov	r1, r4
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f000 ffa5 	bl	8008c88 <__smakebuf_r>
 8007d3e:	89a0      	ldrh	r0, [r4, #12]
 8007d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d44:	f010 0301 	ands.w	r3, r0, #1
 8007d48:	d00a      	beq.n	8007d60 <__swsetup_r+0xbc>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60a3      	str	r3, [r4, #8]
 8007d4e:	6963      	ldr	r3, [r4, #20]
 8007d50:	425b      	negs	r3, r3
 8007d52:	61a3      	str	r3, [r4, #24]
 8007d54:	6923      	ldr	r3, [r4, #16]
 8007d56:	b943      	cbnz	r3, 8007d6a <__swsetup_r+0xc6>
 8007d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d5c:	d1ba      	bne.n	8007cd4 <__swsetup_r+0x30>
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	0781      	lsls	r1, r0, #30
 8007d62:	bf58      	it	pl
 8007d64:	6963      	ldrpl	r3, [r4, #20]
 8007d66:	60a3      	str	r3, [r4, #8]
 8007d68:	e7f4      	b.n	8007d54 <__swsetup_r+0xb0>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e7f7      	b.n	8007d5e <__swsetup_r+0xba>
 8007d6e:	bf00      	nop
 8007d70:	20000010 	.word	0x20000010
 8007d74:	08009e34 	.word	0x08009e34
 8007d78:	08009e54 	.word	0x08009e54
 8007d7c:	08009e14 	.word	0x08009e14

08007d80 <_close_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d06      	ldr	r5, [pc, #24]	; (8007d9c <_close_r+0x1c>)
 8007d84:	2300      	movs	r3, #0
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	f7f9 fb12 	bl	80013b4 <_close>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_close_r+0x1a>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_close_r+0x1a>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	20004fa8 	.word	0x20004fa8

08007da0 <quorem>:
 8007da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	6903      	ldr	r3, [r0, #16]
 8007da6:	690c      	ldr	r4, [r1, #16]
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	4607      	mov	r7, r0
 8007dac:	f2c0 8081 	blt.w	8007eb2 <quorem+0x112>
 8007db0:	3c01      	subs	r4, #1
 8007db2:	f101 0814 	add.w	r8, r1, #20
 8007db6:	f100 0514 	add.w	r5, r0, #20
 8007dba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007dc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007dd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dd8:	d331      	bcc.n	8007e3e <quorem+0x9e>
 8007dda:	f04f 0e00 	mov.w	lr, #0
 8007dde:	4640      	mov	r0, r8
 8007de0:	46ac      	mov	ip, r5
 8007de2:	46f2      	mov	sl, lr
 8007de4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007de8:	b293      	uxth	r3, r2
 8007dea:	fb06 e303 	mla	r3, r6, r3, lr
 8007dee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	ebaa 0303 	sub.w	r3, sl, r3
 8007df8:	0c12      	lsrs	r2, r2, #16
 8007dfa:	f8dc a000 	ldr.w	sl, [ip]
 8007dfe:	fb06 e202 	mla	r2, r6, r2, lr
 8007e02:	fa13 f38a 	uxtah	r3, r3, sl
 8007e06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e0a:	fa1f fa82 	uxth.w	sl, r2
 8007e0e:	f8dc 2000 	ldr.w	r2, [ip]
 8007e12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007e16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e20:	4581      	cmp	r9, r0
 8007e22:	f84c 3b04 	str.w	r3, [ip], #4
 8007e26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e2a:	d2db      	bcs.n	8007de4 <quorem+0x44>
 8007e2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e30:	b92b      	cbnz	r3, 8007e3e <quorem+0x9e>
 8007e32:	9b01      	ldr	r3, [sp, #4]
 8007e34:	3b04      	subs	r3, #4
 8007e36:	429d      	cmp	r5, r3
 8007e38:	461a      	mov	r2, r3
 8007e3a:	d32e      	bcc.n	8007e9a <quorem+0xfa>
 8007e3c:	613c      	str	r4, [r7, #16]
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f001 f9f4 	bl	800922c <__mcmp>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	db24      	blt.n	8007e92 <quorem+0xf2>
 8007e48:	3601      	adds	r6, #1
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f04f 0c00 	mov.w	ip, #0
 8007e50:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e54:	f8d0 e000 	ldr.w	lr, [r0]
 8007e58:	b293      	uxth	r3, r2
 8007e5a:	ebac 0303 	sub.w	r3, ip, r3
 8007e5e:	0c12      	lsrs	r2, r2, #16
 8007e60:	fa13 f38e 	uxtah	r3, r3, lr
 8007e64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e72:	45c1      	cmp	r9, r8
 8007e74:	f840 3b04 	str.w	r3, [r0], #4
 8007e78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e7c:	d2e8      	bcs.n	8007e50 <quorem+0xb0>
 8007e7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e86:	b922      	cbnz	r2, 8007e92 <quorem+0xf2>
 8007e88:	3b04      	subs	r3, #4
 8007e8a:	429d      	cmp	r5, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	d30a      	bcc.n	8007ea6 <quorem+0x106>
 8007e90:	613c      	str	r4, [r7, #16]
 8007e92:	4630      	mov	r0, r6
 8007e94:	b003      	add	sp, #12
 8007e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9a:	6812      	ldr	r2, [r2, #0]
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	d1cc      	bne.n	8007e3c <quorem+0x9c>
 8007ea2:	3c01      	subs	r4, #1
 8007ea4:	e7c7      	b.n	8007e36 <quorem+0x96>
 8007ea6:	6812      	ldr	r2, [r2, #0]
 8007ea8:	3b04      	subs	r3, #4
 8007eaa:	2a00      	cmp	r2, #0
 8007eac:	d1f0      	bne.n	8007e90 <quorem+0xf0>
 8007eae:	3c01      	subs	r4, #1
 8007eb0:	e7eb      	b.n	8007e8a <quorem+0xea>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e7ee      	b.n	8007e94 <quorem+0xf4>
	...

08007eb8 <_dtoa_r>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	ed2d 8b02 	vpush	{d8}
 8007ec0:	ec57 6b10 	vmov	r6, r7, d0
 8007ec4:	b095      	sub	sp, #84	; 0x54
 8007ec6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ec8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ecc:	9105      	str	r1, [sp, #20]
 8007ece:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ed8:	b975      	cbnz	r5, 8007ef8 <_dtoa_r+0x40>
 8007eda:	2010      	movs	r0, #16
 8007edc:	f000 ff14 	bl	8008d08 <malloc>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ee4:	b920      	cbnz	r0, 8007ef0 <_dtoa_r+0x38>
 8007ee6:	4bb2      	ldr	r3, [pc, #712]	; (80081b0 <_dtoa_r+0x2f8>)
 8007ee8:	21ea      	movs	r1, #234	; 0xea
 8007eea:	48b2      	ldr	r0, [pc, #712]	; (80081b4 <_dtoa_r+0x2fc>)
 8007eec:	f001 fdc6 	bl	8009a7c <__assert_func>
 8007ef0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ef4:	6005      	str	r5, [r0, #0]
 8007ef6:	60c5      	str	r5, [r0, #12]
 8007ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007efa:	6819      	ldr	r1, [r3, #0]
 8007efc:	b151      	cbz	r1, 8007f14 <_dtoa_r+0x5c>
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	604a      	str	r2, [r1, #4]
 8007f02:	2301      	movs	r3, #1
 8007f04:	4093      	lsls	r3, r2
 8007f06:	608b      	str	r3, [r1, #8]
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 ff51 	bl	8008db0 <_Bfree>
 8007f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	1e3b      	subs	r3, r7, #0
 8007f16:	bfb9      	ittee	lt
 8007f18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f1c:	9303      	strlt	r3, [sp, #12]
 8007f1e:	2300      	movge	r3, #0
 8007f20:	f8c8 3000 	strge.w	r3, [r8]
 8007f24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007f28:	4ba3      	ldr	r3, [pc, #652]	; (80081b8 <_dtoa_r+0x300>)
 8007f2a:	bfbc      	itt	lt
 8007f2c:	2201      	movlt	r2, #1
 8007f2e:	f8c8 2000 	strlt.w	r2, [r8]
 8007f32:	ea33 0309 	bics.w	r3, r3, r9
 8007f36:	d11b      	bne.n	8007f70 <_dtoa_r+0xb8>
 8007f38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f44:	4333      	orrs	r3, r6
 8007f46:	f000 857a 	beq.w	8008a3e <_dtoa_r+0xb86>
 8007f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f4c:	b963      	cbnz	r3, 8007f68 <_dtoa_r+0xb0>
 8007f4e:	4b9b      	ldr	r3, [pc, #620]	; (80081bc <_dtoa_r+0x304>)
 8007f50:	e024      	b.n	8007f9c <_dtoa_r+0xe4>
 8007f52:	4b9b      	ldr	r3, [pc, #620]	; (80081c0 <_dtoa_r+0x308>)
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	3308      	adds	r3, #8
 8007f58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f5a:	6013      	str	r3, [r2, #0]
 8007f5c:	9800      	ldr	r0, [sp, #0]
 8007f5e:	b015      	add	sp, #84	; 0x54
 8007f60:	ecbd 8b02 	vpop	{d8}
 8007f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f68:	4b94      	ldr	r3, [pc, #592]	; (80081bc <_dtoa_r+0x304>)
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	3303      	adds	r3, #3
 8007f6e:	e7f3      	b.n	8007f58 <_dtoa_r+0xa0>
 8007f70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f74:	2200      	movs	r2, #0
 8007f76:	ec51 0b17 	vmov	r0, r1, d7
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007f80:	f7f8 fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f84:	4680      	mov	r8, r0
 8007f86:	b158      	cbz	r0, 8007fa0 <_dtoa_r+0xe8>
 8007f88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8551 	beq.w	8008a38 <_dtoa_r+0xb80>
 8007f96:	488b      	ldr	r0, [pc, #556]	; (80081c4 <_dtoa_r+0x30c>)
 8007f98:	6018      	str	r0, [r3, #0]
 8007f9a:	1e43      	subs	r3, r0, #1
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	e7dd      	b.n	8007f5c <_dtoa_r+0xa4>
 8007fa0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007fa4:	aa12      	add	r2, sp, #72	; 0x48
 8007fa6:	a913      	add	r1, sp, #76	; 0x4c
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 f9e3 	bl	8009374 <__d2b>
 8007fae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fb2:	4683      	mov	fp, r0
 8007fb4:	2d00      	cmp	r5, #0
 8007fb6:	d07c      	beq.n	80080b2 <_dtoa_r+0x1fa>
 8007fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007fc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007fca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007fce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007fd2:	4b7d      	ldr	r3, [pc, #500]	; (80081c8 <_dtoa_r+0x310>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	4639      	mov	r1, r7
 8007fda:	f7f8 f95d 	bl	8000298 <__aeabi_dsub>
 8007fde:	a36e      	add	r3, pc, #440	; (adr r3, 8008198 <_dtoa_r+0x2e0>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f7f8 fb10 	bl	8000608 <__aeabi_dmul>
 8007fe8:	a36d      	add	r3, pc, #436	; (adr r3, 80081a0 <_dtoa_r+0x2e8>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 f955 	bl	800029c <__adddf3>
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	460f      	mov	r7, r1
 8007ff8:	f7f8 fa9c 	bl	8000534 <__aeabi_i2d>
 8007ffc:	a36a      	add	r3, pc, #424	; (adr r3, 80081a8 <_dtoa_r+0x2f0>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 fb01 	bl	8000608 <__aeabi_dmul>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4630      	mov	r0, r6
 800800c:	4639      	mov	r1, r7
 800800e:	f7f8 f945 	bl	800029c <__adddf3>
 8008012:	4606      	mov	r6, r0
 8008014:	460f      	mov	r7, r1
 8008016:	f7f8 fda7 	bl	8000b68 <__aeabi_d2iz>
 800801a:	2200      	movs	r2, #0
 800801c:	4682      	mov	sl, r0
 800801e:	2300      	movs	r3, #0
 8008020:	4630      	mov	r0, r6
 8008022:	4639      	mov	r1, r7
 8008024:	f7f8 fd62 	bl	8000aec <__aeabi_dcmplt>
 8008028:	b148      	cbz	r0, 800803e <_dtoa_r+0x186>
 800802a:	4650      	mov	r0, sl
 800802c:	f7f8 fa82 	bl	8000534 <__aeabi_i2d>
 8008030:	4632      	mov	r2, r6
 8008032:	463b      	mov	r3, r7
 8008034:	f7f8 fd50 	bl	8000ad8 <__aeabi_dcmpeq>
 8008038:	b908      	cbnz	r0, 800803e <_dtoa_r+0x186>
 800803a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800803e:	f1ba 0f16 	cmp.w	sl, #22
 8008042:	d854      	bhi.n	80080ee <_dtoa_r+0x236>
 8008044:	4b61      	ldr	r3, [pc, #388]	; (80081cc <_dtoa_r+0x314>)
 8008046:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008052:	f7f8 fd4b 	bl	8000aec <__aeabi_dcmplt>
 8008056:	2800      	cmp	r0, #0
 8008058:	d04b      	beq.n	80080f2 <_dtoa_r+0x23a>
 800805a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800805e:	2300      	movs	r3, #0
 8008060:	930e      	str	r3, [sp, #56]	; 0x38
 8008062:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008064:	1b5d      	subs	r5, r3, r5
 8008066:	1e6b      	subs	r3, r5, #1
 8008068:	9304      	str	r3, [sp, #16]
 800806a:	bf43      	ittte	mi
 800806c:	2300      	movmi	r3, #0
 800806e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008072:	9304      	strmi	r3, [sp, #16]
 8008074:	f04f 0800 	movpl.w	r8, #0
 8008078:	f1ba 0f00 	cmp.w	sl, #0
 800807c:	db3b      	blt.n	80080f6 <_dtoa_r+0x23e>
 800807e:	9b04      	ldr	r3, [sp, #16]
 8008080:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008084:	4453      	add	r3, sl
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	2300      	movs	r3, #0
 800808a:	9306      	str	r3, [sp, #24]
 800808c:	9b05      	ldr	r3, [sp, #20]
 800808e:	2b09      	cmp	r3, #9
 8008090:	d869      	bhi.n	8008166 <_dtoa_r+0x2ae>
 8008092:	2b05      	cmp	r3, #5
 8008094:	bfc4      	itt	gt
 8008096:	3b04      	subgt	r3, #4
 8008098:	9305      	strgt	r3, [sp, #20]
 800809a:	9b05      	ldr	r3, [sp, #20]
 800809c:	f1a3 0302 	sub.w	r3, r3, #2
 80080a0:	bfcc      	ite	gt
 80080a2:	2500      	movgt	r5, #0
 80080a4:	2501      	movle	r5, #1
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d869      	bhi.n	800817e <_dtoa_r+0x2c6>
 80080aa:	e8df f003 	tbb	[pc, r3]
 80080ae:	4e2c      	.short	0x4e2c
 80080b0:	5a4c      	.short	0x5a4c
 80080b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80080b6:	441d      	add	r5, r3
 80080b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80080bc:	2b20      	cmp	r3, #32
 80080be:	bfc1      	itttt	gt
 80080c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80080c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80080cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080d0:	bfda      	itte	le
 80080d2:	f1c3 0320 	rsble	r3, r3, #32
 80080d6:	fa06 f003 	lslle.w	r0, r6, r3
 80080da:	4318      	orrgt	r0, r3
 80080dc:	f7f8 fa1a 	bl	8000514 <__aeabi_ui2d>
 80080e0:	2301      	movs	r3, #1
 80080e2:	4606      	mov	r6, r0
 80080e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080e8:	3d01      	subs	r5, #1
 80080ea:	9310      	str	r3, [sp, #64]	; 0x40
 80080ec:	e771      	b.n	8007fd2 <_dtoa_r+0x11a>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e7b6      	b.n	8008060 <_dtoa_r+0x1a8>
 80080f2:	900e      	str	r0, [sp, #56]	; 0x38
 80080f4:	e7b5      	b.n	8008062 <_dtoa_r+0x1aa>
 80080f6:	f1ca 0300 	rsb	r3, sl, #0
 80080fa:	9306      	str	r3, [sp, #24]
 80080fc:	2300      	movs	r3, #0
 80080fe:	eba8 080a 	sub.w	r8, r8, sl
 8008102:	930d      	str	r3, [sp, #52]	; 0x34
 8008104:	e7c2      	b.n	800808c <_dtoa_r+0x1d4>
 8008106:	2300      	movs	r3, #0
 8008108:	9308      	str	r3, [sp, #32]
 800810a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810c:	2b00      	cmp	r3, #0
 800810e:	dc39      	bgt.n	8008184 <_dtoa_r+0x2cc>
 8008110:	f04f 0901 	mov.w	r9, #1
 8008114:	f8cd 9004 	str.w	r9, [sp, #4]
 8008118:	464b      	mov	r3, r9
 800811a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800811e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008120:	2200      	movs	r2, #0
 8008122:	6042      	str	r2, [r0, #4]
 8008124:	2204      	movs	r2, #4
 8008126:	f102 0614 	add.w	r6, r2, #20
 800812a:	429e      	cmp	r6, r3
 800812c:	6841      	ldr	r1, [r0, #4]
 800812e:	d92f      	bls.n	8008190 <_dtoa_r+0x2d8>
 8008130:	4620      	mov	r0, r4
 8008132:	f000 fdfd 	bl	8008d30 <_Balloc>
 8008136:	9000      	str	r0, [sp, #0]
 8008138:	2800      	cmp	r0, #0
 800813a:	d14b      	bne.n	80081d4 <_dtoa_r+0x31c>
 800813c:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <_dtoa_r+0x318>)
 800813e:	4602      	mov	r2, r0
 8008140:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008144:	e6d1      	b.n	8007eea <_dtoa_r+0x32>
 8008146:	2301      	movs	r3, #1
 8008148:	e7de      	b.n	8008108 <_dtoa_r+0x250>
 800814a:	2300      	movs	r3, #0
 800814c:	9308      	str	r3, [sp, #32]
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	eb0a 0903 	add.w	r9, sl, r3
 8008154:	f109 0301 	add.w	r3, r9, #1
 8008158:	2b01      	cmp	r3, #1
 800815a:	9301      	str	r3, [sp, #4]
 800815c:	bfb8      	it	lt
 800815e:	2301      	movlt	r3, #1
 8008160:	e7dd      	b.n	800811e <_dtoa_r+0x266>
 8008162:	2301      	movs	r3, #1
 8008164:	e7f2      	b.n	800814c <_dtoa_r+0x294>
 8008166:	2501      	movs	r5, #1
 8008168:	2300      	movs	r3, #0
 800816a:	9305      	str	r3, [sp, #20]
 800816c:	9508      	str	r5, [sp, #32]
 800816e:	f04f 39ff 	mov.w	r9, #4294967295
 8008172:	2200      	movs	r2, #0
 8008174:	f8cd 9004 	str.w	r9, [sp, #4]
 8008178:	2312      	movs	r3, #18
 800817a:	9209      	str	r2, [sp, #36]	; 0x24
 800817c:	e7cf      	b.n	800811e <_dtoa_r+0x266>
 800817e:	2301      	movs	r3, #1
 8008180:	9308      	str	r3, [sp, #32]
 8008182:	e7f4      	b.n	800816e <_dtoa_r+0x2b6>
 8008184:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008188:	f8cd 9004 	str.w	r9, [sp, #4]
 800818c:	464b      	mov	r3, r9
 800818e:	e7c6      	b.n	800811e <_dtoa_r+0x266>
 8008190:	3101      	adds	r1, #1
 8008192:	6041      	str	r1, [r0, #4]
 8008194:	0052      	lsls	r2, r2, #1
 8008196:	e7c6      	b.n	8008126 <_dtoa_r+0x26e>
 8008198:	636f4361 	.word	0x636f4361
 800819c:	3fd287a7 	.word	0x3fd287a7
 80081a0:	8b60c8b3 	.word	0x8b60c8b3
 80081a4:	3fc68a28 	.word	0x3fc68a28
 80081a8:	509f79fb 	.word	0x509f79fb
 80081ac:	3fd34413 	.word	0x3fd34413
 80081b0:	08009fba 	.word	0x08009fba
 80081b4:	08009fd1 	.word	0x08009fd1
 80081b8:	7ff00000 	.word	0x7ff00000
 80081bc:	08009fb6 	.word	0x08009fb6
 80081c0:	08009fad 	.word	0x08009fad
 80081c4:	08009e89 	.word	0x08009e89
 80081c8:	3ff80000 	.word	0x3ff80000
 80081cc:	0800a0d0 	.word	0x0800a0d0
 80081d0:	0800a030 	.word	0x0800a030
 80081d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d6:	9a00      	ldr	r2, [sp, #0]
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	9b01      	ldr	r3, [sp, #4]
 80081dc:	2b0e      	cmp	r3, #14
 80081de:	f200 80ad 	bhi.w	800833c <_dtoa_r+0x484>
 80081e2:	2d00      	cmp	r5, #0
 80081e4:	f000 80aa 	beq.w	800833c <_dtoa_r+0x484>
 80081e8:	f1ba 0f00 	cmp.w	sl, #0
 80081ec:	dd36      	ble.n	800825c <_dtoa_r+0x3a4>
 80081ee:	4ac3      	ldr	r2, [pc, #780]	; (80084fc <_dtoa_r+0x644>)
 80081f0:	f00a 030f 	and.w	r3, sl, #15
 80081f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081f8:	ed93 7b00 	vldr	d7, [r3]
 80081fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008200:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008204:	eeb0 8a47 	vmov.f32	s16, s14
 8008208:	eef0 8a67 	vmov.f32	s17, s15
 800820c:	d016      	beq.n	800823c <_dtoa_r+0x384>
 800820e:	4bbc      	ldr	r3, [pc, #752]	; (8008500 <_dtoa_r+0x648>)
 8008210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008218:	f7f8 fb20 	bl	800085c <__aeabi_ddiv>
 800821c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008220:	f007 070f 	and.w	r7, r7, #15
 8008224:	2503      	movs	r5, #3
 8008226:	4eb6      	ldr	r6, [pc, #728]	; (8008500 <_dtoa_r+0x648>)
 8008228:	b957      	cbnz	r7, 8008240 <_dtoa_r+0x388>
 800822a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800822e:	ec53 2b18 	vmov	r2, r3, d8
 8008232:	f7f8 fb13 	bl	800085c <__aeabi_ddiv>
 8008236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800823a:	e029      	b.n	8008290 <_dtoa_r+0x3d8>
 800823c:	2502      	movs	r5, #2
 800823e:	e7f2      	b.n	8008226 <_dtoa_r+0x36e>
 8008240:	07f9      	lsls	r1, r7, #31
 8008242:	d508      	bpl.n	8008256 <_dtoa_r+0x39e>
 8008244:	ec51 0b18 	vmov	r0, r1, d8
 8008248:	e9d6 2300 	ldrd	r2, r3, [r6]
 800824c:	f7f8 f9dc 	bl	8000608 <__aeabi_dmul>
 8008250:	ec41 0b18 	vmov	d8, r0, r1
 8008254:	3501      	adds	r5, #1
 8008256:	107f      	asrs	r7, r7, #1
 8008258:	3608      	adds	r6, #8
 800825a:	e7e5      	b.n	8008228 <_dtoa_r+0x370>
 800825c:	f000 80a6 	beq.w	80083ac <_dtoa_r+0x4f4>
 8008260:	f1ca 0600 	rsb	r6, sl, #0
 8008264:	4ba5      	ldr	r3, [pc, #660]	; (80084fc <_dtoa_r+0x644>)
 8008266:	4fa6      	ldr	r7, [pc, #664]	; (8008500 <_dtoa_r+0x648>)
 8008268:	f006 020f 	and.w	r2, r6, #15
 800826c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008278:	f7f8 f9c6 	bl	8000608 <__aeabi_dmul>
 800827c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008280:	1136      	asrs	r6, r6, #4
 8008282:	2300      	movs	r3, #0
 8008284:	2502      	movs	r5, #2
 8008286:	2e00      	cmp	r6, #0
 8008288:	f040 8085 	bne.w	8008396 <_dtoa_r+0x4de>
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1d2      	bne.n	8008236 <_dtoa_r+0x37e>
 8008290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 808c 	beq.w	80083b0 <_dtoa_r+0x4f8>
 8008298:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800829c:	4b99      	ldr	r3, [pc, #612]	; (8008504 <_dtoa_r+0x64c>)
 800829e:	2200      	movs	r2, #0
 80082a0:	4630      	mov	r0, r6
 80082a2:	4639      	mov	r1, r7
 80082a4:	f7f8 fc22 	bl	8000aec <__aeabi_dcmplt>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	f000 8081 	beq.w	80083b0 <_dtoa_r+0x4f8>
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d07d      	beq.n	80083b0 <_dtoa_r+0x4f8>
 80082b4:	f1b9 0f00 	cmp.w	r9, #0
 80082b8:	dd3c      	ble.n	8008334 <_dtoa_r+0x47c>
 80082ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80082be:	9307      	str	r3, [sp, #28]
 80082c0:	2200      	movs	r2, #0
 80082c2:	4b91      	ldr	r3, [pc, #580]	; (8008508 <_dtoa_r+0x650>)
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f8 f99e 	bl	8000608 <__aeabi_dmul>
 80082cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d0:	3501      	adds	r5, #1
 80082d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80082d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082da:	4628      	mov	r0, r5
 80082dc:	f7f8 f92a 	bl	8000534 <__aeabi_i2d>
 80082e0:	4632      	mov	r2, r6
 80082e2:	463b      	mov	r3, r7
 80082e4:	f7f8 f990 	bl	8000608 <__aeabi_dmul>
 80082e8:	4b88      	ldr	r3, [pc, #544]	; (800850c <_dtoa_r+0x654>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	f7f7 ffd6 	bl	800029c <__adddf3>
 80082f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80082f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082f8:	9303      	str	r3, [sp, #12]
 80082fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d15c      	bne.n	80083ba <_dtoa_r+0x502>
 8008300:	4b83      	ldr	r3, [pc, #524]	; (8008510 <_dtoa_r+0x658>)
 8008302:	2200      	movs	r2, #0
 8008304:	4630      	mov	r0, r6
 8008306:	4639      	mov	r1, r7
 8008308:	f7f7 ffc6 	bl	8000298 <__aeabi_dsub>
 800830c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008310:	4606      	mov	r6, r0
 8008312:	460f      	mov	r7, r1
 8008314:	f7f8 fc08 	bl	8000b28 <__aeabi_dcmpgt>
 8008318:	2800      	cmp	r0, #0
 800831a:	f040 8296 	bne.w	800884a <_dtoa_r+0x992>
 800831e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008322:	4630      	mov	r0, r6
 8008324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008328:	4639      	mov	r1, r7
 800832a:	f7f8 fbdf 	bl	8000aec <__aeabi_dcmplt>
 800832e:	2800      	cmp	r0, #0
 8008330:	f040 8288 	bne.w	8008844 <_dtoa_r+0x98c>
 8008334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008338:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800833c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800833e:	2b00      	cmp	r3, #0
 8008340:	f2c0 8158 	blt.w	80085f4 <_dtoa_r+0x73c>
 8008344:	f1ba 0f0e 	cmp.w	sl, #14
 8008348:	f300 8154 	bgt.w	80085f4 <_dtoa_r+0x73c>
 800834c:	4b6b      	ldr	r3, [pc, #428]	; (80084fc <_dtoa_r+0x644>)
 800834e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008352:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	f280 80e3 	bge.w	8008524 <_dtoa_r+0x66c>
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f300 80df 	bgt.w	8008524 <_dtoa_r+0x66c>
 8008366:	f040 826d 	bne.w	8008844 <_dtoa_r+0x98c>
 800836a:	4b69      	ldr	r3, [pc, #420]	; (8008510 <_dtoa_r+0x658>)
 800836c:	2200      	movs	r2, #0
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	f7f8 f949 	bl	8000608 <__aeabi_dmul>
 8008376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800837a:	f7f8 fbcb 	bl	8000b14 <__aeabi_dcmpge>
 800837e:	9e01      	ldr	r6, [sp, #4]
 8008380:	4637      	mov	r7, r6
 8008382:	2800      	cmp	r0, #0
 8008384:	f040 8243 	bne.w	800880e <_dtoa_r+0x956>
 8008388:	9d00      	ldr	r5, [sp, #0]
 800838a:	2331      	movs	r3, #49	; 0x31
 800838c:	f805 3b01 	strb.w	r3, [r5], #1
 8008390:	f10a 0a01 	add.w	sl, sl, #1
 8008394:	e23f      	b.n	8008816 <_dtoa_r+0x95e>
 8008396:	07f2      	lsls	r2, r6, #31
 8008398:	d505      	bpl.n	80083a6 <_dtoa_r+0x4ee>
 800839a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800839e:	f7f8 f933 	bl	8000608 <__aeabi_dmul>
 80083a2:	3501      	adds	r5, #1
 80083a4:	2301      	movs	r3, #1
 80083a6:	1076      	asrs	r6, r6, #1
 80083a8:	3708      	adds	r7, #8
 80083aa:	e76c      	b.n	8008286 <_dtoa_r+0x3ce>
 80083ac:	2502      	movs	r5, #2
 80083ae:	e76f      	b.n	8008290 <_dtoa_r+0x3d8>
 80083b0:	9b01      	ldr	r3, [sp, #4]
 80083b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80083b6:	930c      	str	r3, [sp, #48]	; 0x30
 80083b8:	e78d      	b.n	80082d6 <_dtoa_r+0x41e>
 80083ba:	9900      	ldr	r1, [sp, #0]
 80083bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80083be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083c0:	4b4e      	ldr	r3, [pc, #312]	; (80084fc <_dtoa_r+0x644>)
 80083c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083c6:	4401      	add	r1, r0
 80083c8:	9102      	str	r1, [sp, #8]
 80083ca:	9908      	ldr	r1, [sp, #32]
 80083cc:	eeb0 8a47 	vmov.f32	s16, s14
 80083d0:	eef0 8a67 	vmov.f32	s17, s15
 80083d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083dc:	2900      	cmp	r1, #0
 80083de:	d045      	beq.n	800846c <_dtoa_r+0x5b4>
 80083e0:	494c      	ldr	r1, [pc, #304]	; (8008514 <_dtoa_r+0x65c>)
 80083e2:	2000      	movs	r0, #0
 80083e4:	f7f8 fa3a 	bl	800085c <__aeabi_ddiv>
 80083e8:	ec53 2b18 	vmov	r2, r3, d8
 80083ec:	f7f7 ff54 	bl	8000298 <__aeabi_dsub>
 80083f0:	9d00      	ldr	r5, [sp, #0]
 80083f2:	ec41 0b18 	vmov	d8, r0, r1
 80083f6:	4639      	mov	r1, r7
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7f8 fbb5 	bl	8000b68 <__aeabi_d2iz>
 80083fe:	900c      	str	r0, [sp, #48]	; 0x30
 8008400:	f7f8 f898 	bl	8000534 <__aeabi_i2d>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7f7 ff44 	bl	8000298 <__aeabi_dsub>
 8008410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008412:	3330      	adds	r3, #48	; 0x30
 8008414:	f805 3b01 	strb.w	r3, [r5], #1
 8008418:	ec53 2b18 	vmov	r2, r3, d8
 800841c:	4606      	mov	r6, r0
 800841e:	460f      	mov	r7, r1
 8008420:	f7f8 fb64 	bl	8000aec <__aeabi_dcmplt>
 8008424:	2800      	cmp	r0, #0
 8008426:	d165      	bne.n	80084f4 <_dtoa_r+0x63c>
 8008428:	4632      	mov	r2, r6
 800842a:	463b      	mov	r3, r7
 800842c:	4935      	ldr	r1, [pc, #212]	; (8008504 <_dtoa_r+0x64c>)
 800842e:	2000      	movs	r0, #0
 8008430:	f7f7 ff32 	bl	8000298 <__aeabi_dsub>
 8008434:	ec53 2b18 	vmov	r2, r3, d8
 8008438:	f7f8 fb58 	bl	8000aec <__aeabi_dcmplt>
 800843c:	2800      	cmp	r0, #0
 800843e:	f040 80b9 	bne.w	80085b4 <_dtoa_r+0x6fc>
 8008442:	9b02      	ldr	r3, [sp, #8]
 8008444:	429d      	cmp	r5, r3
 8008446:	f43f af75 	beq.w	8008334 <_dtoa_r+0x47c>
 800844a:	4b2f      	ldr	r3, [pc, #188]	; (8008508 <_dtoa_r+0x650>)
 800844c:	ec51 0b18 	vmov	r0, r1, d8
 8008450:	2200      	movs	r2, #0
 8008452:	f7f8 f8d9 	bl	8000608 <__aeabi_dmul>
 8008456:	4b2c      	ldr	r3, [pc, #176]	; (8008508 <_dtoa_r+0x650>)
 8008458:	ec41 0b18 	vmov	d8, r0, r1
 800845c:	2200      	movs	r2, #0
 800845e:	4630      	mov	r0, r6
 8008460:	4639      	mov	r1, r7
 8008462:	f7f8 f8d1 	bl	8000608 <__aeabi_dmul>
 8008466:	4606      	mov	r6, r0
 8008468:	460f      	mov	r7, r1
 800846a:	e7c4      	b.n	80083f6 <_dtoa_r+0x53e>
 800846c:	ec51 0b17 	vmov	r0, r1, d7
 8008470:	f7f8 f8ca 	bl	8000608 <__aeabi_dmul>
 8008474:	9b02      	ldr	r3, [sp, #8]
 8008476:	9d00      	ldr	r5, [sp, #0]
 8008478:	930c      	str	r3, [sp, #48]	; 0x30
 800847a:	ec41 0b18 	vmov	d8, r0, r1
 800847e:	4639      	mov	r1, r7
 8008480:	4630      	mov	r0, r6
 8008482:	f7f8 fb71 	bl	8000b68 <__aeabi_d2iz>
 8008486:	9011      	str	r0, [sp, #68]	; 0x44
 8008488:	f7f8 f854 	bl	8000534 <__aeabi_i2d>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4630      	mov	r0, r6
 8008492:	4639      	mov	r1, r7
 8008494:	f7f7 ff00 	bl	8000298 <__aeabi_dsub>
 8008498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800849a:	3330      	adds	r3, #48	; 0x30
 800849c:	f805 3b01 	strb.w	r3, [r5], #1
 80084a0:	9b02      	ldr	r3, [sp, #8]
 80084a2:	429d      	cmp	r5, r3
 80084a4:	4606      	mov	r6, r0
 80084a6:	460f      	mov	r7, r1
 80084a8:	f04f 0200 	mov.w	r2, #0
 80084ac:	d134      	bne.n	8008518 <_dtoa_r+0x660>
 80084ae:	4b19      	ldr	r3, [pc, #100]	; (8008514 <_dtoa_r+0x65c>)
 80084b0:	ec51 0b18 	vmov	r0, r1, d8
 80084b4:	f7f7 fef2 	bl	800029c <__adddf3>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f8 fb32 	bl	8000b28 <__aeabi_dcmpgt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d175      	bne.n	80085b4 <_dtoa_r+0x6fc>
 80084c8:	ec53 2b18 	vmov	r2, r3, d8
 80084cc:	4911      	ldr	r1, [pc, #68]	; (8008514 <_dtoa_r+0x65c>)
 80084ce:	2000      	movs	r0, #0
 80084d0:	f7f7 fee2 	bl	8000298 <__aeabi_dsub>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f8 fb06 	bl	8000aec <__aeabi_dcmplt>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f43f af27 	beq.w	8008334 <_dtoa_r+0x47c>
 80084e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084e8:	1e6b      	subs	r3, r5, #1
 80084ea:	930c      	str	r3, [sp, #48]	; 0x30
 80084ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084f0:	2b30      	cmp	r3, #48	; 0x30
 80084f2:	d0f8      	beq.n	80084e6 <_dtoa_r+0x62e>
 80084f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80084f8:	e04a      	b.n	8008590 <_dtoa_r+0x6d8>
 80084fa:	bf00      	nop
 80084fc:	0800a0d0 	.word	0x0800a0d0
 8008500:	0800a0a8 	.word	0x0800a0a8
 8008504:	3ff00000 	.word	0x3ff00000
 8008508:	40240000 	.word	0x40240000
 800850c:	401c0000 	.word	0x401c0000
 8008510:	40140000 	.word	0x40140000
 8008514:	3fe00000 	.word	0x3fe00000
 8008518:	4baf      	ldr	r3, [pc, #700]	; (80087d8 <_dtoa_r+0x920>)
 800851a:	f7f8 f875 	bl	8000608 <__aeabi_dmul>
 800851e:	4606      	mov	r6, r0
 8008520:	460f      	mov	r7, r1
 8008522:	e7ac      	b.n	800847e <_dtoa_r+0x5c6>
 8008524:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008528:	9d00      	ldr	r5, [sp, #0]
 800852a:	4642      	mov	r2, r8
 800852c:	464b      	mov	r3, r9
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7f8 f993 	bl	800085c <__aeabi_ddiv>
 8008536:	f7f8 fb17 	bl	8000b68 <__aeabi_d2iz>
 800853a:	9002      	str	r0, [sp, #8]
 800853c:	f7f7 fffa 	bl	8000534 <__aeabi_i2d>
 8008540:	4642      	mov	r2, r8
 8008542:	464b      	mov	r3, r9
 8008544:	f7f8 f860 	bl	8000608 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4630      	mov	r0, r6
 800854e:	4639      	mov	r1, r7
 8008550:	f7f7 fea2 	bl	8000298 <__aeabi_dsub>
 8008554:	9e02      	ldr	r6, [sp, #8]
 8008556:	9f01      	ldr	r7, [sp, #4]
 8008558:	3630      	adds	r6, #48	; 0x30
 800855a:	f805 6b01 	strb.w	r6, [r5], #1
 800855e:	9e00      	ldr	r6, [sp, #0]
 8008560:	1bae      	subs	r6, r5, r6
 8008562:	42b7      	cmp	r7, r6
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	d137      	bne.n	80085da <_dtoa_r+0x722>
 800856a:	f7f7 fe97 	bl	800029c <__adddf3>
 800856e:	4642      	mov	r2, r8
 8008570:	464b      	mov	r3, r9
 8008572:	4606      	mov	r6, r0
 8008574:	460f      	mov	r7, r1
 8008576:	f7f8 fad7 	bl	8000b28 <__aeabi_dcmpgt>
 800857a:	b9c8      	cbnz	r0, 80085b0 <_dtoa_r+0x6f8>
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f8 faa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008588:	b110      	cbz	r0, 8008590 <_dtoa_r+0x6d8>
 800858a:	9b02      	ldr	r3, [sp, #8]
 800858c:	07d9      	lsls	r1, r3, #31
 800858e:	d40f      	bmi.n	80085b0 <_dtoa_r+0x6f8>
 8008590:	4620      	mov	r0, r4
 8008592:	4659      	mov	r1, fp
 8008594:	f000 fc0c 	bl	8008db0 <_Bfree>
 8008598:	2300      	movs	r3, #0
 800859a:	702b      	strb	r3, [r5, #0]
 800859c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800859e:	f10a 0001 	add.w	r0, sl, #1
 80085a2:	6018      	str	r0, [r3, #0]
 80085a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f43f acd8 	beq.w	8007f5c <_dtoa_r+0xa4>
 80085ac:	601d      	str	r5, [r3, #0]
 80085ae:	e4d5      	b.n	8007f5c <_dtoa_r+0xa4>
 80085b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80085b4:	462b      	mov	r3, r5
 80085b6:	461d      	mov	r5, r3
 80085b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085bc:	2a39      	cmp	r2, #57	; 0x39
 80085be:	d108      	bne.n	80085d2 <_dtoa_r+0x71a>
 80085c0:	9a00      	ldr	r2, [sp, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d1f7      	bne.n	80085b6 <_dtoa_r+0x6fe>
 80085c6:	9a07      	ldr	r2, [sp, #28]
 80085c8:	9900      	ldr	r1, [sp, #0]
 80085ca:	3201      	adds	r2, #1
 80085cc:	9207      	str	r2, [sp, #28]
 80085ce:	2230      	movs	r2, #48	; 0x30
 80085d0:	700a      	strb	r2, [r1, #0]
 80085d2:	781a      	ldrb	r2, [r3, #0]
 80085d4:	3201      	adds	r2, #1
 80085d6:	701a      	strb	r2, [r3, #0]
 80085d8:	e78c      	b.n	80084f4 <_dtoa_r+0x63c>
 80085da:	4b7f      	ldr	r3, [pc, #508]	; (80087d8 <_dtoa_r+0x920>)
 80085dc:	2200      	movs	r2, #0
 80085de:	f7f8 f813 	bl	8000608 <__aeabi_dmul>
 80085e2:	2200      	movs	r2, #0
 80085e4:	2300      	movs	r3, #0
 80085e6:	4606      	mov	r6, r0
 80085e8:	460f      	mov	r7, r1
 80085ea:	f7f8 fa75 	bl	8000ad8 <__aeabi_dcmpeq>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d09b      	beq.n	800852a <_dtoa_r+0x672>
 80085f2:	e7cd      	b.n	8008590 <_dtoa_r+0x6d8>
 80085f4:	9a08      	ldr	r2, [sp, #32]
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	f000 80c4 	beq.w	8008784 <_dtoa_r+0x8cc>
 80085fc:	9a05      	ldr	r2, [sp, #20]
 80085fe:	2a01      	cmp	r2, #1
 8008600:	f300 80a8 	bgt.w	8008754 <_dtoa_r+0x89c>
 8008604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008606:	2a00      	cmp	r2, #0
 8008608:	f000 80a0 	beq.w	800874c <_dtoa_r+0x894>
 800860c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008610:	9e06      	ldr	r6, [sp, #24]
 8008612:	4645      	mov	r5, r8
 8008614:	9a04      	ldr	r2, [sp, #16]
 8008616:	2101      	movs	r1, #1
 8008618:	441a      	add	r2, r3
 800861a:	4620      	mov	r0, r4
 800861c:	4498      	add	r8, r3
 800861e:	9204      	str	r2, [sp, #16]
 8008620:	f000 fc82 	bl	8008f28 <__i2b>
 8008624:	4607      	mov	r7, r0
 8008626:	2d00      	cmp	r5, #0
 8008628:	dd0b      	ble.n	8008642 <_dtoa_r+0x78a>
 800862a:	9b04      	ldr	r3, [sp, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	dd08      	ble.n	8008642 <_dtoa_r+0x78a>
 8008630:	42ab      	cmp	r3, r5
 8008632:	9a04      	ldr	r2, [sp, #16]
 8008634:	bfa8      	it	ge
 8008636:	462b      	movge	r3, r5
 8008638:	eba8 0803 	sub.w	r8, r8, r3
 800863c:	1aed      	subs	r5, r5, r3
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	9b06      	ldr	r3, [sp, #24]
 8008644:	b1fb      	cbz	r3, 8008686 <_dtoa_r+0x7ce>
 8008646:	9b08      	ldr	r3, [sp, #32]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 809f 	beq.w	800878c <_dtoa_r+0x8d4>
 800864e:	2e00      	cmp	r6, #0
 8008650:	dd11      	ble.n	8008676 <_dtoa_r+0x7be>
 8008652:	4639      	mov	r1, r7
 8008654:	4632      	mov	r2, r6
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fd22 	bl	80090a0 <__pow5mult>
 800865c:	465a      	mov	r2, fp
 800865e:	4601      	mov	r1, r0
 8008660:	4607      	mov	r7, r0
 8008662:	4620      	mov	r0, r4
 8008664:	f000 fc76 	bl	8008f54 <__multiply>
 8008668:	4659      	mov	r1, fp
 800866a:	9007      	str	r0, [sp, #28]
 800866c:	4620      	mov	r0, r4
 800866e:	f000 fb9f 	bl	8008db0 <_Bfree>
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	469b      	mov	fp, r3
 8008676:	9b06      	ldr	r3, [sp, #24]
 8008678:	1b9a      	subs	r2, r3, r6
 800867a:	d004      	beq.n	8008686 <_dtoa_r+0x7ce>
 800867c:	4659      	mov	r1, fp
 800867e:	4620      	mov	r0, r4
 8008680:	f000 fd0e 	bl	80090a0 <__pow5mult>
 8008684:	4683      	mov	fp, r0
 8008686:	2101      	movs	r1, #1
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fc4d 	bl	8008f28 <__i2b>
 800868e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008690:	2b00      	cmp	r3, #0
 8008692:	4606      	mov	r6, r0
 8008694:	dd7c      	ble.n	8008790 <_dtoa_r+0x8d8>
 8008696:	461a      	mov	r2, r3
 8008698:	4601      	mov	r1, r0
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fd00 	bl	80090a0 <__pow5mult>
 80086a0:	9b05      	ldr	r3, [sp, #20]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	4606      	mov	r6, r0
 80086a6:	dd76      	ble.n	8008796 <_dtoa_r+0x8de>
 80086a8:	2300      	movs	r3, #0
 80086aa:	9306      	str	r3, [sp, #24]
 80086ac:	6933      	ldr	r3, [r6, #16]
 80086ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086b2:	6918      	ldr	r0, [r3, #16]
 80086b4:	f000 fbe8 	bl	8008e88 <__hi0bits>
 80086b8:	f1c0 0020 	rsb	r0, r0, #32
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	4418      	add	r0, r3
 80086c0:	f010 001f 	ands.w	r0, r0, #31
 80086c4:	f000 8086 	beq.w	80087d4 <_dtoa_r+0x91c>
 80086c8:	f1c0 0320 	rsb	r3, r0, #32
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	dd7f      	ble.n	80087d0 <_dtoa_r+0x918>
 80086d0:	f1c0 001c 	rsb	r0, r0, #28
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	4403      	add	r3, r0
 80086d8:	4480      	add	r8, r0
 80086da:	4405      	add	r5, r0
 80086dc:	9304      	str	r3, [sp, #16]
 80086de:	f1b8 0f00 	cmp.w	r8, #0
 80086e2:	dd05      	ble.n	80086f0 <_dtoa_r+0x838>
 80086e4:	4659      	mov	r1, fp
 80086e6:	4642      	mov	r2, r8
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 fd33 	bl	8009154 <__lshift>
 80086ee:	4683      	mov	fp, r0
 80086f0:	9b04      	ldr	r3, [sp, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd05      	ble.n	8008702 <_dtoa_r+0x84a>
 80086f6:	4631      	mov	r1, r6
 80086f8:	461a      	mov	r2, r3
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 fd2a 	bl	8009154 <__lshift>
 8008700:	4606      	mov	r6, r0
 8008702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008704:	2b00      	cmp	r3, #0
 8008706:	d069      	beq.n	80087dc <_dtoa_r+0x924>
 8008708:	4631      	mov	r1, r6
 800870a:	4658      	mov	r0, fp
 800870c:	f000 fd8e 	bl	800922c <__mcmp>
 8008710:	2800      	cmp	r0, #0
 8008712:	da63      	bge.n	80087dc <_dtoa_r+0x924>
 8008714:	2300      	movs	r3, #0
 8008716:	4659      	mov	r1, fp
 8008718:	220a      	movs	r2, #10
 800871a:	4620      	mov	r0, r4
 800871c:	f000 fb6a 	bl	8008df4 <__multadd>
 8008720:	9b08      	ldr	r3, [sp, #32]
 8008722:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008726:	4683      	mov	fp, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 818f 	beq.w	8008a4c <_dtoa_r+0xb94>
 800872e:	4639      	mov	r1, r7
 8008730:	2300      	movs	r3, #0
 8008732:	220a      	movs	r2, #10
 8008734:	4620      	mov	r0, r4
 8008736:	f000 fb5d 	bl	8008df4 <__multadd>
 800873a:	f1b9 0f00 	cmp.w	r9, #0
 800873e:	4607      	mov	r7, r0
 8008740:	f300 808e 	bgt.w	8008860 <_dtoa_r+0x9a8>
 8008744:	9b05      	ldr	r3, [sp, #20]
 8008746:	2b02      	cmp	r3, #2
 8008748:	dc50      	bgt.n	80087ec <_dtoa_r+0x934>
 800874a:	e089      	b.n	8008860 <_dtoa_r+0x9a8>
 800874c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800874e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008752:	e75d      	b.n	8008610 <_dtoa_r+0x758>
 8008754:	9b01      	ldr	r3, [sp, #4]
 8008756:	1e5e      	subs	r6, r3, #1
 8008758:	9b06      	ldr	r3, [sp, #24]
 800875a:	42b3      	cmp	r3, r6
 800875c:	bfbf      	itttt	lt
 800875e:	9b06      	ldrlt	r3, [sp, #24]
 8008760:	9606      	strlt	r6, [sp, #24]
 8008762:	1af2      	sublt	r2, r6, r3
 8008764:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008766:	bfb6      	itet	lt
 8008768:	189b      	addlt	r3, r3, r2
 800876a:	1b9e      	subge	r6, r3, r6
 800876c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800876e:	9b01      	ldr	r3, [sp, #4]
 8008770:	bfb8      	it	lt
 8008772:	2600      	movlt	r6, #0
 8008774:	2b00      	cmp	r3, #0
 8008776:	bfb5      	itete	lt
 8008778:	eba8 0503 	sublt.w	r5, r8, r3
 800877c:	9b01      	ldrge	r3, [sp, #4]
 800877e:	2300      	movlt	r3, #0
 8008780:	4645      	movge	r5, r8
 8008782:	e747      	b.n	8008614 <_dtoa_r+0x75c>
 8008784:	9e06      	ldr	r6, [sp, #24]
 8008786:	9f08      	ldr	r7, [sp, #32]
 8008788:	4645      	mov	r5, r8
 800878a:	e74c      	b.n	8008626 <_dtoa_r+0x76e>
 800878c:	9a06      	ldr	r2, [sp, #24]
 800878e:	e775      	b.n	800867c <_dtoa_r+0x7c4>
 8008790:	9b05      	ldr	r3, [sp, #20]
 8008792:	2b01      	cmp	r3, #1
 8008794:	dc18      	bgt.n	80087c8 <_dtoa_r+0x910>
 8008796:	9b02      	ldr	r3, [sp, #8]
 8008798:	b9b3      	cbnz	r3, 80087c8 <_dtoa_r+0x910>
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087a0:	b9a3      	cbnz	r3, 80087cc <_dtoa_r+0x914>
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087a8:	0d1b      	lsrs	r3, r3, #20
 80087aa:	051b      	lsls	r3, r3, #20
 80087ac:	b12b      	cbz	r3, 80087ba <_dtoa_r+0x902>
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	3301      	adds	r3, #1
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	f108 0801 	add.w	r8, r8, #1
 80087b8:	2301      	movs	r3, #1
 80087ba:	9306      	str	r3, [sp, #24]
 80087bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f47f af74 	bne.w	80086ac <_dtoa_r+0x7f4>
 80087c4:	2001      	movs	r0, #1
 80087c6:	e779      	b.n	80086bc <_dtoa_r+0x804>
 80087c8:	2300      	movs	r3, #0
 80087ca:	e7f6      	b.n	80087ba <_dtoa_r+0x902>
 80087cc:	9b02      	ldr	r3, [sp, #8]
 80087ce:	e7f4      	b.n	80087ba <_dtoa_r+0x902>
 80087d0:	d085      	beq.n	80086de <_dtoa_r+0x826>
 80087d2:	4618      	mov	r0, r3
 80087d4:	301c      	adds	r0, #28
 80087d6:	e77d      	b.n	80086d4 <_dtoa_r+0x81c>
 80087d8:	40240000 	.word	0x40240000
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	dc38      	bgt.n	8008854 <_dtoa_r+0x99c>
 80087e2:	9b05      	ldr	r3, [sp, #20]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	dd35      	ble.n	8008854 <_dtoa_r+0x99c>
 80087e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80087ec:	f1b9 0f00 	cmp.w	r9, #0
 80087f0:	d10d      	bne.n	800880e <_dtoa_r+0x956>
 80087f2:	4631      	mov	r1, r6
 80087f4:	464b      	mov	r3, r9
 80087f6:	2205      	movs	r2, #5
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 fafb 	bl	8008df4 <__multadd>
 80087fe:	4601      	mov	r1, r0
 8008800:	4606      	mov	r6, r0
 8008802:	4658      	mov	r0, fp
 8008804:	f000 fd12 	bl	800922c <__mcmp>
 8008808:	2800      	cmp	r0, #0
 800880a:	f73f adbd 	bgt.w	8008388 <_dtoa_r+0x4d0>
 800880e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008810:	9d00      	ldr	r5, [sp, #0]
 8008812:	ea6f 0a03 	mvn.w	sl, r3
 8008816:	f04f 0800 	mov.w	r8, #0
 800881a:	4631      	mov	r1, r6
 800881c:	4620      	mov	r0, r4
 800881e:	f000 fac7 	bl	8008db0 <_Bfree>
 8008822:	2f00      	cmp	r7, #0
 8008824:	f43f aeb4 	beq.w	8008590 <_dtoa_r+0x6d8>
 8008828:	f1b8 0f00 	cmp.w	r8, #0
 800882c:	d005      	beq.n	800883a <_dtoa_r+0x982>
 800882e:	45b8      	cmp	r8, r7
 8008830:	d003      	beq.n	800883a <_dtoa_r+0x982>
 8008832:	4641      	mov	r1, r8
 8008834:	4620      	mov	r0, r4
 8008836:	f000 fabb 	bl	8008db0 <_Bfree>
 800883a:	4639      	mov	r1, r7
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fab7 	bl	8008db0 <_Bfree>
 8008842:	e6a5      	b.n	8008590 <_dtoa_r+0x6d8>
 8008844:	2600      	movs	r6, #0
 8008846:	4637      	mov	r7, r6
 8008848:	e7e1      	b.n	800880e <_dtoa_r+0x956>
 800884a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800884c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008850:	4637      	mov	r7, r6
 8008852:	e599      	b.n	8008388 <_dtoa_r+0x4d0>
 8008854:	9b08      	ldr	r3, [sp, #32]
 8008856:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 80fd 	beq.w	8008a5a <_dtoa_r+0xba2>
 8008860:	2d00      	cmp	r5, #0
 8008862:	dd05      	ble.n	8008870 <_dtoa_r+0x9b8>
 8008864:	4639      	mov	r1, r7
 8008866:	462a      	mov	r2, r5
 8008868:	4620      	mov	r0, r4
 800886a:	f000 fc73 	bl	8009154 <__lshift>
 800886e:	4607      	mov	r7, r0
 8008870:	9b06      	ldr	r3, [sp, #24]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d05c      	beq.n	8008930 <_dtoa_r+0xa78>
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fa59 	bl	8008d30 <_Balloc>
 800887e:	4605      	mov	r5, r0
 8008880:	b928      	cbnz	r0, 800888e <_dtoa_r+0x9d6>
 8008882:	4b80      	ldr	r3, [pc, #512]	; (8008a84 <_dtoa_r+0xbcc>)
 8008884:	4602      	mov	r2, r0
 8008886:	f240 21ea 	movw	r1, #746	; 0x2ea
 800888a:	f7ff bb2e 	b.w	8007eea <_dtoa_r+0x32>
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	3202      	adds	r2, #2
 8008892:	0092      	lsls	r2, r2, #2
 8008894:	f107 010c 	add.w	r1, r7, #12
 8008898:	300c      	adds	r0, #12
 800889a:	f7fe faf2 	bl	8006e82 <memcpy>
 800889e:	2201      	movs	r2, #1
 80088a0:	4629      	mov	r1, r5
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 fc56 	bl	8009154 <__lshift>
 80088a8:	9b00      	ldr	r3, [sp, #0]
 80088aa:	3301      	adds	r3, #1
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	9b00      	ldr	r3, [sp, #0]
 80088b0:	444b      	add	r3, r9
 80088b2:	9307      	str	r3, [sp, #28]
 80088b4:	9b02      	ldr	r3, [sp, #8]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	46b8      	mov	r8, r7
 80088bc:	9306      	str	r3, [sp, #24]
 80088be:	4607      	mov	r7, r0
 80088c0:	9b01      	ldr	r3, [sp, #4]
 80088c2:	4631      	mov	r1, r6
 80088c4:	3b01      	subs	r3, #1
 80088c6:	4658      	mov	r0, fp
 80088c8:	9302      	str	r3, [sp, #8]
 80088ca:	f7ff fa69 	bl	8007da0 <quorem>
 80088ce:	4603      	mov	r3, r0
 80088d0:	3330      	adds	r3, #48	; 0x30
 80088d2:	9004      	str	r0, [sp, #16]
 80088d4:	4641      	mov	r1, r8
 80088d6:	4658      	mov	r0, fp
 80088d8:	9308      	str	r3, [sp, #32]
 80088da:	f000 fca7 	bl	800922c <__mcmp>
 80088de:	463a      	mov	r2, r7
 80088e0:	4681      	mov	r9, r0
 80088e2:	4631      	mov	r1, r6
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fcbd 	bl	8009264 <__mdiff>
 80088ea:	68c2      	ldr	r2, [r0, #12]
 80088ec:	9b08      	ldr	r3, [sp, #32]
 80088ee:	4605      	mov	r5, r0
 80088f0:	bb02      	cbnz	r2, 8008934 <_dtoa_r+0xa7c>
 80088f2:	4601      	mov	r1, r0
 80088f4:	4658      	mov	r0, fp
 80088f6:	f000 fc99 	bl	800922c <__mcmp>
 80088fa:	9b08      	ldr	r3, [sp, #32]
 80088fc:	4602      	mov	r2, r0
 80088fe:	4629      	mov	r1, r5
 8008900:	4620      	mov	r0, r4
 8008902:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008906:	f000 fa53 	bl	8008db0 <_Bfree>
 800890a:	9b05      	ldr	r3, [sp, #20]
 800890c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800890e:	9d01      	ldr	r5, [sp, #4]
 8008910:	ea43 0102 	orr.w	r1, r3, r2
 8008914:	9b06      	ldr	r3, [sp, #24]
 8008916:	430b      	orrs	r3, r1
 8008918:	9b08      	ldr	r3, [sp, #32]
 800891a:	d10d      	bne.n	8008938 <_dtoa_r+0xa80>
 800891c:	2b39      	cmp	r3, #57	; 0x39
 800891e:	d029      	beq.n	8008974 <_dtoa_r+0xabc>
 8008920:	f1b9 0f00 	cmp.w	r9, #0
 8008924:	dd01      	ble.n	800892a <_dtoa_r+0xa72>
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	3331      	adds	r3, #49	; 0x31
 800892a:	9a02      	ldr	r2, [sp, #8]
 800892c:	7013      	strb	r3, [r2, #0]
 800892e:	e774      	b.n	800881a <_dtoa_r+0x962>
 8008930:	4638      	mov	r0, r7
 8008932:	e7b9      	b.n	80088a8 <_dtoa_r+0x9f0>
 8008934:	2201      	movs	r2, #1
 8008936:	e7e2      	b.n	80088fe <_dtoa_r+0xa46>
 8008938:	f1b9 0f00 	cmp.w	r9, #0
 800893c:	db06      	blt.n	800894c <_dtoa_r+0xa94>
 800893e:	9905      	ldr	r1, [sp, #20]
 8008940:	ea41 0909 	orr.w	r9, r1, r9
 8008944:	9906      	ldr	r1, [sp, #24]
 8008946:	ea59 0101 	orrs.w	r1, r9, r1
 800894a:	d120      	bne.n	800898e <_dtoa_r+0xad6>
 800894c:	2a00      	cmp	r2, #0
 800894e:	ddec      	ble.n	800892a <_dtoa_r+0xa72>
 8008950:	4659      	mov	r1, fp
 8008952:	2201      	movs	r2, #1
 8008954:	4620      	mov	r0, r4
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	f000 fbfc 	bl	8009154 <__lshift>
 800895c:	4631      	mov	r1, r6
 800895e:	4683      	mov	fp, r0
 8008960:	f000 fc64 	bl	800922c <__mcmp>
 8008964:	2800      	cmp	r0, #0
 8008966:	9b01      	ldr	r3, [sp, #4]
 8008968:	dc02      	bgt.n	8008970 <_dtoa_r+0xab8>
 800896a:	d1de      	bne.n	800892a <_dtoa_r+0xa72>
 800896c:	07da      	lsls	r2, r3, #31
 800896e:	d5dc      	bpl.n	800892a <_dtoa_r+0xa72>
 8008970:	2b39      	cmp	r3, #57	; 0x39
 8008972:	d1d8      	bne.n	8008926 <_dtoa_r+0xa6e>
 8008974:	9a02      	ldr	r2, [sp, #8]
 8008976:	2339      	movs	r3, #57	; 0x39
 8008978:	7013      	strb	r3, [r2, #0]
 800897a:	462b      	mov	r3, r5
 800897c:	461d      	mov	r5, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008984:	2a39      	cmp	r2, #57	; 0x39
 8008986:	d050      	beq.n	8008a2a <_dtoa_r+0xb72>
 8008988:	3201      	adds	r2, #1
 800898a:	701a      	strb	r2, [r3, #0]
 800898c:	e745      	b.n	800881a <_dtoa_r+0x962>
 800898e:	2a00      	cmp	r2, #0
 8008990:	dd03      	ble.n	800899a <_dtoa_r+0xae2>
 8008992:	2b39      	cmp	r3, #57	; 0x39
 8008994:	d0ee      	beq.n	8008974 <_dtoa_r+0xabc>
 8008996:	3301      	adds	r3, #1
 8008998:	e7c7      	b.n	800892a <_dtoa_r+0xa72>
 800899a:	9a01      	ldr	r2, [sp, #4]
 800899c:	9907      	ldr	r1, [sp, #28]
 800899e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089a2:	428a      	cmp	r2, r1
 80089a4:	d02a      	beq.n	80089fc <_dtoa_r+0xb44>
 80089a6:	4659      	mov	r1, fp
 80089a8:	2300      	movs	r3, #0
 80089aa:	220a      	movs	r2, #10
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fa21 	bl	8008df4 <__multadd>
 80089b2:	45b8      	cmp	r8, r7
 80089b4:	4683      	mov	fp, r0
 80089b6:	f04f 0300 	mov.w	r3, #0
 80089ba:	f04f 020a 	mov.w	r2, #10
 80089be:	4641      	mov	r1, r8
 80089c0:	4620      	mov	r0, r4
 80089c2:	d107      	bne.n	80089d4 <_dtoa_r+0xb1c>
 80089c4:	f000 fa16 	bl	8008df4 <__multadd>
 80089c8:	4680      	mov	r8, r0
 80089ca:	4607      	mov	r7, r0
 80089cc:	9b01      	ldr	r3, [sp, #4]
 80089ce:	3301      	adds	r3, #1
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	e775      	b.n	80088c0 <_dtoa_r+0xa08>
 80089d4:	f000 fa0e 	bl	8008df4 <__multadd>
 80089d8:	4639      	mov	r1, r7
 80089da:	4680      	mov	r8, r0
 80089dc:	2300      	movs	r3, #0
 80089de:	220a      	movs	r2, #10
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fa07 	bl	8008df4 <__multadd>
 80089e6:	4607      	mov	r7, r0
 80089e8:	e7f0      	b.n	80089cc <_dtoa_r+0xb14>
 80089ea:	f1b9 0f00 	cmp.w	r9, #0
 80089ee:	9a00      	ldr	r2, [sp, #0]
 80089f0:	bfcc      	ite	gt
 80089f2:	464d      	movgt	r5, r9
 80089f4:	2501      	movle	r5, #1
 80089f6:	4415      	add	r5, r2
 80089f8:	f04f 0800 	mov.w	r8, #0
 80089fc:	4659      	mov	r1, fp
 80089fe:	2201      	movs	r2, #1
 8008a00:	4620      	mov	r0, r4
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	f000 fba6 	bl	8009154 <__lshift>
 8008a08:	4631      	mov	r1, r6
 8008a0a:	4683      	mov	fp, r0
 8008a0c:	f000 fc0e 	bl	800922c <__mcmp>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	dcb2      	bgt.n	800897a <_dtoa_r+0xac2>
 8008a14:	d102      	bne.n	8008a1c <_dtoa_r+0xb64>
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	07db      	lsls	r3, r3, #31
 8008a1a:	d4ae      	bmi.n	800897a <_dtoa_r+0xac2>
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	461d      	mov	r5, r3
 8008a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a24:	2a30      	cmp	r2, #48	; 0x30
 8008a26:	d0fa      	beq.n	8008a1e <_dtoa_r+0xb66>
 8008a28:	e6f7      	b.n	800881a <_dtoa_r+0x962>
 8008a2a:	9a00      	ldr	r2, [sp, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d1a5      	bne.n	800897c <_dtoa_r+0xac4>
 8008a30:	f10a 0a01 	add.w	sl, sl, #1
 8008a34:	2331      	movs	r3, #49	; 0x31
 8008a36:	e779      	b.n	800892c <_dtoa_r+0xa74>
 8008a38:	4b13      	ldr	r3, [pc, #76]	; (8008a88 <_dtoa_r+0xbd0>)
 8008a3a:	f7ff baaf 	b.w	8007f9c <_dtoa_r+0xe4>
 8008a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f47f aa86 	bne.w	8007f52 <_dtoa_r+0x9a>
 8008a46:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <_dtoa_r+0xbd4>)
 8008a48:	f7ff baa8 	b.w	8007f9c <_dtoa_r+0xe4>
 8008a4c:	f1b9 0f00 	cmp.w	r9, #0
 8008a50:	dc03      	bgt.n	8008a5a <_dtoa_r+0xba2>
 8008a52:	9b05      	ldr	r3, [sp, #20]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	f73f aec9 	bgt.w	80087ec <_dtoa_r+0x934>
 8008a5a:	9d00      	ldr	r5, [sp, #0]
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4658      	mov	r0, fp
 8008a60:	f7ff f99e 	bl	8007da0 <quorem>
 8008a64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a68:	f805 3b01 	strb.w	r3, [r5], #1
 8008a6c:	9a00      	ldr	r2, [sp, #0]
 8008a6e:	1aaa      	subs	r2, r5, r2
 8008a70:	4591      	cmp	r9, r2
 8008a72:	ddba      	ble.n	80089ea <_dtoa_r+0xb32>
 8008a74:	4659      	mov	r1, fp
 8008a76:	2300      	movs	r3, #0
 8008a78:	220a      	movs	r2, #10
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 f9ba 	bl	8008df4 <__multadd>
 8008a80:	4683      	mov	fp, r0
 8008a82:	e7eb      	b.n	8008a5c <_dtoa_r+0xba4>
 8008a84:	0800a030 	.word	0x0800a030
 8008a88:	08009e88 	.word	0x08009e88
 8008a8c:	08009fad 	.word	0x08009fad

08008a90 <__sflush_r>:
 8008a90:	898a      	ldrh	r2, [r1, #12]
 8008a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a96:	4605      	mov	r5, r0
 8008a98:	0710      	lsls	r0, r2, #28
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	d458      	bmi.n	8008b50 <__sflush_r+0xc0>
 8008a9e:	684b      	ldr	r3, [r1, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dc05      	bgt.n	8008ab0 <__sflush_r+0x20>
 8008aa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dc02      	bgt.n	8008ab0 <__sflush_r+0x20>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ab2:	2e00      	cmp	r6, #0
 8008ab4:	d0f9      	beq.n	8008aaa <__sflush_r+0x1a>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008abc:	682f      	ldr	r7, [r5, #0]
 8008abe:	602b      	str	r3, [r5, #0]
 8008ac0:	d032      	beq.n	8008b28 <__sflush_r+0x98>
 8008ac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	075a      	lsls	r2, r3, #29
 8008ac8:	d505      	bpl.n	8008ad6 <__sflush_r+0x46>
 8008aca:	6863      	ldr	r3, [r4, #4]
 8008acc:	1ac0      	subs	r0, r0, r3
 8008ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ad0:	b10b      	cbz	r3, 8008ad6 <__sflush_r+0x46>
 8008ad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ad4:	1ac0      	subs	r0, r0, r3
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	4602      	mov	r2, r0
 8008ada:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008adc:	6a21      	ldr	r1, [r4, #32]
 8008ade:	4628      	mov	r0, r5
 8008ae0:	47b0      	blx	r6
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	d106      	bne.n	8008af6 <__sflush_r+0x66>
 8008ae8:	6829      	ldr	r1, [r5, #0]
 8008aea:	291d      	cmp	r1, #29
 8008aec:	d82c      	bhi.n	8008b48 <__sflush_r+0xb8>
 8008aee:	4a2a      	ldr	r2, [pc, #168]	; (8008b98 <__sflush_r+0x108>)
 8008af0:	40ca      	lsrs	r2, r1
 8008af2:	07d6      	lsls	r6, r2, #31
 8008af4:	d528      	bpl.n	8008b48 <__sflush_r+0xb8>
 8008af6:	2200      	movs	r2, #0
 8008af8:	6062      	str	r2, [r4, #4]
 8008afa:	04d9      	lsls	r1, r3, #19
 8008afc:	6922      	ldr	r2, [r4, #16]
 8008afe:	6022      	str	r2, [r4, #0]
 8008b00:	d504      	bpl.n	8008b0c <__sflush_r+0x7c>
 8008b02:	1c42      	adds	r2, r0, #1
 8008b04:	d101      	bne.n	8008b0a <__sflush_r+0x7a>
 8008b06:	682b      	ldr	r3, [r5, #0]
 8008b08:	b903      	cbnz	r3, 8008b0c <__sflush_r+0x7c>
 8008b0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0e:	602f      	str	r7, [r5, #0]
 8008b10:	2900      	cmp	r1, #0
 8008b12:	d0ca      	beq.n	8008aaa <__sflush_r+0x1a>
 8008b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b18:	4299      	cmp	r1, r3
 8008b1a:	d002      	beq.n	8008b22 <__sflush_r+0x92>
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f000 fc95 	bl	800944c <_free_r>
 8008b22:	2000      	movs	r0, #0
 8008b24:	6360      	str	r0, [r4, #52]	; 0x34
 8008b26:	e7c1      	b.n	8008aac <__sflush_r+0x1c>
 8008b28:	6a21      	ldr	r1, [r4, #32]
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b0      	blx	r6
 8008b30:	1c41      	adds	r1, r0, #1
 8008b32:	d1c7      	bne.n	8008ac4 <__sflush_r+0x34>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0c4      	beq.n	8008ac4 <__sflush_r+0x34>
 8008b3a:	2b1d      	cmp	r3, #29
 8008b3c:	d001      	beq.n	8008b42 <__sflush_r+0xb2>
 8008b3e:	2b16      	cmp	r3, #22
 8008b40:	d101      	bne.n	8008b46 <__sflush_r+0xb6>
 8008b42:	602f      	str	r7, [r5, #0]
 8008b44:	e7b1      	b.n	8008aaa <__sflush_r+0x1a>
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b4c:	81a3      	strh	r3, [r4, #12]
 8008b4e:	e7ad      	b.n	8008aac <__sflush_r+0x1c>
 8008b50:	690f      	ldr	r7, [r1, #16]
 8008b52:	2f00      	cmp	r7, #0
 8008b54:	d0a9      	beq.n	8008aaa <__sflush_r+0x1a>
 8008b56:	0793      	lsls	r3, r2, #30
 8008b58:	680e      	ldr	r6, [r1, #0]
 8008b5a:	bf08      	it	eq
 8008b5c:	694b      	ldreq	r3, [r1, #20]
 8008b5e:	600f      	str	r7, [r1, #0]
 8008b60:	bf18      	it	ne
 8008b62:	2300      	movne	r3, #0
 8008b64:	eba6 0807 	sub.w	r8, r6, r7
 8008b68:	608b      	str	r3, [r1, #8]
 8008b6a:	f1b8 0f00 	cmp.w	r8, #0
 8008b6e:	dd9c      	ble.n	8008aaa <__sflush_r+0x1a>
 8008b70:	6a21      	ldr	r1, [r4, #32]
 8008b72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b74:	4643      	mov	r3, r8
 8008b76:	463a      	mov	r2, r7
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b0      	blx	r6
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	dc06      	bgt.n	8008b8e <__sflush_r+0xfe>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b86:	81a3      	strh	r3, [r4, #12]
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	e78e      	b.n	8008aac <__sflush_r+0x1c>
 8008b8e:	4407      	add	r7, r0
 8008b90:	eba8 0800 	sub.w	r8, r8, r0
 8008b94:	e7e9      	b.n	8008b6a <__sflush_r+0xda>
 8008b96:	bf00      	nop
 8008b98:	20400001 	.word	0x20400001

08008b9c <_fflush_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	690b      	ldr	r3, [r1, #16]
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	b913      	cbnz	r3, 8008bac <_fflush_r+0x10>
 8008ba6:	2500      	movs	r5, #0
 8008ba8:	4628      	mov	r0, r5
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	b118      	cbz	r0, 8008bb6 <_fflush_r+0x1a>
 8008bae:	6983      	ldr	r3, [r0, #24]
 8008bb0:	b90b      	cbnz	r3, 8008bb6 <_fflush_r+0x1a>
 8008bb2:	f7fe f8a1 	bl	8006cf8 <__sinit>
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <_fflush_r+0x6c>)
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	d11b      	bne.n	8008bf4 <_fflush_r+0x58>
 8008bbc:	686c      	ldr	r4, [r5, #4]
 8008bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0ef      	beq.n	8008ba6 <_fflush_r+0xa>
 8008bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bc8:	07d0      	lsls	r0, r2, #31
 8008bca:	d404      	bmi.n	8008bd6 <_fflush_r+0x3a>
 8008bcc:	0599      	lsls	r1, r3, #22
 8008bce:	d402      	bmi.n	8008bd6 <_fflush_r+0x3a>
 8008bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bd2:	f7fe f954 	bl	8006e7e <__retarget_lock_acquire_recursive>
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	4621      	mov	r1, r4
 8008bda:	f7ff ff59 	bl	8008a90 <__sflush_r>
 8008bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008be0:	07da      	lsls	r2, r3, #31
 8008be2:	4605      	mov	r5, r0
 8008be4:	d4e0      	bmi.n	8008ba8 <_fflush_r+0xc>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	059b      	lsls	r3, r3, #22
 8008bea:	d4dd      	bmi.n	8008ba8 <_fflush_r+0xc>
 8008bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bee:	f7fe f947 	bl	8006e80 <__retarget_lock_release_recursive>
 8008bf2:	e7d9      	b.n	8008ba8 <_fflush_r+0xc>
 8008bf4:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <_fflush_r+0x70>)
 8008bf6:	429c      	cmp	r4, r3
 8008bf8:	d101      	bne.n	8008bfe <_fflush_r+0x62>
 8008bfa:	68ac      	ldr	r4, [r5, #8]
 8008bfc:	e7df      	b.n	8008bbe <_fflush_r+0x22>
 8008bfe:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <_fflush_r+0x74>)
 8008c00:	429c      	cmp	r4, r3
 8008c02:	bf08      	it	eq
 8008c04:	68ec      	ldreq	r4, [r5, #12]
 8008c06:	e7da      	b.n	8008bbe <_fflush_r+0x22>
 8008c08:	08009e34 	.word	0x08009e34
 8008c0c:	08009e54 	.word	0x08009e54
 8008c10:	08009e14 	.word	0x08009e14

08008c14 <_localeconv_r>:
 8008c14:	4800      	ldr	r0, [pc, #0]	; (8008c18 <_localeconv_r+0x4>)
 8008c16:	4770      	bx	lr
 8008c18:	20000164 	.word	0x20000164

08008c1c <_lseek_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d07      	ldr	r5, [pc, #28]	; (8008c3c <_lseek_r+0x20>)
 8008c20:	4604      	mov	r4, r0
 8008c22:	4608      	mov	r0, r1
 8008c24:	4611      	mov	r1, r2
 8008c26:	2200      	movs	r2, #0
 8008c28:	602a      	str	r2, [r5, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f7f8 fbd9 	bl	80013e2 <_lseek>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_lseek_r+0x1e>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_lseek_r+0x1e>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	20004fa8 	.word	0x20004fa8

08008c40 <__swhatbuf_r>:
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	460e      	mov	r6, r1
 8008c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	b096      	sub	sp, #88	; 0x58
 8008c4c:	4614      	mov	r4, r2
 8008c4e:	461d      	mov	r5, r3
 8008c50:	da07      	bge.n	8008c62 <__swhatbuf_r+0x22>
 8008c52:	2300      	movs	r3, #0
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	89b3      	ldrh	r3, [r6, #12]
 8008c58:	061a      	lsls	r2, r3, #24
 8008c5a:	d410      	bmi.n	8008c7e <__swhatbuf_r+0x3e>
 8008c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c60:	e00e      	b.n	8008c80 <__swhatbuf_r+0x40>
 8008c62:	466a      	mov	r2, sp
 8008c64:	f000 ff3a 	bl	8009adc <_fstat_r>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	dbf2      	blt.n	8008c52 <__swhatbuf_r+0x12>
 8008c6c:	9a01      	ldr	r2, [sp, #4]
 8008c6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c76:	425a      	negs	r2, r3
 8008c78:	415a      	adcs	r2, r3
 8008c7a:	602a      	str	r2, [r5, #0]
 8008c7c:	e7ee      	b.n	8008c5c <__swhatbuf_r+0x1c>
 8008c7e:	2340      	movs	r3, #64	; 0x40
 8008c80:	2000      	movs	r0, #0
 8008c82:	6023      	str	r3, [r4, #0]
 8008c84:	b016      	add	sp, #88	; 0x58
 8008c86:	bd70      	pop	{r4, r5, r6, pc}

08008c88 <__smakebuf_r>:
 8008c88:	898b      	ldrh	r3, [r1, #12]
 8008c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c8c:	079d      	lsls	r5, r3, #30
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460c      	mov	r4, r1
 8008c92:	d507      	bpl.n	8008ca4 <__smakebuf_r+0x1c>
 8008c94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	6163      	str	r3, [r4, #20]
 8008ca0:	b002      	add	sp, #8
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	ab01      	add	r3, sp, #4
 8008ca6:	466a      	mov	r2, sp
 8008ca8:	f7ff ffca 	bl	8008c40 <__swhatbuf_r>
 8008cac:	9900      	ldr	r1, [sp, #0]
 8008cae:	4605      	mov	r5, r0
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7fe f8fd 	bl	8006eb0 <_malloc_r>
 8008cb6:	b948      	cbnz	r0, 8008ccc <__smakebuf_r+0x44>
 8008cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cbc:	059a      	lsls	r2, r3, #22
 8008cbe:	d4ef      	bmi.n	8008ca0 <__smakebuf_r+0x18>
 8008cc0:	f023 0303 	bic.w	r3, r3, #3
 8008cc4:	f043 0302 	orr.w	r3, r3, #2
 8008cc8:	81a3      	strh	r3, [r4, #12]
 8008cca:	e7e3      	b.n	8008c94 <__smakebuf_r+0xc>
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <__smakebuf_r+0x7c>)
 8008cce:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	6020      	str	r0, [r4, #0]
 8008cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd8:	81a3      	strh	r3, [r4, #12]
 8008cda:	9b00      	ldr	r3, [sp, #0]
 8008cdc:	6163      	str	r3, [r4, #20]
 8008cde:	9b01      	ldr	r3, [sp, #4]
 8008ce0:	6120      	str	r0, [r4, #16]
 8008ce2:	b15b      	cbz	r3, 8008cfc <__smakebuf_r+0x74>
 8008ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f000 ff09 	bl	8009b00 <_isatty_r>
 8008cee:	b128      	cbz	r0, 8008cfc <__smakebuf_r+0x74>
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	f023 0303 	bic.w	r3, r3, #3
 8008cf6:	f043 0301 	orr.w	r3, r3, #1
 8008cfa:	81a3      	strh	r3, [r4, #12]
 8008cfc:	89a0      	ldrh	r0, [r4, #12]
 8008cfe:	4305      	orrs	r5, r0
 8008d00:	81a5      	strh	r5, [r4, #12]
 8008d02:	e7cd      	b.n	8008ca0 <__smakebuf_r+0x18>
 8008d04:	08006c91 	.word	0x08006c91

08008d08 <malloc>:
 8008d08:	4b02      	ldr	r3, [pc, #8]	; (8008d14 <malloc+0xc>)
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	f7fe b8cf 	b.w	8006eb0 <_malloc_r>
 8008d12:	bf00      	nop
 8008d14:	20000010 	.word	0x20000010

08008d18 <__malloc_lock>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__malloc_lock+0x8>)
 8008d1a:	f7fe b8b0 	b.w	8006e7e <__retarget_lock_acquire_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20004fa0 	.word	0x20004fa0

08008d24 <__malloc_unlock>:
 8008d24:	4801      	ldr	r0, [pc, #4]	; (8008d2c <__malloc_unlock+0x8>)
 8008d26:	f7fe b8ab 	b.w	8006e80 <__retarget_lock_release_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	20004fa0 	.word	0x20004fa0

08008d30 <_Balloc>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d34:	4604      	mov	r4, r0
 8008d36:	460d      	mov	r5, r1
 8008d38:	b976      	cbnz	r6, 8008d58 <_Balloc+0x28>
 8008d3a:	2010      	movs	r0, #16
 8008d3c:	f7ff ffe4 	bl	8008d08 <malloc>
 8008d40:	4602      	mov	r2, r0
 8008d42:	6260      	str	r0, [r4, #36]	; 0x24
 8008d44:	b920      	cbnz	r0, 8008d50 <_Balloc+0x20>
 8008d46:	4b18      	ldr	r3, [pc, #96]	; (8008da8 <_Balloc+0x78>)
 8008d48:	4818      	ldr	r0, [pc, #96]	; (8008dac <_Balloc+0x7c>)
 8008d4a:	2166      	movs	r1, #102	; 0x66
 8008d4c:	f000 fe96 	bl	8009a7c <__assert_func>
 8008d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d54:	6006      	str	r6, [r0, #0]
 8008d56:	60c6      	str	r6, [r0, #12]
 8008d58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d5a:	68f3      	ldr	r3, [r6, #12]
 8008d5c:	b183      	cbz	r3, 8008d80 <_Balloc+0x50>
 8008d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d66:	b9b8      	cbnz	r0, 8008d98 <_Balloc+0x68>
 8008d68:	2101      	movs	r1, #1
 8008d6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d6e:	1d72      	adds	r2, r6, #5
 8008d70:	0092      	lsls	r2, r2, #2
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 fb5a 	bl	800942c <_calloc_r>
 8008d78:	b160      	cbz	r0, 8008d94 <_Balloc+0x64>
 8008d7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d7e:	e00e      	b.n	8008d9e <_Balloc+0x6e>
 8008d80:	2221      	movs	r2, #33	; 0x21
 8008d82:	2104      	movs	r1, #4
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fb51 	bl	800942c <_calloc_r>
 8008d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d8c:	60f0      	str	r0, [r6, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e4      	bne.n	8008d5e <_Balloc+0x2e>
 8008d94:	2000      	movs	r0, #0
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	6802      	ldr	r2, [r0, #0]
 8008d9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008da4:	e7f7      	b.n	8008d96 <_Balloc+0x66>
 8008da6:	bf00      	nop
 8008da8:	08009fba 	.word	0x08009fba
 8008dac:	0800a041 	.word	0x0800a041

08008db0 <_Bfree>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008db4:	4605      	mov	r5, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	b976      	cbnz	r6, 8008dd8 <_Bfree+0x28>
 8008dba:	2010      	movs	r0, #16
 8008dbc:	f7ff ffa4 	bl	8008d08 <malloc>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	6268      	str	r0, [r5, #36]	; 0x24
 8008dc4:	b920      	cbnz	r0, 8008dd0 <_Bfree+0x20>
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <_Bfree+0x3c>)
 8008dc8:	4809      	ldr	r0, [pc, #36]	; (8008df0 <_Bfree+0x40>)
 8008dca:	218a      	movs	r1, #138	; 0x8a
 8008dcc:	f000 fe56 	bl	8009a7c <__assert_func>
 8008dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd4:	6006      	str	r6, [r0, #0]
 8008dd6:	60c6      	str	r6, [r0, #12]
 8008dd8:	b13c      	cbz	r4, 8008dea <_Bfree+0x3a>
 8008dda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ddc:	6862      	ldr	r2, [r4, #4]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008de4:	6021      	str	r1, [r4, #0]
 8008de6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	08009fba 	.word	0x08009fba
 8008df0:	0800a041 	.word	0x0800a041

08008df4 <__multadd>:
 8008df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df8:	690e      	ldr	r6, [r1, #16]
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	4698      	mov	r8, r3
 8008dfe:	460c      	mov	r4, r1
 8008e00:	f101 0014 	add.w	r0, r1, #20
 8008e04:	2300      	movs	r3, #0
 8008e06:	6805      	ldr	r5, [r0, #0]
 8008e08:	b2a9      	uxth	r1, r5
 8008e0a:	fb02 8101 	mla	r1, r2, r1, r8
 8008e0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e12:	0c2d      	lsrs	r5, r5, #16
 8008e14:	fb02 c505 	mla	r5, r2, r5, ip
 8008e18:	b289      	uxth	r1, r1
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e20:	429e      	cmp	r6, r3
 8008e22:	f840 1b04 	str.w	r1, [r0], #4
 8008e26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e2a:	dcec      	bgt.n	8008e06 <__multadd+0x12>
 8008e2c:	f1b8 0f00 	cmp.w	r8, #0
 8008e30:	d022      	beq.n	8008e78 <__multadd+0x84>
 8008e32:	68a3      	ldr	r3, [r4, #8]
 8008e34:	42b3      	cmp	r3, r6
 8008e36:	dc19      	bgt.n	8008e6c <__multadd+0x78>
 8008e38:	6861      	ldr	r1, [r4, #4]
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	3101      	adds	r1, #1
 8008e3e:	f7ff ff77 	bl	8008d30 <_Balloc>
 8008e42:	4605      	mov	r5, r0
 8008e44:	b928      	cbnz	r0, 8008e52 <__multadd+0x5e>
 8008e46:	4602      	mov	r2, r0
 8008e48:	4b0d      	ldr	r3, [pc, #52]	; (8008e80 <__multadd+0x8c>)
 8008e4a:	480e      	ldr	r0, [pc, #56]	; (8008e84 <__multadd+0x90>)
 8008e4c:	21b5      	movs	r1, #181	; 0xb5
 8008e4e:	f000 fe15 	bl	8009a7c <__assert_func>
 8008e52:	6922      	ldr	r2, [r4, #16]
 8008e54:	3202      	adds	r2, #2
 8008e56:	f104 010c 	add.w	r1, r4, #12
 8008e5a:	0092      	lsls	r2, r2, #2
 8008e5c:	300c      	adds	r0, #12
 8008e5e:	f7fe f810 	bl	8006e82 <memcpy>
 8008e62:	4621      	mov	r1, r4
 8008e64:	4638      	mov	r0, r7
 8008e66:	f7ff ffa3 	bl	8008db0 <_Bfree>
 8008e6a:	462c      	mov	r4, r5
 8008e6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e70:	3601      	adds	r6, #1
 8008e72:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e76:	6126      	str	r6, [r4, #16]
 8008e78:	4620      	mov	r0, r4
 8008e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7e:	bf00      	nop
 8008e80:	0800a030 	.word	0x0800a030
 8008e84:	0800a041 	.word	0x0800a041

08008e88 <__hi0bits>:
 8008e88:	0c03      	lsrs	r3, r0, #16
 8008e8a:	041b      	lsls	r3, r3, #16
 8008e8c:	b9d3      	cbnz	r3, 8008ec4 <__hi0bits+0x3c>
 8008e8e:	0400      	lsls	r0, r0, #16
 8008e90:	2310      	movs	r3, #16
 8008e92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e96:	bf04      	itt	eq
 8008e98:	0200      	lsleq	r0, r0, #8
 8008e9a:	3308      	addeq	r3, #8
 8008e9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ea0:	bf04      	itt	eq
 8008ea2:	0100      	lsleq	r0, r0, #4
 8008ea4:	3304      	addeq	r3, #4
 8008ea6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008eaa:	bf04      	itt	eq
 8008eac:	0080      	lsleq	r0, r0, #2
 8008eae:	3302      	addeq	r3, #2
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	db05      	blt.n	8008ec0 <__hi0bits+0x38>
 8008eb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008eb8:	f103 0301 	add.w	r3, r3, #1
 8008ebc:	bf08      	it	eq
 8008ebe:	2320      	moveq	r3, #32
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	4770      	bx	lr
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	e7e4      	b.n	8008e92 <__hi0bits+0xa>

08008ec8 <__lo0bits>:
 8008ec8:	6803      	ldr	r3, [r0, #0]
 8008eca:	f013 0207 	ands.w	r2, r3, #7
 8008ece:	4601      	mov	r1, r0
 8008ed0:	d00b      	beq.n	8008eea <__lo0bits+0x22>
 8008ed2:	07da      	lsls	r2, r3, #31
 8008ed4:	d424      	bmi.n	8008f20 <__lo0bits+0x58>
 8008ed6:	0798      	lsls	r0, r3, #30
 8008ed8:	bf49      	itett	mi
 8008eda:	085b      	lsrmi	r3, r3, #1
 8008edc:	089b      	lsrpl	r3, r3, #2
 8008ede:	2001      	movmi	r0, #1
 8008ee0:	600b      	strmi	r3, [r1, #0]
 8008ee2:	bf5c      	itt	pl
 8008ee4:	600b      	strpl	r3, [r1, #0]
 8008ee6:	2002      	movpl	r0, #2
 8008ee8:	4770      	bx	lr
 8008eea:	b298      	uxth	r0, r3
 8008eec:	b9b0      	cbnz	r0, 8008f1c <__lo0bits+0x54>
 8008eee:	0c1b      	lsrs	r3, r3, #16
 8008ef0:	2010      	movs	r0, #16
 8008ef2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ef6:	bf04      	itt	eq
 8008ef8:	0a1b      	lsreq	r3, r3, #8
 8008efa:	3008      	addeq	r0, #8
 8008efc:	071a      	lsls	r2, r3, #28
 8008efe:	bf04      	itt	eq
 8008f00:	091b      	lsreq	r3, r3, #4
 8008f02:	3004      	addeq	r0, #4
 8008f04:	079a      	lsls	r2, r3, #30
 8008f06:	bf04      	itt	eq
 8008f08:	089b      	lsreq	r3, r3, #2
 8008f0a:	3002      	addeq	r0, #2
 8008f0c:	07da      	lsls	r2, r3, #31
 8008f0e:	d403      	bmi.n	8008f18 <__lo0bits+0x50>
 8008f10:	085b      	lsrs	r3, r3, #1
 8008f12:	f100 0001 	add.w	r0, r0, #1
 8008f16:	d005      	beq.n	8008f24 <__lo0bits+0x5c>
 8008f18:	600b      	str	r3, [r1, #0]
 8008f1a:	4770      	bx	lr
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	e7e8      	b.n	8008ef2 <__lo0bits+0x2a>
 8008f20:	2000      	movs	r0, #0
 8008f22:	4770      	bx	lr
 8008f24:	2020      	movs	r0, #32
 8008f26:	4770      	bx	lr

08008f28 <__i2b>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	f7ff feff 	bl	8008d30 <_Balloc>
 8008f32:	4602      	mov	r2, r0
 8008f34:	b928      	cbnz	r0, 8008f42 <__i2b+0x1a>
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <__i2b+0x24>)
 8008f38:	4805      	ldr	r0, [pc, #20]	; (8008f50 <__i2b+0x28>)
 8008f3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f3e:	f000 fd9d 	bl	8009a7c <__assert_func>
 8008f42:	2301      	movs	r3, #1
 8008f44:	6144      	str	r4, [r0, #20]
 8008f46:	6103      	str	r3, [r0, #16]
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	bf00      	nop
 8008f4c:	0800a030 	.word	0x0800a030
 8008f50:	0800a041 	.word	0x0800a041

08008f54 <__multiply>:
 8008f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f58:	4614      	mov	r4, r2
 8008f5a:	690a      	ldr	r2, [r1, #16]
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	bfb8      	it	lt
 8008f62:	460b      	movlt	r3, r1
 8008f64:	460d      	mov	r5, r1
 8008f66:	bfbc      	itt	lt
 8008f68:	4625      	movlt	r5, r4
 8008f6a:	461c      	movlt	r4, r3
 8008f6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f74:	68ab      	ldr	r3, [r5, #8]
 8008f76:	6869      	ldr	r1, [r5, #4]
 8008f78:	eb0a 0709 	add.w	r7, sl, r9
 8008f7c:	42bb      	cmp	r3, r7
 8008f7e:	b085      	sub	sp, #20
 8008f80:	bfb8      	it	lt
 8008f82:	3101      	addlt	r1, #1
 8008f84:	f7ff fed4 	bl	8008d30 <_Balloc>
 8008f88:	b930      	cbnz	r0, 8008f98 <__multiply+0x44>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	4b42      	ldr	r3, [pc, #264]	; (8009098 <__multiply+0x144>)
 8008f8e:	4843      	ldr	r0, [pc, #268]	; (800909c <__multiply+0x148>)
 8008f90:	f240 115d 	movw	r1, #349	; 0x15d
 8008f94:	f000 fd72 	bl	8009a7c <__assert_func>
 8008f98:	f100 0614 	add.w	r6, r0, #20
 8008f9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008fa0:	4633      	mov	r3, r6
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4543      	cmp	r3, r8
 8008fa6:	d31e      	bcc.n	8008fe6 <__multiply+0x92>
 8008fa8:	f105 0c14 	add.w	ip, r5, #20
 8008fac:	f104 0314 	add.w	r3, r4, #20
 8008fb0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fb4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fb8:	9202      	str	r2, [sp, #8]
 8008fba:	ebac 0205 	sub.w	r2, ip, r5
 8008fbe:	3a15      	subs	r2, #21
 8008fc0:	f022 0203 	bic.w	r2, r2, #3
 8008fc4:	3204      	adds	r2, #4
 8008fc6:	f105 0115 	add.w	r1, r5, #21
 8008fca:	458c      	cmp	ip, r1
 8008fcc:	bf38      	it	cc
 8008fce:	2204      	movcc	r2, #4
 8008fd0:	9201      	str	r2, [sp, #4]
 8008fd2:	9a02      	ldr	r2, [sp, #8]
 8008fd4:	9303      	str	r3, [sp, #12]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d808      	bhi.n	8008fec <__multiply+0x98>
 8008fda:	2f00      	cmp	r7, #0
 8008fdc:	dc55      	bgt.n	800908a <__multiply+0x136>
 8008fde:	6107      	str	r7, [r0, #16]
 8008fe0:	b005      	add	sp, #20
 8008fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe6:	f843 2b04 	str.w	r2, [r3], #4
 8008fea:	e7db      	b.n	8008fa4 <__multiply+0x50>
 8008fec:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ff0:	f1ba 0f00 	cmp.w	sl, #0
 8008ff4:	d020      	beq.n	8009038 <__multiply+0xe4>
 8008ff6:	f105 0e14 	add.w	lr, r5, #20
 8008ffa:	46b1      	mov	r9, r6
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009002:	f8d9 b000 	ldr.w	fp, [r9]
 8009006:	b2a1      	uxth	r1, r4
 8009008:	fa1f fb8b 	uxth.w	fp, fp
 800900c:	fb0a b101 	mla	r1, sl, r1, fp
 8009010:	4411      	add	r1, r2
 8009012:	f8d9 2000 	ldr.w	r2, [r9]
 8009016:	0c24      	lsrs	r4, r4, #16
 8009018:	0c12      	lsrs	r2, r2, #16
 800901a:	fb0a 2404 	mla	r4, sl, r4, r2
 800901e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009022:	b289      	uxth	r1, r1
 8009024:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009028:	45f4      	cmp	ip, lr
 800902a:	f849 1b04 	str.w	r1, [r9], #4
 800902e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009032:	d8e4      	bhi.n	8008ffe <__multiply+0xaa>
 8009034:	9901      	ldr	r1, [sp, #4]
 8009036:	5072      	str	r2, [r6, r1]
 8009038:	9a03      	ldr	r2, [sp, #12]
 800903a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800903e:	3304      	adds	r3, #4
 8009040:	f1b9 0f00 	cmp.w	r9, #0
 8009044:	d01f      	beq.n	8009086 <__multiply+0x132>
 8009046:	6834      	ldr	r4, [r6, #0]
 8009048:	f105 0114 	add.w	r1, r5, #20
 800904c:	46b6      	mov	lr, r6
 800904e:	f04f 0a00 	mov.w	sl, #0
 8009052:	880a      	ldrh	r2, [r1, #0]
 8009054:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009058:	fb09 b202 	mla	r2, r9, r2, fp
 800905c:	4492      	add	sl, r2
 800905e:	b2a4      	uxth	r4, r4
 8009060:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009064:	f84e 4b04 	str.w	r4, [lr], #4
 8009068:	f851 4b04 	ldr.w	r4, [r1], #4
 800906c:	f8be 2000 	ldrh.w	r2, [lr]
 8009070:	0c24      	lsrs	r4, r4, #16
 8009072:	fb09 2404 	mla	r4, r9, r4, r2
 8009076:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800907a:	458c      	cmp	ip, r1
 800907c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009080:	d8e7      	bhi.n	8009052 <__multiply+0xfe>
 8009082:	9a01      	ldr	r2, [sp, #4]
 8009084:	50b4      	str	r4, [r6, r2]
 8009086:	3604      	adds	r6, #4
 8009088:	e7a3      	b.n	8008fd2 <__multiply+0x7e>
 800908a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1a5      	bne.n	8008fde <__multiply+0x8a>
 8009092:	3f01      	subs	r7, #1
 8009094:	e7a1      	b.n	8008fda <__multiply+0x86>
 8009096:	bf00      	nop
 8009098:	0800a030 	.word	0x0800a030
 800909c:	0800a041 	.word	0x0800a041

080090a0 <__pow5mult>:
 80090a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a4:	4615      	mov	r5, r2
 80090a6:	f012 0203 	ands.w	r2, r2, #3
 80090aa:	4606      	mov	r6, r0
 80090ac:	460f      	mov	r7, r1
 80090ae:	d007      	beq.n	80090c0 <__pow5mult+0x20>
 80090b0:	4c25      	ldr	r4, [pc, #148]	; (8009148 <__pow5mult+0xa8>)
 80090b2:	3a01      	subs	r2, #1
 80090b4:	2300      	movs	r3, #0
 80090b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090ba:	f7ff fe9b 	bl	8008df4 <__multadd>
 80090be:	4607      	mov	r7, r0
 80090c0:	10ad      	asrs	r5, r5, #2
 80090c2:	d03d      	beq.n	8009140 <__pow5mult+0xa0>
 80090c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090c6:	b97c      	cbnz	r4, 80090e8 <__pow5mult+0x48>
 80090c8:	2010      	movs	r0, #16
 80090ca:	f7ff fe1d 	bl	8008d08 <malloc>
 80090ce:	4602      	mov	r2, r0
 80090d0:	6270      	str	r0, [r6, #36]	; 0x24
 80090d2:	b928      	cbnz	r0, 80090e0 <__pow5mult+0x40>
 80090d4:	4b1d      	ldr	r3, [pc, #116]	; (800914c <__pow5mult+0xac>)
 80090d6:	481e      	ldr	r0, [pc, #120]	; (8009150 <__pow5mult+0xb0>)
 80090d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090dc:	f000 fcce 	bl	8009a7c <__assert_func>
 80090e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090e4:	6004      	str	r4, [r0, #0]
 80090e6:	60c4      	str	r4, [r0, #12]
 80090e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090f0:	b94c      	cbnz	r4, 8009106 <__pow5mult+0x66>
 80090f2:	f240 2171 	movw	r1, #625	; 0x271
 80090f6:	4630      	mov	r0, r6
 80090f8:	f7ff ff16 	bl	8008f28 <__i2b>
 80090fc:	2300      	movs	r3, #0
 80090fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009102:	4604      	mov	r4, r0
 8009104:	6003      	str	r3, [r0, #0]
 8009106:	f04f 0900 	mov.w	r9, #0
 800910a:	07eb      	lsls	r3, r5, #31
 800910c:	d50a      	bpl.n	8009124 <__pow5mult+0x84>
 800910e:	4639      	mov	r1, r7
 8009110:	4622      	mov	r2, r4
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ff1e 	bl	8008f54 <__multiply>
 8009118:	4639      	mov	r1, r7
 800911a:	4680      	mov	r8, r0
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff fe47 	bl	8008db0 <_Bfree>
 8009122:	4647      	mov	r7, r8
 8009124:	106d      	asrs	r5, r5, #1
 8009126:	d00b      	beq.n	8009140 <__pow5mult+0xa0>
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	b938      	cbnz	r0, 800913c <__pow5mult+0x9c>
 800912c:	4622      	mov	r2, r4
 800912e:	4621      	mov	r1, r4
 8009130:	4630      	mov	r0, r6
 8009132:	f7ff ff0f 	bl	8008f54 <__multiply>
 8009136:	6020      	str	r0, [r4, #0]
 8009138:	f8c0 9000 	str.w	r9, [r0]
 800913c:	4604      	mov	r4, r0
 800913e:	e7e4      	b.n	800910a <__pow5mult+0x6a>
 8009140:	4638      	mov	r0, r7
 8009142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009146:	bf00      	nop
 8009148:	0800a198 	.word	0x0800a198
 800914c:	08009fba 	.word	0x08009fba
 8009150:	0800a041 	.word	0x0800a041

08009154 <__lshift>:
 8009154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009158:	460c      	mov	r4, r1
 800915a:	6849      	ldr	r1, [r1, #4]
 800915c:	6923      	ldr	r3, [r4, #16]
 800915e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009162:	68a3      	ldr	r3, [r4, #8]
 8009164:	4607      	mov	r7, r0
 8009166:	4691      	mov	r9, r2
 8009168:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800916c:	f108 0601 	add.w	r6, r8, #1
 8009170:	42b3      	cmp	r3, r6
 8009172:	db0b      	blt.n	800918c <__lshift+0x38>
 8009174:	4638      	mov	r0, r7
 8009176:	f7ff fddb 	bl	8008d30 <_Balloc>
 800917a:	4605      	mov	r5, r0
 800917c:	b948      	cbnz	r0, 8009192 <__lshift+0x3e>
 800917e:	4602      	mov	r2, r0
 8009180:	4b28      	ldr	r3, [pc, #160]	; (8009224 <__lshift+0xd0>)
 8009182:	4829      	ldr	r0, [pc, #164]	; (8009228 <__lshift+0xd4>)
 8009184:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009188:	f000 fc78 	bl	8009a7c <__assert_func>
 800918c:	3101      	adds	r1, #1
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	e7ee      	b.n	8009170 <__lshift+0x1c>
 8009192:	2300      	movs	r3, #0
 8009194:	f100 0114 	add.w	r1, r0, #20
 8009198:	f100 0210 	add.w	r2, r0, #16
 800919c:	4618      	mov	r0, r3
 800919e:	4553      	cmp	r3, sl
 80091a0:	db33      	blt.n	800920a <__lshift+0xb6>
 80091a2:	6920      	ldr	r0, [r4, #16]
 80091a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091a8:	f104 0314 	add.w	r3, r4, #20
 80091ac:	f019 091f 	ands.w	r9, r9, #31
 80091b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091b8:	d02b      	beq.n	8009212 <__lshift+0xbe>
 80091ba:	f1c9 0e20 	rsb	lr, r9, #32
 80091be:	468a      	mov	sl, r1
 80091c0:	2200      	movs	r2, #0
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	fa00 f009 	lsl.w	r0, r0, r9
 80091c8:	4302      	orrs	r2, r0
 80091ca:	f84a 2b04 	str.w	r2, [sl], #4
 80091ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d2:	459c      	cmp	ip, r3
 80091d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80091d8:	d8f3      	bhi.n	80091c2 <__lshift+0x6e>
 80091da:	ebac 0304 	sub.w	r3, ip, r4
 80091de:	3b15      	subs	r3, #21
 80091e0:	f023 0303 	bic.w	r3, r3, #3
 80091e4:	3304      	adds	r3, #4
 80091e6:	f104 0015 	add.w	r0, r4, #21
 80091ea:	4584      	cmp	ip, r0
 80091ec:	bf38      	it	cc
 80091ee:	2304      	movcc	r3, #4
 80091f0:	50ca      	str	r2, [r1, r3]
 80091f2:	b10a      	cbz	r2, 80091f8 <__lshift+0xa4>
 80091f4:	f108 0602 	add.w	r6, r8, #2
 80091f8:	3e01      	subs	r6, #1
 80091fa:	4638      	mov	r0, r7
 80091fc:	612e      	str	r6, [r5, #16]
 80091fe:	4621      	mov	r1, r4
 8009200:	f7ff fdd6 	bl	8008db0 <_Bfree>
 8009204:	4628      	mov	r0, r5
 8009206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920a:	f842 0f04 	str.w	r0, [r2, #4]!
 800920e:	3301      	adds	r3, #1
 8009210:	e7c5      	b.n	800919e <__lshift+0x4a>
 8009212:	3904      	subs	r1, #4
 8009214:	f853 2b04 	ldr.w	r2, [r3], #4
 8009218:	f841 2f04 	str.w	r2, [r1, #4]!
 800921c:	459c      	cmp	ip, r3
 800921e:	d8f9      	bhi.n	8009214 <__lshift+0xc0>
 8009220:	e7ea      	b.n	80091f8 <__lshift+0xa4>
 8009222:	bf00      	nop
 8009224:	0800a030 	.word	0x0800a030
 8009228:	0800a041 	.word	0x0800a041

0800922c <__mcmp>:
 800922c:	b530      	push	{r4, r5, lr}
 800922e:	6902      	ldr	r2, [r0, #16]
 8009230:	690c      	ldr	r4, [r1, #16]
 8009232:	1b12      	subs	r2, r2, r4
 8009234:	d10e      	bne.n	8009254 <__mcmp+0x28>
 8009236:	f100 0314 	add.w	r3, r0, #20
 800923a:	3114      	adds	r1, #20
 800923c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009240:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009244:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009248:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800924c:	42a5      	cmp	r5, r4
 800924e:	d003      	beq.n	8009258 <__mcmp+0x2c>
 8009250:	d305      	bcc.n	800925e <__mcmp+0x32>
 8009252:	2201      	movs	r2, #1
 8009254:	4610      	mov	r0, r2
 8009256:	bd30      	pop	{r4, r5, pc}
 8009258:	4283      	cmp	r3, r0
 800925a:	d3f3      	bcc.n	8009244 <__mcmp+0x18>
 800925c:	e7fa      	b.n	8009254 <__mcmp+0x28>
 800925e:	f04f 32ff 	mov.w	r2, #4294967295
 8009262:	e7f7      	b.n	8009254 <__mcmp+0x28>

08009264 <__mdiff>:
 8009264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	460c      	mov	r4, r1
 800926a:	4606      	mov	r6, r0
 800926c:	4611      	mov	r1, r2
 800926e:	4620      	mov	r0, r4
 8009270:	4617      	mov	r7, r2
 8009272:	f7ff ffdb 	bl	800922c <__mcmp>
 8009276:	1e05      	subs	r5, r0, #0
 8009278:	d110      	bne.n	800929c <__mdiff+0x38>
 800927a:	4629      	mov	r1, r5
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff fd57 	bl	8008d30 <_Balloc>
 8009282:	b930      	cbnz	r0, 8009292 <__mdiff+0x2e>
 8009284:	4b39      	ldr	r3, [pc, #228]	; (800936c <__mdiff+0x108>)
 8009286:	4602      	mov	r2, r0
 8009288:	f240 2132 	movw	r1, #562	; 0x232
 800928c:	4838      	ldr	r0, [pc, #224]	; (8009370 <__mdiff+0x10c>)
 800928e:	f000 fbf5 	bl	8009a7c <__assert_func>
 8009292:	2301      	movs	r3, #1
 8009294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	bfa4      	itt	ge
 800929e:	463b      	movge	r3, r7
 80092a0:	4627      	movge	r7, r4
 80092a2:	4630      	mov	r0, r6
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	bfa6      	itte	ge
 80092a8:	461c      	movge	r4, r3
 80092aa:	2500      	movge	r5, #0
 80092ac:	2501      	movlt	r5, #1
 80092ae:	f7ff fd3f 	bl	8008d30 <_Balloc>
 80092b2:	b920      	cbnz	r0, 80092be <__mdiff+0x5a>
 80092b4:	4b2d      	ldr	r3, [pc, #180]	; (800936c <__mdiff+0x108>)
 80092b6:	4602      	mov	r2, r0
 80092b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092bc:	e7e6      	b.n	800928c <__mdiff+0x28>
 80092be:	693e      	ldr	r6, [r7, #16]
 80092c0:	60c5      	str	r5, [r0, #12]
 80092c2:	6925      	ldr	r5, [r4, #16]
 80092c4:	f107 0114 	add.w	r1, r7, #20
 80092c8:	f104 0914 	add.w	r9, r4, #20
 80092cc:	f100 0e14 	add.w	lr, r0, #20
 80092d0:	f107 0210 	add.w	r2, r7, #16
 80092d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092dc:	46f2      	mov	sl, lr
 80092de:	2700      	movs	r7, #0
 80092e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80092e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092e8:	fa1f f883 	uxth.w	r8, r3
 80092ec:	fa17 f78b 	uxtah	r7, r7, fp
 80092f0:	0c1b      	lsrs	r3, r3, #16
 80092f2:	eba7 0808 	sub.w	r8, r7, r8
 80092f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092fe:	fa1f f888 	uxth.w	r8, r8
 8009302:	141f      	asrs	r7, r3, #16
 8009304:	454d      	cmp	r5, r9
 8009306:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800930a:	f84a 3b04 	str.w	r3, [sl], #4
 800930e:	d8e7      	bhi.n	80092e0 <__mdiff+0x7c>
 8009310:	1b2b      	subs	r3, r5, r4
 8009312:	3b15      	subs	r3, #21
 8009314:	f023 0303 	bic.w	r3, r3, #3
 8009318:	3304      	adds	r3, #4
 800931a:	3415      	adds	r4, #21
 800931c:	42a5      	cmp	r5, r4
 800931e:	bf38      	it	cc
 8009320:	2304      	movcc	r3, #4
 8009322:	4419      	add	r1, r3
 8009324:	4473      	add	r3, lr
 8009326:	469e      	mov	lr, r3
 8009328:	460d      	mov	r5, r1
 800932a:	4565      	cmp	r5, ip
 800932c:	d30e      	bcc.n	800934c <__mdiff+0xe8>
 800932e:	f10c 0203 	add.w	r2, ip, #3
 8009332:	1a52      	subs	r2, r2, r1
 8009334:	f022 0203 	bic.w	r2, r2, #3
 8009338:	3903      	subs	r1, #3
 800933a:	458c      	cmp	ip, r1
 800933c:	bf38      	it	cc
 800933e:	2200      	movcc	r2, #0
 8009340:	441a      	add	r2, r3
 8009342:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009346:	b17b      	cbz	r3, 8009368 <__mdiff+0x104>
 8009348:	6106      	str	r6, [r0, #16]
 800934a:	e7a5      	b.n	8009298 <__mdiff+0x34>
 800934c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009350:	fa17 f488 	uxtah	r4, r7, r8
 8009354:	1422      	asrs	r2, r4, #16
 8009356:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800935a:	b2a4      	uxth	r4, r4
 800935c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009360:	f84e 4b04 	str.w	r4, [lr], #4
 8009364:	1417      	asrs	r7, r2, #16
 8009366:	e7e0      	b.n	800932a <__mdiff+0xc6>
 8009368:	3e01      	subs	r6, #1
 800936a:	e7ea      	b.n	8009342 <__mdiff+0xde>
 800936c:	0800a030 	.word	0x0800a030
 8009370:	0800a041 	.word	0x0800a041

08009374 <__d2b>:
 8009374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009378:	4689      	mov	r9, r1
 800937a:	2101      	movs	r1, #1
 800937c:	ec57 6b10 	vmov	r6, r7, d0
 8009380:	4690      	mov	r8, r2
 8009382:	f7ff fcd5 	bl	8008d30 <_Balloc>
 8009386:	4604      	mov	r4, r0
 8009388:	b930      	cbnz	r0, 8009398 <__d2b+0x24>
 800938a:	4602      	mov	r2, r0
 800938c:	4b25      	ldr	r3, [pc, #148]	; (8009424 <__d2b+0xb0>)
 800938e:	4826      	ldr	r0, [pc, #152]	; (8009428 <__d2b+0xb4>)
 8009390:	f240 310a 	movw	r1, #778	; 0x30a
 8009394:	f000 fb72 	bl	8009a7c <__assert_func>
 8009398:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800939c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093a0:	bb35      	cbnz	r5, 80093f0 <__d2b+0x7c>
 80093a2:	2e00      	cmp	r6, #0
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	d028      	beq.n	80093fa <__d2b+0x86>
 80093a8:	4668      	mov	r0, sp
 80093aa:	9600      	str	r6, [sp, #0]
 80093ac:	f7ff fd8c 	bl	8008ec8 <__lo0bits>
 80093b0:	9900      	ldr	r1, [sp, #0]
 80093b2:	b300      	cbz	r0, 80093f6 <__d2b+0x82>
 80093b4:	9a01      	ldr	r2, [sp, #4]
 80093b6:	f1c0 0320 	rsb	r3, r0, #32
 80093ba:	fa02 f303 	lsl.w	r3, r2, r3
 80093be:	430b      	orrs	r3, r1
 80093c0:	40c2      	lsrs	r2, r0
 80093c2:	6163      	str	r3, [r4, #20]
 80093c4:	9201      	str	r2, [sp, #4]
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	61a3      	str	r3, [r4, #24]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	bf14      	ite	ne
 80093ce:	2202      	movne	r2, #2
 80093d0:	2201      	moveq	r2, #1
 80093d2:	6122      	str	r2, [r4, #16]
 80093d4:	b1d5      	cbz	r5, 800940c <__d2b+0x98>
 80093d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093da:	4405      	add	r5, r0
 80093dc:	f8c9 5000 	str.w	r5, [r9]
 80093e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093e4:	f8c8 0000 	str.w	r0, [r8]
 80093e8:	4620      	mov	r0, r4
 80093ea:	b003      	add	sp, #12
 80093ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093f4:	e7d5      	b.n	80093a2 <__d2b+0x2e>
 80093f6:	6161      	str	r1, [r4, #20]
 80093f8:	e7e5      	b.n	80093c6 <__d2b+0x52>
 80093fa:	a801      	add	r0, sp, #4
 80093fc:	f7ff fd64 	bl	8008ec8 <__lo0bits>
 8009400:	9b01      	ldr	r3, [sp, #4]
 8009402:	6163      	str	r3, [r4, #20]
 8009404:	2201      	movs	r2, #1
 8009406:	6122      	str	r2, [r4, #16]
 8009408:	3020      	adds	r0, #32
 800940a:	e7e3      	b.n	80093d4 <__d2b+0x60>
 800940c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009410:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009414:	f8c9 0000 	str.w	r0, [r9]
 8009418:	6918      	ldr	r0, [r3, #16]
 800941a:	f7ff fd35 	bl	8008e88 <__hi0bits>
 800941e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009422:	e7df      	b.n	80093e4 <__d2b+0x70>
 8009424:	0800a030 	.word	0x0800a030
 8009428:	0800a041 	.word	0x0800a041

0800942c <_calloc_r>:
 800942c:	b513      	push	{r0, r1, r4, lr}
 800942e:	434a      	muls	r2, r1
 8009430:	4611      	mov	r1, r2
 8009432:	9201      	str	r2, [sp, #4]
 8009434:	f7fd fd3c 	bl	8006eb0 <_malloc_r>
 8009438:	4604      	mov	r4, r0
 800943a:	b118      	cbz	r0, 8009444 <_calloc_r+0x18>
 800943c:	9a01      	ldr	r2, [sp, #4]
 800943e:	2100      	movs	r1, #0
 8009440:	f7fd fd2d 	bl	8006e9e <memset>
 8009444:	4620      	mov	r0, r4
 8009446:	b002      	add	sp, #8
 8009448:	bd10      	pop	{r4, pc}
	...

0800944c <_free_r>:
 800944c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800944e:	2900      	cmp	r1, #0
 8009450:	d048      	beq.n	80094e4 <_free_r+0x98>
 8009452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009456:	9001      	str	r0, [sp, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	f1a1 0404 	sub.w	r4, r1, #4
 800945e:	bfb8      	it	lt
 8009460:	18e4      	addlt	r4, r4, r3
 8009462:	f7ff fc59 	bl	8008d18 <__malloc_lock>
 8009466:	4a20      	ldr	r2, [pc, #128]	; (80094e8 <_free_r+0x9c>)
 8009468:	9801      	ldr	r0, [sp, #4]
 800946a:	6813      	ldr	r3, [r2, #0]
 800946c:	4615      	mov	r5, r2
 800946e:	b933      	cbnz	r3, 800947e <_free_r+0x32>
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	6014      	str	r4, [r2, #0]
 8009474:	b003      	add	sp, #12
 8009476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800947a:	f7ff bc53 	b.w	8008d24 <__malloc_unlock>
 800947e:	42a3      	cmp	r3, r4
 8009480:	d90b      	bls.n	800949a <_free_r+0x4e>
 8009482:	6821      	ldr	r1, [r4, #0]
 8009484:	1862      	adds	r2, r4, r1
 8009486:	4293      	cmp	r3, r2
 8009488:	bf04      	itt	eq
 800948a:	681a      	ldreq	r2, [r3, #0]
 800948c:	685b      	ldreq	r3, [r3, #4]
 800948e:	6063      	str	r3, [r4, #4]
 8009490:	bf04      	itt	eq
 8009492:	1852      	addeq	r2, r2, r1
 8009494:	6022      	streq	r2, [r4, #0]
 8009496:	602c      	str	r4, [r5, #0]
 8009498:	e7ec      	b.n	8009474 <_free_r+0x28>
 800949a:	461a      	mov	r2, r3
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	b10b      	cbz	r3, 80094a4 <_free_r+0x58>
 80094a0:	42a3      	cmp	r3, r4
 80094a2:	d9fa      	bls.n	800949a <_free_r+0x4e>
 80094a4:	6811      	ldr	r1, [r2, #0]
 80094a6:	1855      	adds	r5, r2, r1
 80094a8:	42a5      	cmp	r5, r4
 80094aa:	d10b      	bne.n	80094c4 <_free_r+0x78>
 80094ac:	6824      	ldr	r4, [r4, #0]
 80094ae:	4421      	add	r1, r4
 80094b0:	1854      	adds	r4, r2, r1
 80094b2:	42a3      	cmp	r3, r4
 80094b4:	6011      	str	r1, [r2, #0]
 80094b6:	d1dd      	bne.n	8009474 <_free_r+0x28>
 80094b8:	681c      	ldr	r4, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	6053      	str	r3, [r2, #4]
 80094be:	4421      	add	r1, r4
 80094c0:	6011      	str	r1, [r2, #0]
 80094c2:	e7d7      	b.n	8009474 <_free_r+0x28>
 80094c4:	d902      	bls.n	80094cc <_free_r+0x80>
 80094c6:	230c      	movs	r3, #12
 80094c8:	6003      	str	r3, [r0, #0]
 80094ca:	e7d3      	b.n	8009474 <_free_r+0x28>
 80094cc:	6825      	ldr	r5, [r4, #0]
 80094ce:	1961      	adds	r1, r4, r5
 80094d0:	428b      	cmp	r3, r1
 80094d2:	bf04      	itt	eq
 80094d4:	6819      	ldreq	r1, [r3, #0]
 80094d6:	685b      	ldreq	r3, [r3, #4]
 80094d8:	6063      	str	r3, [r4, #4]
 80094da:	bf04      	itt	eq
 80094dc:	1949      	addeq	r1, r1, r5
 80094de:	6021      	streq	r1, [r4, #0]
 80094e0:	6054      	str	r4, [r2, #4]
 80094e2:	e7c7      	b.n	8009474 <_free_r+0x28>
 80094e4:	b003      	add	sp, #12
 80094e6:	bd30      	pop	{r4, r5, pc}
 80094e8:	20004be0 	.word	0x20004be0

080094ec <__ssputs_r>:
 80094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	688e      	ldr	r6, [r1, #8]
 80094f2:	429e      	cmp	r6, r3
 80094f4:	4682      	mov	sl, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	4690      	mov	r8, r2
 80094fa:	461f      	mov	r7, r3
 80094fc:	d838      	bhi.n	8009570 <__ssputs_r+0x84>
 80094fe:	898a      	ldrh	r2, [r1, #12]
 8009500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009504:	d032      	beq.n	800956c <__ssputs_r+0x80>
 8009506:	6825      	ldr	r5, [r4, #0]
 8009508:	6909      	ldr	r1, [r1, #16]
 800950a:	eba5 0901 	sub.w	r9, r5, r1
 800950e:	6965      	ldr	r5, [r4, #20]
 8009510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009518:	3301      	adds	r3, #1
 800951a:	444b      	add	r3, r9
 800951c:	106d      	asrs	r5, r5, #1
 800951e:	429d      	cmp	r5, r3
 8009520:	bf38      	it	cc
 8009522:	461d      	movcc	r5, r3
 8009524:	0553      	lsls	r3, r2, #21
 8009526:	d531      	bpl.n	800958c <__ssputs_r+0xa0>
 8009528:	4629      	mov	r1, r5
 800952a:	f7fd fcc1 	bl	8006eb0 <_malloc_r>
 800952e:	4606      	mov	r6, r0
 8009530:	b950      	cbnz	r0, 8009548 <__ssputs_r+0x5c>
 8009532:	230c      	movs	r3, #12
 8009534:	f8ca 3000 	str.w	r3, [sl]
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	f04f 30ff 	mov.w	r0, #4294967295
 8009544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009548:	6921      	ldr	r1, [r4, #16]
 800954a:	464a      	mov	r2, r9
 800954c:	f7fd fc99 	bl	8006e82 <memcpy>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	6126      	str	r6, [r4, #16]
 800955e:	6165      	str	r5, [r4, #20]
 8009560:	444e      	add	r6, r9
 8009562:	eba5 0509 	sub.w	r5, r5, r9
 8009566:	6026      	str	r6, [r4, #0]
 8009568:	60a5      	str	r5, [r4, #8]
 800956a:	463e      	mov	r6, r7
 800956c:	42be      	cmp	r6, r7
 800956e:	d900      	bls.n	8009572 <__ssputs_r+0x86>
 8009570:	463e      	mov	r6, r7
 8009572:	4632      	mov	r2, r6
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	4641      	mov	r1, r8
 8009578:	f000 fae4 	bl	8009b44 <memmove>
 800957c:	68a3      	ldr	r3, [r4, #8]
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	1b9b      	subs	r3, r3, r6
 8009582:	4432      	add	r2, r6
 8009584:	60a3      	str	r3, [r4, #8]
 8009586:	6022      	str	r2, [r4, #0]
 8009588:	2000      	movs	r0, #0
 800958a:	e7db      	b.n	8009544 <__ssputs_r+0x58>
 800958c:	462a      	mov	r2, r5
 800958e:	f000 faf3 	bl	8009b78 <_realloc_r>
 8009592:	4606      	mov	r6, r0
 8009594:	2800      	cmp	r0, #0
 8009596:	d1e1      	bne.n	800955c <__ssputs_r+0x70>
 8009598:	6921      	ldr	r1, [r4, #16]
 800959a:	4650      	mov	r0, sl
 800959c:	f7ff ff56 	bl	800944c <_free_r>
 80095a0:	e7c7      	b.n	8009532 <__ssputs_r+0x46>
	...

080095a4 <_svfiprintf_r>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	4698      	mov	r8, r3
 80095aa:	898b      	ldrh	r3, [r1, #12]
 80095ac:	061b      	lsls	r3, r3, #24
 80095ae:	b09d      	sub	sp, #116	; 0x74
 80095b0:	4607      	mov	r7, r0
 80095b2:	460d      	mov	r5, r1
 80095b4:	4614      	mov	r4, r2
 80095b6:	d50e      	bpl.n	80095d6 <_svfiprintf_r+0x32>
 80095b8:	690b      	ldr	r3, [r1, #16]
 80095ba:	b963      	cbnz	r3, 80095d6 <_svfiprintf_r+0x32>
 80095bc:	2140      	movs	r1, #64	; 0x40
 80095be:	f7fd fc77 	bl	8006eb0 <_malloc_r>
 80095c2:	6028      	str	r0, [r5, #0]
 80095c4:	6128      	str	r0, [r5, #16]
 80095c6:	b920      	cbnz	r0, 80095d2 <_svfiprintf_r+0x2e>
 80095c8:	230c      	movs	r3, #12
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295
 80095d0:	e0d1      	b.n	8009776 <_svfiprintf_r+0x1d2>
 80095d2:	2340      	movs	r3, #64	; 0x40
 80095d4:	616b      	str	r3, [r5, #20]
 80095d6:	2300      	movs	r3, #0
 80095d8:	9309      	str	r3, [sp, #36]	; 0x24
 80095da:	2320      	movs	r3, #32
 80095dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e4:	2330      	movs	r3, #48	; 0x30
 80095e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009790 <_svfiprintf_r+0x1ec>
 80095ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ee:	f04f 0901 	mov.w	r9, #1
 80095f2:	4623      	mov	r3, r4
 80095f4:	469a      	mov	sl, r3
 80095f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095fa:	b10a      	cbz	r2, 8009600 <_svfiprintf_r+0x5c>
 80095fc:	2a25      	cmp	r2, #37	; 0x25
 80095fe:	d1f9      	bne.n	80095f4 <_svfiprintf_r+0x50>
 8009600:	ebba 0b04 	subs.w	fp, sl, r4
 8009604:	d00b      	beq.n	800961e <_svfiprintf_r+0x7a>
 8009606:	465b      	mov	r3, fp
 8009608:	4622      	mov	r2, r4
 800960a:	4629      	mov	r1, r5
 800960c:	4638      	mov	r0, r7
 800960e:	f7ff ff6d 	bl	80094ec <__ssputs_r>
 8009612:	3001      	adds	r0, #1
 8009614:	f000 80aa 	beq.w	800976c <_svfiprintf_r+0x1c8>
 8009618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800961a:	445a      	add	r2, fp
 800961c:	9209      	str	r2, [sp, #36]	; 0x24
 800961e:	f89a 3000 	ldrb.w	r3, [sl]
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 80a2 	beq.w	800976c <_svfiprintf_r+0x1c8>
 8009628:	2300      	movs	r3, #0
 800962a:	f04f 32ff 	mov.w	r2, #4294967295
 800962e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009632:	f10a 0a01 	add.w	sl, sl, #1
 8009636:	9304      	str	r3, [sp, #16]
 8009638:	9307      	str	r3, [sp, #28]
 800963a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800963e:	931a      	str	r3, [sp, #104]	; 0x68
 8009640:	4654      	mov	r4, sl
 8009642:	2205      	movs	r2, #5
 8009644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009648:	4851      	ldr	r0, [pc, #324]	; (8009790 <_svfiprintf_r+0x1ec>)
 800964a:	f7f6 fdd1 	bl	80001f0 <memchr>
 800964e:	9a04      	ldr	r2, [sp, #16]
 8009650:	b9d8      	cbnz	r0, 800968a <_svfiprintf_r+0xe6>
 8009652:	06d0      	lsls	r0, r2, #27
 8009654:	bf44      	itt	mi
 8009656:	2320      	movmi	r3, #32
 8009658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800965c:	0711      	lsls	r1, r2, #28
 800965e:	bf44      	itt	mi
 8009660:	232b      	movmi	r3, #43	; 0x2b
 8009662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009666:	f89a 3000 	ldrb.w	r3, [sl]
 800966a:	2b2a      	cmp	r3, #42	; 0x2a
 800966c:	d015      	beq.n	800969a <_svfiprintf_r+0xf6>
 800966e:	9a07      	ldr	r2, [sp, #28]
 8009670:	4654      	mov	r4, sl
 8009672:	2000      	movs	r0, #0
 8009674:	f04f 0c0a 	mov.w	ip, #10
 8009678:	4621      	mov	r1, r4
 800967a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800967e:	3b30      	subs	r3, #48	; 0x30
 8009680:	2b09      	cmp	r3, #9
 8009682:	d94e      	bls.n	8009722 <_svfiprintf_r+0x17e>
 8009684:	b1b0      	cbz	r0, 80096b4 <_svfiprintf_r+0x110>
 8009686:	9207      	str	r2, [sp, #28]
 8009688:	e014      	b.n	80096b4 <_svfiprintf_r+0x110>
 800968a:	eba0 0308 	sub.w	r3, r0, r8
 800968e:	fa09 f303 	lsl.w	r3, r9, r3
 8009692:	4313      	orrs	r3, r2
 8009694:	9304      	str	r3, [sp, #16]
 8009696:	46a2      	mov	sl, r4
 8009698:	e7d2      	b.n	8009640 <_svfiprintf_r+0x9c>
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	1d19      	adds	r1, r3, #4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	9103      	str	r1, [sp, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bfbb      	ittet	lt
 80096a6:	425b      	neglt	r3, r3
 80096a8:	f042 0202 	orrlt.w	r2, r2, #2
 80096ac:	9307      	strge	r3, [sp, #28]
 80096ae:	9307      	strlt	r3, [sp, #28]
 80096b0:	bfb8      	it	lt
 80096b2:	9204      	strlt	r2, [sp, #16]
 80096b4:	7823      	ldrb	r3, [r4, #0]
 80096b6:	2b2e      	cmp	r3, #46	; 0x2e
 80096b8:	d10c      	bne.n	80096d4 <_svfiprintf_r+0x130>
 80096ba:	7863      	ldrb	r3, [r4, #1]
 80096bc:	2b2a      	cmp	r3, #42	; 0x2a
 80096be:	d135      	bne.n	800972c <_svfiprintf_r+0x188>
 80096c0:	9b03      	ldr	r3, [sp, #12]
 80096c2:	1d1a      	adds	r2, r3, #4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	9203      	str	r2, [sp, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bfb8      	it	lt
 80096cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80096d0:	3402      	adds	r4, #2
 80096d2:	9305      	str	r3, [sp, #20]
 80096d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097a0 <_svfiprintf_r+0x1fc>
 80096d8:	7821      	ldrb	r1, [r4, #0]
 80096da:	2203      	movs	r2, #3
 80096dc:	4650      	mov	r0, sl
 80096de:	f7f6 fd87 	bl	80001f0 <memchr>
 80096e2:	b140      	cbz	r0, 80096f6 <_svfiprintf_r+0x152>
 80096e4:	2340      	movs	r3, #64	; 0x40
 80096e6:	eba0 000a 	sub.w	r0, r0, sl
 80096ea:	fa03 f000 	lsl.w	r0, r3, r0
 80096ee:	9b04      	ldr	r3, [sp, #16]
 80096f0:	4303      	orrs	r3, r0
 80096f2:	3401      	adds	r4, #1
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fa:	4826      	ldr	r0, [pc, #152]	; (8009794 <_svfiprintf_r+0x1f0>)
 80096fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009700:	2206      	movs	r2, #6
 8009702:	f7f6 fd75 	bl	80001f0 <memchr>
 8009706:	2800      	cmp	r0, #0
 8009708:	d038      	beq.n	800977c <_svfiprintf_r+0x1d8>
 800970a:	4b23      	ldr	r3, [pc, #140]	; (8009798 <_svfiprintf_r+0x1f4>)
 800970c:	bb1b      	cbnz	r3, 8009756 <_svfiprintf_r+0x1b2>
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	3307      	adds	r3, #7
 8009712:	f023 0307 	bic.w	r3, r3, #7
 8009716:	3308      	adds	r3, #8
 8009718:	9303      	str	r3, [sp, #12]
 800971a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800971c:	4433      	add	r3, r6
 800971e:	9309      	str	r3, [sp, #36]	; 0x24
 8009720:	e767      	b.n	80095f2 <_svfiprintf_r+0x4e>
 8009722:	fb0c 3202 	mla	r2, ip, r2, r3
 8009726:	460c      	mov	r4, r1
 8009728:	2001      	movs	r0, #1
 800972a:	e7a5      	b.n	8009678 <_svfiprintf_r+0xd4>
 800972c:	2300      	movs	r3, #0
 800972e:	3401      	adds	r4, #1
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	4619      	mov	r1, r3
 8009734:	f04f 0c0a 	mov.w	ip, #10
 8009738:	4620      	mov	r0, r4
 800973a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800973e:	3a30      	subs	r2, #48	; 0x30
 8009740:	2a09      	cmp	r2, #9
 8009742:	d903      	bls.n	800974c <_svfiprintf_r+0x1a8>
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0c5      	beq.n	80096d4 <_svfiprintf_r+0x130>
 8009748:	9105      	str	r1, [sp, #20]
 800974a:	e7c3      	b.n	80096d4 <_svfiprintf_r+0x130>
 800974c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009750:	4604      	mov	r4, r0
 8009752:	2301      	movs	r3, #1
 8009754:	e7f0      	b.n	8009738 <_svfiprintf_r+0x194>
 8009756:	ab03      	add	r3, sp, #12
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	462a      	mov	r2, r5
 800975c:	4b0f      	ldr	r3, [pc, #60]	; (800979c <_svfiprintf_r+0x1f8>)
 800975e:	a904      	add	r1, sp, #16
 8009760:	4638      	mov	r0, r7
 8009762:	f7fd fc9f 	bl	80070a4 <_printf_float>
 8009766:	1c42      	adds	r2, r0, #1
 8009768:	4606      	mov	r6, r0
 800976a:	d1d6      	bne.n	800971a <_svfiprintf_r+0x176>
 800976c:	89ab      	ldrh	r3, [r5, #12]
 800976e:	065b      	lsls	r3, r3, #25
 8009770:	f53f af2c 	bmi.w	80095cc <_svfiprintf_r+0x28>
 8009774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009776:	b01d      	add	sp, #116	; 0x74
 8009778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977c:	ab03      	add	r3, sp, #12
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	462a      	mov	r2, r5
 8009782:	4b06      	ldr	r3, [pc, #24]	; (800979c <_svfiprintf_r+0x1f8>)
 8009784:	a904      	add	r1, sp, #16
 8009786:	4638      	mov	r0, r7
 8009788:	f7fd ff30 	bl	80075ec <_printf_i>
 800978c:	e7eb      	b.n	8009766 <_svfiprintf_r+0x1c2>
 800978e:	bf00      	nop
 8009790:	0800a1a4 	.word	0x0800a1a4
 8009794:	0800a1ae 	.word	0x0800a1ae
 8009798:	080070a5 	.word	0x080070a5
 800979c:	080094ed 	.word	0x080094ed
 80097a0:	0800a1aa 	.word	0x0800a1aa

080097a4 <__sfputc_r>:
 80097a4:	6893      	ldr	r3, [r2, #8]
 80097a6:	3b01      	subs	r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	b410      	push	{r4}
 80097ac:	6093      	str	r3, [r2, #8]
 80097ae:	da08      	bge.n	80097c2 <__sfputc_r+0x1e>
 80097b0:	6994      	ldr	r4, [r2, #24]
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	db01      	blt.n	80097ba <__sfputc_r+0x16>
 80097b6:	290a      	cmp	r1, #10
 80097b8:	d103      	bne.n	80097c2 <__sfputc_r+0x1e>
 80097ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097be:	f7fe ba0d 	b.w	8007bdc <__swbuf_r>
 80097c2:	6813      	ldr	r3, [r2, #0]
 80097c4:	1c58      	adds	r0, r3, #1
 80097c6:	6010      	str	r0, [r2, #0]
 80097c8:	7019      	strb	r1, [r3, #0]
 80097ca:	4608      	mov	r0, r1
 80097cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <__sfputs_r>:
 80097d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d4:	4606      	mov	r6, r0
 80097d6:	460f      	mov	r7, r1
 80097d8:	4614      	mov	r4, r2
 80097da:	18d5      	adds	r5, r2, r3
 80097dc:	42ac      	cmp	r4, r5
 80097de:	d101      	bne.n	80097e4 <__sfputs_r+0x12>
 80097e0:	2000      	movs	r0, #0
 80097e2:	e007      	b.n	80097f4 <__sfputs_r+0x22>
 80097e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e8:	463a      	mov	r2, r7
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff ffda 	bl	80097a4 <__sfputc_r>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d1f3      	bne.n	80097dc <__sfputs_r+0xa>
 80097f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097f8 <_vfiprintf_r>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	460d      	mov	r5, r1
 80097fe:	b09d      	sub	sp, #116	; 0x74
 8009800:	4614      	mov	r4, r2
 8009802:	4698      	mov	r8, r3
 8009804:	4606      	mov	r6, r0
 8009806:	b118      	cbz	r0, 8009810 <_vfiprintf_r+0x18>
 8009808:	6983      	ldr	r3, [r0, #24]
 800980a:	b90b      	cbnz	r3, 8009810 <_vfiprintf_r+0x18>
 800980c:	f7fd fa74 	bl	8006cf8 <__sinit>
 8009810:	4b89      	ldr	r3, [pc, #548]	; (8009a38 <_vfiprintf_r+0x240>)
 8009812:	429d      	cmp	r5, r3
 8009814:	d11b      	bne.n	800984e <_vfiprintf_r+0x56>
 8009816:	6875      	ldr	r5, [r6, #4]
 8009818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800981a:	07d9      	lsls	r1, r3, #31
 800981c:	d405      	bmi.n	800982a <_vfiprintf_r+0x32>
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	059a      	lsls	r2, r3, #22
 8009822:	d402      	bmi.n	800982a <_vfiprintf_r+0x32>
 8009824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009826:	f7fd fb2a 	bl	8006e7e <__retarget_lock_acquire_recursive>
 800982a:	89ab      	ldrh	r3, [r5, #12]
 800982c:	071b      	lsls	r3, r3, #28
 800982e:	d501      	bpl.n	8009834 <_vfiprintf_r+0x3c>
 8009830:	692b      	ldr	r3, [r5, #16]
 8009832:	b9eb      	cbnz	r3, 8009870 <_vfiprintf_r+0x78>
 8009834:	4629      	mov	r1, r5
 8009836:	4630      	mov	r0, r6
 8009838:	f7fe fa34 	bl	8007ca4 <__swsetup_r>
 800983c:	b1c0      	cbz	r0, 8009870 <_vfiprintf_r+0x78>
 800983e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009840:	07dc      	lsls	r4, r3, #31
 8009842:	d50e      	bpl.n	8009862 <_vfiprintf_r+0x6a>
 8009844:	f04f 30ff 	mov.w	r0, #4294967295
 8009848:	b01d      	add	sp, #116	; 0x74
 800984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984e:	4b7b      	ldr	r3, [pc, #492]	; (8009a3c <_vfiprintf_r+0x244>)
 8009850:	429d      	cmp	r5, r3
 8009852:	d101      	bne.n	8009858 <_vfiprintf_r+0x60>
 8009854:	68b5      	ldr	r5, [r6, #8]
 8009856:	e7df      	b.n	8009818 <_vfiprintf_r+0x20>
 8009858:	4b79      	ldr	r3, [pc, #484]	; (8009a40 <_vfiprintf_r+0x248>)
 800985a:	429d      	cmp	r5, r3
 800985c:	bf08      	it	eq
 800985e:	68f5      	ldreq	r5, [r6, #12]
 8009860:	e7da      	b.n	8009818 <_vfiprintf_r+0x20>
 8009862:	89ab      	ldrh	r3, [r5, #12]
 8009864:	0598      	lsls	r0, r3, #22
 8009866:	d4ed      	bmi.n	8009844 <_vfiprintf_r+0x4c>
 8009868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800986a:	f7fd fb09 	bl	8006e80 <__retarget_lock_release_recursive>
 800986e:	e7e9      	b.n	8009844 <_vfiprintf_r+0x4c>
 8009870:	2300      	movs	r3, #0
 8009872:	9309      	str	r3, [sp, #36]	; 0x24
 8009874:	2320      	movs	r3, #32
 8009876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800987a:	f8cd 800c 	str.w	r8, [sp, #12]
 800987e:	2330      	movs	r3, #48	; 0x30
 8009880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a44 <_vfiprintf_r+0x24c>
 8009884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009888:	f04f 0901 	mov.w	r9, #1
 800988c:	4623      	mov	r3, r4
 800988e:	469a      	mov	sl, r3
 8009890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009894:	b10a      	cbz	r2, 800989a <_vfiprintf_r+0xa2>
 8009896:	2a25      	cmp	r2, #37	; 0x25
 8009898:	d1f9      	bne.n	800988e <_vfiprintf_r+0x96>
 800989a:	ebba 0b04 	subs.w	fp, sl, r4
 800989e:	d00b      	beq.n	80098b8 <_vfiprintf_r+0xc0>
 80098a0:	465b      	mov	r3, fp
 80098a2:	4622      	mov	r2, r4
 80098a4:	4629      	mov	r1, r5
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7ff ff93 	bl	80097d2 <__sfputs_r>
 80098ac:	3001      	adds	r0, #1
 80098ae:	f000 80aa 	beq.w	8009a06 <_vfiprintf_r+0x20e>
 80098b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b4:	445a      	add	r2, fp
 80098b6:	9209      	str	r2, [sp, #36]	; 0x24
 80098b8:	f89a 3000 	ldrb.w	r3, [sl]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 80a2 	beq.w	8009a06 <_vfiprintf_r+0x20e>
 80098c2:	2300      	movs	r3, #0
 80098c4:	f04f 32ff 	mov.w	r2, #4294967295
 80098c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098cc:	f10a 0a01 	add.w	sl, sl, #1
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	9307      	str	r3, [sp, #28]
 80098d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098d8:	931a      	str	r3, [sp, #104]	; 0x68
 80098da:	4654      	mov	r4, sl
 80098dc:	2205      	movs	r2, #5
 80098de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e2:	4858      	ldr	r0, [pc, #352]	; (8009a44 <_vfiprintf_r+0x24c>)
 80098e4:	f7f6 fc84 	bl	80001f0 <memchr>
 80098e8:	9a04      	ldr	r2, [sp, #16]
 80098ea:	b9d8      	cbnz	r0, 8009924 <_vfiprintf_r+0x12c>
 80098ec:	06d1      	lsls	r1, r2, #27
 80098ee:	bf44      	itt	mi
 80098f0:	2320      	movmi	r3, #32
 80098f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f6:	0713      	lsls	r3, r2, #28
 80098f8:	bf44      	itt	mi
 80098fa:	232b      	movmi	r3, #43	; 0x2b
 80098fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009900:	f89a 3000 	ldrb.w	r3, [sl]
 8009904:	2b2a      	cmp	r3, #42	; 0x2a
 8009906:	d015      	beq.n	8009934 <_vfiprintf_r+0x13c>
 8009908:	9a07      	ldr	r2, [sp, #28]
 800990a:	4654      	mov	r4, sl
 800990c:	2000      	movs	r0, #0
 800990e:	f04f 0c0a 	mov.w	ip, #10
 8009912:	4621      	mov	r1, r4
 8009914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009918:	3b30      	subs	r3, #48	; 0x30
 800991a:	2b09      	cmp	r3, #9
 800991c:	d94e      	bls.n	80099bc <_vfiprintf_r+0x1c4>
 800991e:	b1b0      	cbz	r0, 800994e <_vfiprintf_r+0x156>
 8009920:	9207      	str	r2, [sp, #28]
 8009922:	e014      	b.n	800994e <_vfiprintf_r+0x156>
 8009924:	eba0 0308 	sub.w	r3, r0, r8
 8009928:	fa09 f303 	lsl.w	r3, r9, r3
 800992c:	4313      	orrs	r3, r2
 800992e:	9304      	str	r3, [sp, #16]
 8009930:	46a2      	mov	sl, r4
 8009932:	e7d2      	b.n	80098da <_vfiprintf_r+0xe2>
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	1d19      	adds	r1, r3, #4
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	9103      	str	r1, [sp, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	bfbb      	ittet	lt
 8009940:	425b      	neglt	r3, r3
 8009942:	f042 0202 	orrlt.w	r2, r2, #2
 8009946:	9307      	strge	r3, [sp, #28]
 8009948:	9307      	strlt	r3, [sp, #28]
 800994a:	bfb8      	it	lt
 800994c:	9204      	strlt	r2, [sp, #16]
 800994e:	7823      	ldrb	r3, [r4, #0]
 8009950:	2b2e      	cmp	r3, #46	; 0x2e
 8009952:	d10c      	bne.n	800996e <_vfiprintf_r+0x176>
 8009954:	7863      	ldrb	r3, [r4, #1]
 8009956:	2b2a      	cmp	r3, #42	; 0x2a
 8009958:	d135      	bne.n	80099c6 <_vfiprintf_r+0x1ce>
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	1d1a      	adds	r2, r3, #4
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	9203      	str	r2, [sp, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	bfb8      	it	lt
 8009966:	f04f 33ff 	movlt.w	r3, #4294967295
 800996a:	3402      	adds	r4, #2
 800996c:	9305      	str	r3, [sp, #20]
 800996e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a54 <_vfiprintf_r+0x25c>
 8009972:	7821      	ldrb	r1, [r4, #0]
 8009974:	2203      	movs	r2, #3
 8009976:	4650      	mov	r0, sl
 8009978:	f7f6 fc3a 	bl	80001f0 <memchr>
 800997c:	b140      	cbz	r0, 8009990 <_vfiprintf_r+0x198>
 800997e:	2340      	movs	r3, #64	; 0x40
 8009980:	eba0 000a 	sub.w	r0, r0, sl
 8009984:	fa03 f000 	lsl.w	r0, r3, r0
 8009988:	9b04      	ldr	r3, [sp, #16]
 800998a:	4303      	orrs	r3, r0
 800998c:	3401      	adds	r4, #1
 800998e:	9304      	str	r3, [sp, #16]
 8009990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009994:	482c      	ldr	r0, [pc, #176]	; (8009a48 <_vfiprintf_r+0x250>)
 8009996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800999a:	2206      	movs	r2, #6
 800999c:	f7f6 fc28 	bl	80001f0 <memchr>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d03f      	beq.n	8009a24 <_vfiprintf_r+0x22c>
 80099a4:	4b29      	ldr	r3, [pc, #164]	; (8009a4c <_vfiprintf_r+0x254>)
 80099a6:	bb1b      	cbnz	r3, 80099f0 <_vfiprintf_r+0x1f8>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	3307      	adds	r3, #7
 80099ac:	f023 0307 	bic.w	r3, r3, #7
 80099b0:	3308      	adds	r3, #8
 80099b2:	9303      	str	r3, [sp, #12]
 80099b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b6:	443b      	add	r3, r7
 80099b8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ba:	e767      	b.n	800988c <_vfiprintf_r+0x94>
 80099bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c0:	460c      	mov	r4, r1
 80099c2:	2001      	movs	r0, #1
 80099c4:	e7a5      	b.n	8009912 <_vfiprintf_r+0x11a>
 80099c6:	2300      	movs	r3, #0
 80099c8:	3401      	adds	r4, #1
 80099ca:	9305      	str	r3, [sp, #20]
 80099cc:	4619      	mov	r1, r3
 80099ce:	f04f 0c0a 	mov.w	ip, #10
 80099d2:	4620      	mov	r0, r4
 80099d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d8:	3a30      	subs	r2, #48	; 0x30
 80099da:	2a09      	cmp	r2, #9
 80099dc:	d903      	bls.n	80099e6 <_vfiprintf_r+0x1ee>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0c5      	beq.n	800996e <_vfiprintf_r+0x176>
 80099e2:	9105      	str	r1, [sp, #20]
 80099e4:	e7c3      	b.n	800996e <_vfiprintf_r+0x176>
 80099e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ea:	4604      	mov	r4, r0
 80099ec:	2301      	movs	r3, #1
 80099ee:	e7f0      	b.n	80099d2 <_vfiprintf_r+0x1da>
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	462a      	mov	r2, r5
 80099f6:	4b16      	ldr	r3, [pc, #88]	; (8009a50 <_vfiprintf_r+0x258>)
 80099f8:	a904      	add	r1, sp, #16
 80099fa:	4630      	mov	r0, r6
 80099fc:	f7fd fb52 	bl	80070a4 <_printf_float>
 8009a00:	4607      	mov	r7, r0
 8009a02:	1c78      	adds	r0, r7, #1
 8009a04:	d1d6      	bne.n	80099b4 <_vfiprintf_r+0x1bc>
 8009a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a08:	07d9      	lsls	r1, r3, #31
 8009a0a:	d405      	bmi.n	8009a18 <_vfiprintf_r+0x220>
 8009a0c:	89ab      	ldrh	r3, [r5, #12]
 8009a0e:	059a      	lsls	r2, r3, #22
 8009a10:	d402      	bmi.n	8009a18 <_vfiprintf_r+0x220>
 8009a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a14:	f7fd fa34 	bl	8006e80 <__retarget_lock_release_recursive>
 8009a18:	89ab      	ldrh	r3, [r5, #12]
 8009a1a:	065b      	lsls	r3, r3, #25
 8009a1c:	f53f af12 	bmi.w	8009844 <_vfiprintf_r+0x4c>
 8009a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a22:	e711      	b.n	8009848 <_vfiprintf_r+0x50>
 8009a24:	ab03      	add	r3, sp, #12
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4b09      	ldr	r3, [pc, #36]	; (8009a50 <_vfiprintf_r+0x258>)
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f7fd fddc 	bl	80075ec <_printf_i>
 8009a34:	e7e4      	b.n	8009a00 <_vfiprintf_r+0x208>
 8009a36:	bf00      	nop
 8009a38:	08009e34 	.word	0x08009e34
 8009a3c:	08009e54 	.word	0x08009e54
 8009a40:	08009e14 	.word	0x08009e14
 8009a44:	0800a1a4 	.word	0x0800a1a4
 8009a48:	0800a1ae 	.word	0x0800a1ae
 8009a4c:	080070a5 	.word	0x080070a5
 8009a50:	080097d3 	.word	0x080097d3
 8009a54:	0800a1aa 	.word	0x0800a1aa

08009a58 <_read_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	; (8009a78 <_read_r+0x20>)
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	602a      	str	r2, [r5, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	f7f7 fccc 	bl	8001404 <_read>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_read_r+0x1e>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_read_r+0x1e>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	20004fa8 	.word	0x20004fa8

08009a7c <__assert_func>:
 8009a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a7e:	4614      	mov	r4, r2
 8009a80:	461a      	mov	r2, r3
 8009a82:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <__assert_func+0x2c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4605      	mov	r5, r0
 8009a88:	68d8      	ldr	r0, [r3, #12]
 8009a8a:	b14c      	cbz	r4, 8009aa0 <__assert_func+0x24>
 8009a8c:	4b07      	ldr	r3, [pc, #28]	; (8009aac <__assert_func+0x30>)
 8009a8e:	9100      	str	r1, [sp, #0]
 8009a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a94:	4906      	ldr	r1, [pc, #24]	; (8009ab0 <__assert_func+0x34>)
 8009a96:	462b      	mov	r3, r5
 8009a98:	f000 f80e 	bl	8009ab8 <fiprintf>
 8009a9c:	f000 f89f 	bl	8009bde <abort>
 8009aa0:	4b04      	ldr	r3, [pc, #16]	; (8009ab4 <__assert_func+0x38>)
 8009aa2:	461c      	mov	r4, r3
 8009aa4:	e7f3      	b.n	8009a8e <__assert_func+0x12>
 8009aa6:	bf00      	nop
 8009aa8:	20000010 	.word	0x20000010
 8009aac:	0800a1b5 	.word	0x0800a1b5
 8009ab0:	0800a1c2 	.word	0x0800a1c2
 8009ab4:	0800a1f0 	.word	0x0800a1f0

08009ab8 <fiprintf>:
 8009ab8:	b40e      	push	{r1, r2, r3}
 8009aba:	b503      	push	{r0, r1, lr}
 8009abc:	4601      	mov	r1, r0
 8009abe:	ab03      	add	r3, sp, #12
 8009ac0:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <fiprintf+0x20>)
 8009ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac6:	6800      	ldr	r0, [r0, #0]
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	f7ff fe95 	bl	80097f8 <_vfiprintf_r>
 8009ace:	b002      	add	sp, #8
 8009ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad4:	b003      	add	sp, #12
 8009ad6:	4770      	bx	lr
 8009ad8:	20000010 	.word	0x20000010

08009adc <_fstat_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d07      	ldr	r5, [pc, #28]	; (8009afc <_fstat_r+0x20>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	602b      	str	r3, [r5, #0]
 8009aea:	f7f7 fcb3 	bl	8001454 <_fstat>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	d102      	bne.n	8009af8 <_fstat_r+0x1c>
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	b103      	cbz	r3, 8009af8 <_fstat_r+0x1c>
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	bf00      	nop
 8009afc:	20004fa8 	.word	0x20004fa8

08009b00 <_isatty_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d06      	ldr	r5, [pc, #24]	; (8009b1c <_isatty_r+0x1c>)
 8009b04:	2300      	movs	r3, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	602b      	str	r3, [r5, #0]
 8009b0c:	f7f7 fc2a 	bl	8001364 <_isatty>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_isatty_r+0x1a>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_isatty_r+0x1a>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20004fa8 	.word	0x20004fa8

08009b20 <__ascii_mbtowc>:
 8009b20:	b082      	sub	sp, #8
 8009b22:	b901      	cbnz	r1, 8009b26 <__ascii_mbtowc+0x6>
 8009b24:	a901      	add	r1, sp, #4
 8009b26:	b142      	cbz	r2, 8009b3a <__ascii_mbtowc+0x1a>
 8009b28:	b14b      	cbz	r3, 8009b3e <__ascii_mbtowc+0x1e>
 8009b2a:	7813      	ldrb	r3, [r2, #0]
 8009b2c:	600b      	str	r3, [r1, #0]
 8009b2e:	7812      	ldrb	r2, [r2, #0]
 8009b30:	1e10      	subs	r0, r2, #0
 8009b32:	bf18      	it	ne
 8009b34:	2001      	movne	r0, #1
 8009b36:	b002      	add	sp, #8
 8009b38:	4770      	bx	lr
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	e7fb      	b.n	8009b36 <__ascii_mbtowc+0x16>
 8009b3e:	f06f 0001 	mvn.w	r0, #1
 8009b42:	e7f8      	b.n	8009b36 <__ascii_mbtowc+0x16>

08009b44 <memmove>:
 8009b44:	4288      	cmp	r0, r1
 8009b46:	b510      	push	{r4, lr}
 8009b48:	eb01 0402 	add.w	r4, r1, r2
 8009b4c:	d902      	bls.n	8009b54 <memmove+0x10>
 8009b4e:	4284      	cmp	r4, r0
 8009b50:	4623      	mov	r3, r4
 8009b52:	d807      	bhi.n	8009b64 <memmove+0x20>
 8009b54:	1e43      	subs	r3, r0, #1
 8009b56:	42a1      	cmp	r1, r4
 8009b58:	d008      	beq.n	8009b6c <memmove+0x28>
 8009b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b62:	e7f8      	b.n	8009b56 <memmove+0x12>
 8009b64:	4402      	add	r2, r0
 8009b66:	4601      	mov	r1, r0
 8009b68:	428a      	cmp	r2, r1
 8009b6a:	d100      	bne.n	8009b6e <memmove+0x2a>
 8009b6c:	bd10      	pop	{r4, pc}
 8009b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b76:	e7f7      	b.n	8009b68 <memmove+0x24>

08009b78 <_realloc_r>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	4607      	mov	r7, r0
 8009b7c:	4614      	mov	r4, r2
 8009b7e:	460e      	mov	r6, r1
 8009b80:	b921      	cbnz	r1, 8009b8c <_realloc_r+0x14>
 8009b82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b86:	4611      	mov	r1, r2
 8009b88:	f7fd b992 	b.w	8006eb0 <_malloc_r>
 8009b8c:	b922      	cbnz	r2, 8009b98 <_realloc_r+0x20>
 8009b8e:	f7ff fc5d 	bl	800944c <_free_r>
 8009b92:	4625      	mov	r5, r4
 8009b94:	4628      	mov	r0, r5
 8009b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b98:	f000 f828 	bl	8009bec <_malloc_usable_size_r>
 8009b9c:	42a0      	cmp	r0, r4
 8009b9e:	d20f      	bcs.n	8009bc0 <_realloc_r+0x48>
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	f7fd f984 	bl	8006eb0 <_malloc_r>
 8009ba8:	4605      	mov	r5, r0
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d0f2      	beq.n	8009b94 <_realloc_r+0x1c>
 8009bae:	4631      	mov	r1, r6
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	f7fd f966 	bl	8006e82 <memcpy>
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f7ff fc47 	bl	800944c <_free_r>
 8009bbe:	e7e9      	b.n	8009b94 <_realloc_r+0x1c>
 8009bc0:	4635      	mov	r5, r6
 8009bc2:	e7e7      	b.n	8009b94 <_realloc_r+0x1c>

08009bc4 <__ascii_wctomb>:
 8009bc4:	b149      	cbz	r1, 8009bda <__ascii_wctomb+0x16>
 8009bc6:	2aff      	cmp	r2, #255	; 0xff
 8009bc8:	bf85      	ittet	hi
 8009bca:	238a      	movhi	r3, #138	; 0x8a
 8009bcc:	6003      	strhi	r3, [r0, #0]
 8009bce:	700a      	strbls	r2, [r1, #0]
 8009bd0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bd4:	bf98      	it	ls
 8009bd6:	2001      	movls	r0, #1
 8009bd8:	4770      	bx	lr
 8009bda:	4608      	mov	r0, r1
 8009bdc:	4770      	bx	lr

08009bde <abort>:
 8009bde:	b508      	push	{r3, lr}
 8009be0:	2006      	movs	r0, #6
 8009be2:	f000 f833 	bl	8009c4c <raise>
 8009be6:	2001      	movs	r0, #1
 8009be8:	f000 f85c 	bl	8009ca4 <_exit>

08009bec <_malloc_usable_size_r>:
 8009bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf0:	1f18      	subs	r0, r3, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	bfbc      	itt	lt
 8009bf6:	580b      	ldrlt	r3, [r1, r0]
 8009bf8:	18c0      	addlt	r0, r0, r3
 8009bfa:	4770      	bx	lr

08009bfc <_raise_r>:
 8009bfc:	291f      	cmp	r1, #31
 8009bfe:	b538      	push	{r3, r4, r5, lr}
 8009c00:	4604      	mov	r4, r0
 8009c02:	460d      	mov	r5, r1
 8009c04:	d904      	bls.n	8009c10 <_raise_r+0x14>
 8009c06:	2316      	movs	r3, #22
 8009c08:	6003      	str	r3, [r0, #0]
 8009c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c12:	b112      	cbz	r2, 8009c1a <_raise_r+0x1e>
 8009c14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c18:	b94b      	cbnz	r3, 8009c2e <_raise_r+0x32>
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f000 f830 	bl	8009c80 <_getpid_r>
 8009c20:	462a      	mov	r2, r5
 8009c22:	4601      	mov	r1, r0
 8009c24:	4620      	mov	r0, r4
 8009c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c2a:	f000 b817 	b.w	8009c5c <_kill_r>
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d00a      	beq.n	8009c48 <_raise_r+0x4c>
 8009c32:	1c59      	adds	r1, r3, #1
 8009c34:	d103      	bne.n	8009c3e <_raise_r+0x42>
 8009c36:	2316      	movs	r3, #22
 8009c38:	6003      	str	r3, [r0, #0]
 8009c3a:	2001      	movs	r0, #1
 8009c3c:	e7e7      	b.n	8009c0e <_raise_r+0x12>
 8009c3e:	2400      	movs	r4, #0
 8009c40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c44:	4628      	mov	r0, r5
 8009c46:	4798      	blx	r3
 8009c48:	2000      	movs	r0, #0
 8009c4a:	e7e0      	b.n	8009c0e <_raise_r+0x12>

08009c4c <raise>:
 8009c4c:	4b02      	ldr	r3, [pc, #8]	; (8009c58 <raise+0xc>)
 8009c4e:	4601      	mov	r1, r0
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	f7ff bfd3 	b.w	8009bfc <_raise_r>
 8009c56:	bf00      	nop
 8009c58:	20000010 	.word	0x20000010

08009c5c <_kill_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d07      	ldr	r5, [pc, #28]	; (8009c7c <_kill_r+0x20>)
 8009c60:	2300      	movs	r3, #0
 8009c62:	4604      	mov	r4, r0
 8009c64:	4608      	mov	r0, r1
 8009c66:	4611      	mov	r1, r2
 8009c68:	602b      	str	r3, [r5, #0]
 8009c6a:	f000 f813 	bl	8009c94 <_kill>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	d102      	bne.n	8009c78 <_kill_r+0x1c>
 8009c72:	682b      	ldr	r3, [r5, #0]
 8009c74:	b103      	cbz	r3, 8009c78 <_kill_r+0x1c>
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20004fa8 	.word	0x20004fa8

08009c80 <_getpid_r>:
 8009c80:	f000 b800 	b.w	8009c84 <_getpid>

08009c84 <_getpid>:
 8009c84:	4b02      	ldr	r3, [pc, #8]	; (8009c90 <_getpid+0xc>)
 8009c86:	2258      	movs	r2, #88	; 0x58
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8e:	4770      	bx	lr
 8009c90:	20004fa8 	.word	0x20004fa8

08009c94 <_kill>:
 8009c94:	4b02      	ldr	r3, [pc, #8]	; (8009ca0 <_kill+0xc>)
 8009c96:	2258      	movs	r2, #88	; 0x58
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9e:	4770      	bx	lr
 8009ca0:	20004fa8 	.word	0x20004fa8

08009ca4 <_exit>:
 8009ca4:	e7fe      	b.n	8009ca4 <_exit>
	...

08009ca8 <_init>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	bf00      	nop
 8009cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cae:	bc08      	pop	{r3}
 8009cb0:	469e      	mov	lr, r3
 8009cb2:	4770      	bx	lr

08009cb4 <_fini>:
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb6:	bf00      	nop
 8009cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cba:	bc08      	pop	{r3}
 8009cbc:	469e      	mov	lr, r3
 8009cbe:	4770      	bx	lr
